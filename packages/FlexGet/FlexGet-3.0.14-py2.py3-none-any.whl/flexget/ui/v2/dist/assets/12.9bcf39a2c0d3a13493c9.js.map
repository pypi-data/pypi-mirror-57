{"version":3,"sources":["webpack:///./src/common/TextField/index.jsx","webpack:///./node_modules/@material-ui/core/esm/CardContent/CardContent.js","webpack:///./src/core/auth/LoginCard/styles.js","webpack:///./src/core/auth/LoginCard/LoginCard.jsx","webpack:///./src/core/auth/LoginCard/index.js","webpack:///./src/common/WaveSpinner/styles.js","webpack:///./src/common/WaveSpinner/index.jsx","webpack:///./src/core/auth/Splash/styles.js","webpack:///./src/core/auth/Splash/index.jsx","webpack:///./src/core/auth/styles.ts","webpack:///./src/core/auth/index.tsx"],"names":["CustomTextField","input","meta","touched","error","custom","CardContent","forwardRef","props","ref","classes","className","_props$component","component","Component","other","createElement","root","padding","paddingBottom","name","Card","MUICard","theme","breakpoints","up","ErrorMessage","palette","LoginButton","Button","Content","LoginField","Field","LoginCard","handleSubmit","errorStatus","onSubmit","message","TextField","id","label","autoFocus","type","CardActions","defaultProps","reduxForm","form","connect","initialValues","username","stretchDelay","keyframes","Spinner","Rect1","primary","Rect2","Rect3","Rect4","Rect5","WaveSpinner","Logo","headerImage","SplashScreen","LoginPage","location","from","state","pathname","AuthContainter","useContainer","loggedIn","setLoggedIn","useFlexgetAPI","loginState","postLogin","post","versionState","getVersion","get","useEffect","async","response","ok","to","loading","Splash","req"],"mappings":"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","file":"12.9bcf39a2c0d3a13493c9.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nconst CustomTextField = ({ input, meta: { touched, error }, ...custom }) => (<TextField error={touched && error} {...input} {...custom}/>);\nCustomTextField.propTypes = {\n    input: PropTypes.object.isRequired,\n    meta: PropTypes.object.isRequired,\n};\nexport default CustomTextField;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import styled from '@emotion/styled';\nimport { Field } from 'redux-form';\nimport theme from 'theme';\nimport { Card as MUICard, CardContent, Button } from '@material-ui/core';\nexport const Card = styled(MUICard) `\n  max-width: 40rem;\n  margin: 0 1rem;\n  ${theme.breakpoints.up('sm')} {\n    margin: 0 auto;\n  }\n`;\nexport const ErrorMessage = styled.div `\n  color: ${theme.palette.error[500]};\n  text-align: center;\n  padding: 1rem;\n`;\nexport const LoginButton = styled(Button) `\n  width: 100%;\n`;\nexport const Content = styled(CardContent) `\n  display: flex;\n  flex-direction: column;\n`;\nexport const LoginField = styled(Field) `\n  padding-bottom: 1rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm } from 'redux-form';\nimport CardActions from '@material-ui/core/CardActions';\nimport TextField from 'common/TextField';\nimport { Card, ErrorMessage, LoginButton, Content, LoginField } from './styles';\nexport const LoginCard = ({ handleSubmit, errorStatus }) => (<Card>\n    <form onSubmit={handleSubmit}>\n      <Content>\n        <ErrorMessage>{errorStatus.message}</ErrorMessage>\n        <LoginField name=\"username\" component={TextField} id=\"username\" label=\"Username\" autoFocus/>\n        <LoginField name=\"password\" component={TextField} id=\"password\" label=\"Password\" type=\"Password\"/>\n      </Content>\n      <CardActions>\n        <LoginButton type=\"submit\">Login</LoginButton>\n      </CardActions>\n    </form>\n  </Card>);\nLoginCard.propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    errorStatus: PropTypes.object,\n};\nLoginCard.defaultProps = {\n    errorStatus: {},\n};\nexport default reduxForm({\n    form: 'login',\n})(LoginCard);\n","import { connect } from 'react-redux';\nimport LoginCard from './LoginCard';\nexport function mapStateToProps() {\n    return {\n        initialValues: {\n            username: 'flexget',\n        },\n    };\n}\nexport default connect(mapStateToProps)(LoginCard);\nexport { LoginCard };\n","import styled from '@emotion/styled';\nimport { keyframes } from '@emotion/core';\nimport theme from 'theme';\nconst stretchDelay = keyframes `\n  0%, 40%, 100% {\n    transform: scaleY(0.4);\n  }\n\n  20% {\n    transform: scaleY(1.0);\n  }\n`;\nexport const Spinner = styled.div `\n  margin: 10rem auto;\n  width: 5rem;\n  height: 4rem;\n  text-align: center;\n  font-size: 1rem;\n`;\nexport const Rect1 = styled.div `\n  background-color: ${theme.palette.primary[500]};\n  height: 100%;\n  width: 0.6rem;\n  display: inline-block;\n  margin: 0.1rem;\n  animation: ${stretchDelay} 1.2s infinite ease-in-out;\n`;\nexport const Rect2 = styled(Rect1) `\n  animation-delay: -1.1s;\n`;\nexport const Rect3 = styled(Rect1) `\n  animation-delay: -1s;\n`;\nexport const Rect4 = styled(Rect1) `\n  animation-delay: -0.9s;\n`;\nexport const Rect5 = styled(Rect1) `\n  animation-delay: -0.8s;\n`;\n","import React from 'react';\nimport { Spinner, Rect1, Rect2, Rect3, Rect4, Rect5 } from './styles';\nconst WaveSpinner = () => (<Spinner>\n    <Rect1 />\n    <Rect2 />\n    <Rect3 />\n    <Rect4 />\n    <Rect5 />\n  </Spinner>);\nexport default WaveSpinner;\n","import styled from '@emotion/styled';\nimport theme from 'theme';\nimport headerImage from 'images/header.png';\nexport const Logo = styled.div `\n  background: transparent url(${headerImage}) no-repeat center;\n  min-height: 9rem;\n  background-size: 100% auto;\n  margin: 0 1rem;\n  ${theme.breakpoints.up('sm')} {\n    background-size: auto;\n  }\n`;\n","import React from 'react';\nimport WaveSpinner from 'common/WaveSpinner';\nimport { Logo } from './styles';\nconst SplashScreen = () => (<div>\n    <Logo />\n    <WaveSpinner />\n  </div>);\nexport default SplashScreen;\n","import styled from '@emotion/styled';\nimport theme from 'theme';\nimport headerImage from 'images/header.png';\nexport const Logo = styled.div `\n  background: transparent url(${headerImage}) no-repeat center;\n  min-height: 9rem;\n  background-size: 100% auto;\n  margin: 0 1rem;\n  ${theme.breakpoints.up('sm')} {\n    background-size: auto;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { AuthContainter } from 'core/auth/container';\nimport { useFlexgetAPI } from 'core/api';\nimport LoginCard from './LoginCard';\nimport SplashScreen from './Splash';\nimport { Logo } from './styles';\nconst Card = LoginCard;\nconst LoginPage = ({ location }) => {\n    const { from } = location?.state || { from: { pathname: '/' } };\n    const [loggedIn, setLoggedIn] = AuthContainter.useContainer();\n    const [loginState, { post: postLogin }] = useFlexgetAPI('/auth/login');\n    const [versionState, { get: getVersion }] = useFlexgetAPI('/server/version');\n    const handleSubmit = async (req) => {\n        const response = await postLogin(req);\n        if (response?.ok) {\n            setLoggedIn(true);\n        }\n    };\n    useEffect(() => {\n        const fetch = async () => {\n            const response = await getVersion();\n            if (response?.ok) {\n                setLoggedIn(true);\n            }\n        };\n        fetch();\n    }, [getVersion, setLoggedIn]);\n    if (loggedIn) {\n        return <Redirect to={from}/>;\n    }\n    if (versionState.loading) {\n        return <SplashScreen />;\n    }\n    return (<div>\n      <Logo />\n      <Card onSubmit={handleSubmit} errorStatus={loginState.error}/>\n    </div>);\n};\nexport default LoginPage;\n"],"sourceRoot":""}