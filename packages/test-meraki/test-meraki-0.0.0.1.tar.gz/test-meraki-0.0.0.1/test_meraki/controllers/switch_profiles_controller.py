# -*- coding: utf-8 -*-

"""
    test_meraki

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from test_meraki.api_helper import APIHelper
from test_meraki.configuration import Configuration
from test_meraki.controllers.base_controller import BaseController
from test_meraki.http.auth.custom_header_auth import CustomHeaderAuth

class SwitchProfilesController(BaseController):

    """A Controller to access Endpoints in the test_meraki API."""


    def get_organization_config_template_switch_profiles(self,
                                                         organization_id,
                                                         config_template_id):
        """Does a GET request to /organizations/{organizationId}/configTemplates/{configTemplateId}/switchProfiles.

        List the switch profiles for your switch template configuration

        Args:
            organization_id (string): TODO: type description here. Example: 
            config_template_id (string): TODO: type description here. Example:
                
        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/organizations/{organizationId}/configTemplates/{configTemplateId}/switchProfiles'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'organizationId': organization_id,
            'configTemplateId': config_template_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.get(_query_url)
        CustomHeaderAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
