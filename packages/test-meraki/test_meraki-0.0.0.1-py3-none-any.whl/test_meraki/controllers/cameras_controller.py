# -*- coding: utf-8 -*-

"""
    test_meraki

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from test_meraki.api_helper import APIHelper
from test_meraki.configuration import Configuration
from test_meraki.controllers.base_controller import BaseController
from test_meraki.http.auth.custom_header_auth import CustomHeaderAuth

class CamerasController(BaseController):

    """A Controller to access Endpoints in the test_meraki API."""


    def create_generate_network_camera_snapshot(self,
                                                network_id,
                                                serial,
                                                generate_network_camera_snapshot=None):
        """Does a POST request to /networks/{networkId}/cameras/{serial}/snapshot.

        Generate a snapshot of what the camera sees at the specified time and
        return a link to that image.

        Args:
            network_id (string): TODO: type description here. Example: 
            serial (string): TODO: type description here. Example: 
            generate_network_camera_snapshot (GenerateNetworkCameraSnapshot,
                optional): TODO: type description here. Example: 

        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/networks/{networkId}/cameras/{serial}/snapshot'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'networkId': network_id,
            'serial': serial
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(generate_network_camera_snapshot))
        CustomHeaderAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def get_network_camera_video_link(self,
                                      network_id,
                                      serial,
                                      timestamp=None):
        """Does a GET request to /networks/{networkId}/cameras/{serial}/videoLink.

        Returns video link to the specified camera. If a timestamp is
        supplied, it links to that timestamp.

        Args:
            network_id (string): TODO: type description here. Example: 
            serial (string): TODO: type description here. Example: 
            timestamp (string, optional): [optional] The video link will start
                at this timestamp. The timestamp is in UNIX Epoch time
                (milliseconds). If no timestamp is specified, we will assume
                current time.

        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/networks/{networkId}/cameras/{serial}/videoLink'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'networkId': network_id,
            'serial': serial
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'timestamp': timestamp
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.http_client.get(_query_url)
        CustomHeaderAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
