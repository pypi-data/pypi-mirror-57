
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFleftASSIGN_EQUALleftEXISTSleftFORALLleftAGG_OPERleftEQUIVleftIMPLYleftORleftANDAMPERSANDleftNOTleftCOMP_EQUALNEQLESSLESSEQGREATERGREATEREQleftPLUSMINUSleftTIMESDIVrightUMINUSACTION ACTION_PRECONDITIONS AMPERSAND AND ASSIGN_EQUAL BERNOULLI BOOL CASE CDFS COLON COMMA COMP_EQUAL CPFS DEFAULT DERIVED_FLUENT DIRAC_DELTA DIRICHLET DISCOUNT DISCRETE DIV DOLLAR_SIGN DOMAIN DOT DOUBLE ELSE ENUM_VAL EQUIV EXISTS EXPONENTIAL FALSE FORALL GAMMA GREATER GREATEREQ HORIZON IDENT IF IMPLY INIT_STATE INSTANCE INT INTEGER INTERMEDIATE KRON_DELTA LBRACK LCURLY LESS LESSEQ LEVEL LPAREN MAX_NONDEF_ACTIONS MINUS MULTINOMIAL NEG_INF NEQ NON_FLUENT NON_FLUENTS NORMAL NOT OBJECT OBJECTS OBSERVATION OR OTHERWISE PLUS POISSON POS_INF PVARIABLES QUESTION RBRACK RCURLY REAL REQUIREMENTS REWARD RPAREN SEMI STATE STATE_ACTION_CONSTRAINTS STATE_INVARIANTS SWITCH TERMINAL TERMINATE_WHEN THEN TIMES TRUE TYPES UNDERSCORE UNIFORM VAR WEIBULLrddl : rddl_blockrddl_block : rddl_block domain_block\n                      | rddl_block instance_block\n                      | rddl_block nonfluent_block\n                      | emptydomain_block : DOMAIN IDENT LCURLY req_section domain_list RCURLYreq_section : REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI\n                       | REQUIREMENTS LCURLY string_list RCURLY SEMI\n                       | emptydomain_list : domain_list type_section\n                       | domain_list pvar_section\n                       | domain_list cpf_section\n                       | domain_list reward_section\n                       | domain_list action_precond_section\n                       | domain_list state_action_constraint_section\n                       | domain_list state_invariant_section\n                       | emptytype_section : TYPES LCURLY type_list RCURLY SEMItype_list : type_list type_def\n                     | emptytype_def : IDENT COLON OBJECT SEMI\n                    | IDENT COLON LCURLY enum_list RCURLY SEMIenum_list : enum_list COMMA ENUM_VAL\n                     | ENUM_VAL\n                     | emptypvar_section : PVARIABLES LCURLY pvar_list RCURLY SEMIpvar_list : pvar_list pvar_def\n                     | emptypvar_def : nonfluent_def\n                    | statefluent_def\n                    | actionfluent_def\n                    | intermfluent_defnonfluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI\n                         | IDENT COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIstatefluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI\n                           | IDENT COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIactionfluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI\n                            | IDENT COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIintermfluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI\n                            | IDENT COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMIcpf_section : cpf_header LCURLY cpf_list RCURLY SEMIcpf_header : CPFS\n                      | CDFScpf_list : cpf_list cpf_def\n                    | emptycpf_def : pvar_expr ASSIGN_EQUAL expr SEMIreward_section : REWARD ASSIGN_EQUAL expr SEMIaction_precond_section : ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI\n                                  | ACTION_PRECONDITIONS LCURLY RCURLY SEMIaction_precond_list : action_precond_list action_precond_def\n                               | action_precond_defaction_precond_def : expr SEMIstate_action_constraint_section : STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI\n                                           | STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMIstate_cons_list : state_cons_list state_cons_def\n                           | state_cons_defstate_cons_def : expr SEMIstate_invariant_section : STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI\n                                   | STATE_INVARIANTS LCURLY RCURLY SEMIstate_invariant_list : state_invariant_list state_invariant_def\n                                | state_invariant_defstate_invariant_def : expr SEMIterm_list : term_list COMMA term\n                     | term\n                     | emptyterm : VAR\n                | ENUM_VAL\n                | pvar_exprexpr : pvar_expr\n                | group_expr\n                | function_expr\n                | relational_expr\n                | boolean_expr\n                | quantifier_expr\n                | numerical_expr\n                | aggregation_expr\n                | control_expr\n                | randomvar_exprpvar_expr : IDENT LPAREN term_list RPAREN\n                     | IDENTgroup_expr : LBRACK expr RBRACK\n                      | LPAREN expr RPARENfunction_expr : IDENT LBRACK expr_list RBRACKrelational_expr : expr COMP_EQUAL expr\n                           | expr NEQ expr\n                           | expr GREATER expr\n                           | expr GREATEREQ expr\n                           | expr LESS expr\n                           | expr LESSEQ exprboolean_expr : expr AND expr\n                        | expr AMPERSAND expr\n                        | expr OR expr\n                        | expr IMPLY expr\n                        | expr EQUIV expr\n                        | NOT expr %prec UMINUS\n                        | bool_typequantifier_expr : FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr %prec FORALL\n                           | EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr %prec EXISTSnumerical_expr : expr PLUS expr\n                          | expr MINUS expr\n                          | expr TIMES expr\n                          | expr DIV expr\n                          | MINUS expr %prec UMINUS\n                          | PLUS expr %prec UMINUS\n                          | INTEGER\n                          | DOUBLEaggregation_expr : IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr %prec AGG_OPERcontrol_expr : IF LPAREN expr RPAREN THEN expr ELSE expr %prec IF\n                        | SWITCH LPAREN term RPAREN LCURLY case_list RCURLYrandomvar_expr : BERNOULLI LPAREN expr RPAREN\n                          | DIRAC_DELTA LPAREN expr RPAREN\n                          | KRON_DELTA LPAREN expr RPAREN\n                          | UNIFORM LPAREN expr COMMA expr RPAREN\n                          | NORMAL LPAREN expr COMMA expr RPAREN\n                          | EXPONENTIAL LPAREN expr RPAREN\n                          | DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN\n                          | DIRICHLET LPAREN IDENT COMMA expr RPAREN\n                          | POISSON LPAREN expr RPAREN\n                          | WEIBULL LPAREN expr COMMA expr RPAREN\n                          | GAMMA   LPAREN expr COMMA expr RPARENtyped_var_list : typed_var_list COMMA typed_var\n                          | typed_vartyped_var : VAR COLON IDENTexpr_list : expr_list COMMA expr\n                     | exprcase_list : case_list COMMA case_def\n                     | case_defcase_def : CASE term COLON expr\n                    | DEFAULT COLON exprlconst_case_list : lconst COLON expr\n                            | lconst COLON OTHERWISE\n                            | lconst_case_list COMMA lconst COLON exprlconst : IDENT\n                  | ENUM_VALparam_list : string_listtype_spec : IDENT\n                     | INT\n                     | REAL\n                     | BOOLrange_const : bool_type\n                       | double_type\n                       | int_type\n                       | IDENTbool_type : TRUE\n                     | FALSEdouble_type : DOUBLE\n                       | MINUS DOUBLE\n                       | POS_INF\n                       | NEG_INFint_type : INTEGER\n                    | MINUS INTEGERpos_int_type_or_pos_inf : INTEGER\n                                   | POS_INFinstance_block : INSTANCE IDENT LCURLY instance_list RCURLYinstance_list : instance_list domain_section\n                         | instance_list nonfluents_section\n                         | instance_list objects_section\n                         | instance_list init_state_section\n                         | instance_list max_nondef_actions_section\n                         | instance_list horizon_spec_section\n                         | instance_list discount_section\n                         | emptydomain_section : DOMAIN ASSIGN_EQUAL IDENT SEMInonfluents_section : NON_FLUENTS ASSIGN_EQUAL IDENT SEMIobjects_section : OBJECTS LCURLY objects_list RCURLY SEMIinit_state_section : INIT_STATE LCURLY pvar_inst_list RCURLY SEMImax_nondef_actions_section : MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMIhorizon_spec_section : HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI\n                                | HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPARENdiscount_section : DISCOUNT ASSIGN_EQUAL DOUBLE SEMInonfluent_block : NON_FLUENTS IDENT LCURLY nonfluent_list RCURLYnonfluent_list : nonfluent_list domain_section\n                          | nonfluent_list objects_section\n                          | nonfluent_list init_non_fluent_section\n                          | emptyinit_non_fluent_section : NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMIobjects_list : objects_list objects_def\n                        | objects_def\n                        | emptyobjects_def : IDENT COLON LCURLY object_const_list RCURLY SEMIobject_const_list : object_const_list COMMA IDENT\n                             | IDENTpvar_inst_list : pvar_inst_list pvar_inst_def\n                          | pvar_inst_defpvar_inst_def : IDENT LPAREN lconst_list RPAREN SEMI\n                         | IDENT SEMI\n                         | NOT IDENT LPAREN lconst_list RPAREN SEMI\n                         | NOT IDENT SEMI\n                         | IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI\n                         | IDENT ASSIGN_EQUAL range_const SEMIlconst_list : lconst_list COMMA lconst\n                       | lconststring_list : string_list COMMA IDENT\n                       | IDENT\n                       | emptyempty :'
    
_lr_action_items = {'DOMAIN':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,161,162,172,173,175,243,245,263,323,],[-196,7,-5,-2,-3,-4,-196,-196,35,-162,35,-175,-154,-155,-156,-157,-158,-159,-160,-161,-171,-172,-173,-174,-6,-163,-164,-167,-168,-170,-165,-166,-176,-169,]),'INSTANCE':([0,2,3,4,5,6,27,43,47,],[-196,8,-5,-2,-3,-4,-154,-171,-6,]),'NON_FLUENTS':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,161,162,172,173,175,243,245,263,323,],[-196,9,-5,-2,-3,-4,-196,-196,36,-162,42,-175,-154,-155,-156,-157,-158,-159,-160,-161,-171,-172,-173,-174,-6,-163,-164,-167,-168,-170,-165,-166,-176,-169,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rddl':([0,],[1,]),'rddl_block':([0,],[2,]),'empty':([0,13,14,15,16,26,64,70,76,77,78,207,267,325,],[3,18,20,22,24,67,67,90,104,106,108,288,67,361,]),'domain_block':([2,],[4,]),'instance_block':([2,],[5,]),'nonfluent_block':([2,],[6,]),'req_section':([13,],[16,]),'instance_list':([14,],[19,]),'nonfluent_list':([15,],[21,]),'domain_list':([16,],[23,]),'domain_section':([19,21,],[28,44,]),'nonfluents_section':([19,],[29,]),'objects_section':([19,21,],[30,45,]),'init_state_section':([19,],[31,]),'max_nondef_actions_section':([19,],[32,]),'horizon_spec_section':([19,],[33,]),'discount_section':([19,],[34,]),'init_non_fluent_section':([21,],[46,]),'type_section':([23,],[48,]),'pvar_section':([23,],[49,]),'cpf_section':([23,],[50,]),'reward_section':([23,],[51,]),'action_precond_section':([23,],[52,]),'state_action_constraint_section':([23,],[53,]),'state_invariant_section':([23,],[54,]),'cpf_header':([23,],[57,]),'string_list':([26,64,267,],[65,83,327,]),'objects_list':([70,],[88,]),'objects_def':([70,88,],[89,164,]),'pvar_inst_list':([71,75,],[92,102,]),'pvar_inst_def':([71,75,92,102,],[93,93,167,167,]),'pos_int_type_or_pos_inf':([72,73,],[96,99,]),'type_list':([76,],[103,]),'pvar_list':([77,],[105,]),'cpf_list':([78,],[107,]),'expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[109,149,153,157,210,211,212,215,216,149,153,157,262,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,293,299,301,302,303,304,305,306,309,310,311,329,369,377,378,381,382,383,395,398,399,400,431,441,444,454,455,]),'pvar_expr':([79,80,81,82,107,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,217,218,219,220,221,222,223,224,227,228,229,270,331,333,344,345,348,350,351,370,373,374,375,403,409,425,429,443,445,],[110,110,110,110,189,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,291,110,110,291,110,110,110,110,110,110,110,110,110,110,291,110,110,110,110,110,110,110,110,110,110,291,110,110,110,110,110,]),'group_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'function_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'relational_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'boolean_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'quantifier_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'numerical_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'aggregation_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'control_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'randomvar_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,370,373,374,375,409,425,429,443,445,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'bool_type':([79,80,81,82,121,122,123,127,128,146,150,154,170,174,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,217,219,220,221,222,223,224,227,228,229,270,333,344,345,348,350,351,355,370,373,374,375,409,425,429,443,445,460,461,462,463,480,481,482,483,],[124,124,124,124,124,124,124,124,124,124,124,124,252,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,252,124,124,124,124,124,124,124,124,124,252,252,252,252,252,252,252,252,]),'action_precond_list':([80,],[146,]),'action_precond_def':([80,146,],[148,231,]),'state_cons_list':([81,],[150,]),'state_cons_def':([81,150,],[152,235,]),'state_invariant_list':([82,],[154,]),'state_invariant_def':([82,154,],[156,239,]),'type_def':([103,],[178,]),'pvar_def':([105,],[181,]),'nonfluent_def':([105,],[182,]),'statefluent_def':([105,],[183,]),'actionfluent_def':([105,],[184,]),'intermfluent_def':([105,],[185,]),'cpf_def':([107,],[188,]),'lconst_list':([168,260,],[247,322,]),'lconst':([168,260,318,347,407,],[248,248,356,380,430,]),'range_const':([170,355,460,461,462,463,480,481,482,483,],[251,386,468,469,470,471,488,489,490,491,]),'double_type':([170,355,460,461,462,463,480,481,482,483,],[253,253,253,253,253,253,253,253,253,253,]),'int_type':([170,355,460,461,462,463,480,481,482,483,],[254,254,254,254,254,254,254,254,254,254,]),'term_list':([207,],[286,]),'term':([207,218,331,403,],[287,300,368,428,]),'expr_list':([208,],[292,]),'object_const_list':([244,],[316,]),'param_list':([267,],[326,]),'typed_var_list':([294,297,298,],[334,337,338,]),'typed_var':([294,297,298,371,],[335,335,335,396,]),'enum_list':([325,],[359,]),'lconst_case_list':([347,],[379,]),'case_list':([376,],[401,]),'case_def':([376,427,],[402,442,]),'type_spec':([391,392,393,394,446,447,448,449,],[418,422,423,424,456,457,458,459,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> rddl","S'",1,None,None,None),
  ('rddl -> rddl_block','rddl',1,'p_rddl','parser.py',258),
  ('rddl_block -> rddl_block domain_block','rddl_block',2,'p_rddl_block','parser.py',262),
  ('rddl_block -> rddl_block instance_block','rddl_block',2,'p_rddl_block','parser.py',263),
  ('rddl_block -> rddl_block nonfluent_block','rddl_block',2,'p_rddl_block','parser.py',264),
  ('rddl_block -> empty','rddl_block',1,'p_rddl_block','parser.py',265),
  ('domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY','domain_block',6,'p_domain_block','parser.py',274),
  ('req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI','req_section',6,'p_req_section','parser.py',279),
  ('req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI','req_section',5,'p_req_section','parser.py',280),
  ('req_section -> empty','req_section',1,'p_req_section','parser.py',281),
  ('domain_list -> domain_list type_section','domain_list',2,'p_domain_list','parser.py',289),
  ('domain_list -> domain_list pvar_section','domain_list',2,'p_domain_list','parser.py',290),
  ('domain_list -> domain_list cpf_section','domain_list',2,'p_domain_list','parser.py',291),
  ('domain_list -> domain_list reward_section','domain_list',2,'p_domain_list','parser.py',292),
  ('domain_list -> domain_list action_precond_section','domain_list',2,'p_domain_list','parser.py',293),
  ('domain_list -> domain_list state_action_constraint_section','domain_list',2,'p_domain_list','parser.py',294),
  ('domain_list -> domain_list state_invariant_section','domain_list',2,'p_domain_list','parser.py',295),
  ('domain_list -> empty','domain_list',1,'p_domain_list','parser.py',296),
  ('type_section -> TYPES LCURLY type_list RCURLY SEMI','type_section',5,'p_type_section','parser.py',305),
  ('type_list -> type_list type_def','type_list',2,'p_type_list','parser.py',310),
  ('type_list -> empty','type_list',1,'p_type_list','parser.py',311),
  ('type_def -> IDENT COLON OBJECT SEMI','type_def',4,'p_type_def','parser.py',319),
  ('type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI','type_def',6,'p_type_def','parser.py',320),
  ('enum_list -> enum_list COMMA ENUM_VAL','enum_list',3,'p_enum_list','parser.py',327),
  ('enum_list -> ENUM_VAL','enum_list',1,'p_enum_list','parser.py',328),
  ('enum_list -> empty','enum_list',1,'p_enum_list','parser.py',329),
  ('pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI','pvar_section',5,'p_pvar_section','parser.py',339),
  ('pvar_list -> pvar_list pvar_def','pvar_list',2,'p_pvar_list','parser.py',344),
  ('pvar_list -> empty','pvar_list',1,'p_pvar_list','parser.py',345),
  ('pvar_def -> nonfluent_def','pvar_def',1,'p_pvar_def','parser.py',353),
  ('pvar_def -> statefluent_def','pvar_def',1,'p_pvar_def','parser.py',354),
  ('pvar_def -> actionfluent_def','pvar_def',1,'p_pvar_def','parser.py',355),
  ('pvar_def -> intermfluent_def','pvar_def',1,'p_pvar_def','parser.py',356),
  ('nonfluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','nonfluent_def',15,'p_nonfluent_def','parser.py',360),
  ('nonfluent_def -> IDENT COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','nonfluent_def',12,'p_nonfluent_def','parser.py',361),
  ('statefluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','statefluent_def',15,'p_statefluent_def','parser.py',368),
  ('statefluent_def -> IDENT COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','statefluent_def',12,'p_statefluent_def','parser.py',369),
  ('actionfluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','actionfluent_def',15,'p_actionfluent_def','parser.py',376),
  ('actionfluent_def -> IDENT COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','actionfluent_def',12,'p_actionfluent_def','parser.py',377),
  ('intermfluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','intermfluent_def',15,'p_intermfluent_def','parser.py',384),
  ('intermfluent_def -> IDENT COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','intermfluent_def',12,'p_intermfluent_def','parser.py',385),
  ('cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI','cpf_section',5,'p_cpf_section','parser.py',392),
  ('cpf_header -> CPFS','cpf_header',1,'p_cpf_header','parser.py',397),
  ('cpf_header -> CDFS','cpf_header',1,'p_cpf_header','parser.py',398),
  ('cpf_list -> cpf_list cpf_def','cpf_list',2,'p_cpf_list','parser.py',402),
  ('cpf_list -> empty','cpf_list',1,'p_cpf_list','parser.py',403),
  ('cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI','cpf_def',4,'p_cpf_def','parser.py',411),
  ('reward_section -> REWARD ASSIGN_EQUAL expr SEMI','reward_section',4,'p_reward_section','parser.py',415),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI','action_precond_section',5,'p_action_precond_section','parser.py',420),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI','action_precond_section',4,'p_action_precond_section','parser.py',421),
  ('action_precond_list -> action_precond_list action_precond_def','action_precond_list',2,'p_action_precond_list','parser.py',429),
  ('action_precond_list -> action_precond_def','action_precond_list',1,'p_action_precond_list','parser.py',430),
  ('action_precond_def -> expr SEMI','action_precond_def',2,'p_action_precond_def','parser.py',438),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI','state_action_constraint_section',5,'p_state_action_constraint_section','parser.py',442),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI','state_action_constraint_section',4,'p_state_action_constraint_section','parser.py',443),
  ('state_cons_list -> state_cons_list state_cons_def','state_cons_list',2,'p_state_cons_list','parser.py',451),
  ('state_cons_list -> state_cons_def','state_cons_list',1,'p_state_cons_list','parser.py',452),
  ('state_cons_def -> expr SEMI','state_cons_def',2,'p_state_cons_def','parser.py',460),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI','state_invariant_section',5,'p_state_invariant_section','parser.py',464),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI','state_invariant_section',4,'p_state_invariant_section','parser.py',465),
  ('state_invariant_list -> state_invariant_list state_invariant_def','state_invariant_list',2,'p_state_invariant_list','parser.py',473),
  ('state_invariant_list -> state_invariant_def','state_invariant_list',1,'p_state_invariant_list','parser.py',474),
  ('state_invariant_def -> expr SEMI','state_invariant_def',2,'p_state_invariant_def','parser.py',482),
  ('term_list -> term_list COMMA term','term_list',3,'p_term_list','parser.py',486),
  ('term_list -> term','term_list',1,'p_term_list','parser.py',487),
  ('term_list -> empty','term_list',1,'p_term_list','parser.py',488),
  ('term -> VAR','term',1,'p_term','parser.py',498),
  ('term -> ENUM_VAL','term',1,'p_term','parser.py',499),
  ('term -> pvar_expr','term',1,'p_term','parser.py',500),
  ('expr -> pvar_expr','expr',1,'p_expr','parser.py',504),
  ('expr -> group_expr','expr',1,'p_expr','parser.py',505),
  ('expr -> function_expr','expr',1,'p_expr','parser.py',506),
  ('expr -> relational_expr','expr',1,'p_expr','parser.py',507),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',508),
  ('expr -> quantifier_expr','expr',1,'p_expr','parser.py',509),
  ('expr -> numerical_expr','expr',1,'p_expr','parser.py',510),
  ('expr -> aggregation_expr','expr',1,'p_expr','parser.py',511),
  ('expr -> control_expr','expr',1,'p_expr','parser.py',512),
  ('expr -> randomvar_expr','expr',1,'p_expr','parser.py',513),
  ('pvar_expr -> IDENT LPAREN term_list RPAREN','pvar_expr',4,'p_pvar_expr','parser.py',517),
  ('pvar_expr -> IDENT','pvar_expr',1,'p_pvar_expr','parser.py',518),
  ('group_expr -> LBRACK expr RBRACK','group_expr',3,'p_group_expr','parser.py',525),
  ('group_expr -> LPAREN expr RPAREN','group_expr',3,'p_group_expr','parser.py',526),
  ('function_expr -> IDENT LBRACK expr_list RBRACK','function_expr',4,'p_function_expr','parser.py',530),
  ('relational_expr -> expr COMP_EQUAL expr','relational_expr',3,'p_relational_expr','parser.py',534),
  ('relational_expr -> expr NEQ expr','relational_expr',3,'p_relational_expr','parser.py',535),
  ('relational_expr -> expr GREATER expr','relational_expr',3,'p_relational_expr','parser.py',536),
  ('relational_expr -> expr GREATEREQ expr','relational_expr',3,'p_relational_expr','parser.py',537),
  ('relational_expr -> expr LESS expr','relational_expr',3,'p_relational_expr','parser.py',538),
  ('relational_expr -> expr LESSEQ expr','relational_expr',3,'p_relational_expr','parser.py',539),
  ('boolean_expr -> expr AND expr','boolean_expr',3,'p_boolean_expr','parser.py',543),
  ('boolean_expr -> expr AMPERSAND expr','boolean_expr',3,'p_boolean_expr','parser.py',544),
  ('boolean_expr -> expr OR expr','boolean_expr',3,'p_boolean_expr','parser.py',545),
  ('boolean_expr -> expr IMPLY expr','boolean_expr',3,'p_boolean_expr','parser.py',546),
  ('boolean_expr -> expr EQUIV expr','boolean_expr',3,'p_boolean_expr','parser.py',547),
  ('boolean_expr -> NOT expr','boolean_expr',2,'p_boolean_expr','parser.py',548),
  ('boolean_expr -> bool_type','boolean_expr',1,'p_boolean_expr','parser.py',549),
  ('quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',558),
  ('quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',559),
  ('numerical_expr -> expr PLUS expr','numerical_expr',3,'p_numerical_expr','parser.py',563),
  ('numerical_expr -> expr MINUS expr','numerical_expr',3,'p_numerical_expr','parser.py',564),
  ('numerical_expr -> expr TIMES expr','numerical_expr',3,'p_numerical_expr','parser.py',565),
  ('numerical_expr -> expr DIV expr','numerical_expr',3,'p_numerical_expr','parser.py',566),
  ('numerical_expr -> MINUS expr','numerical_expr',2,'p_numerical_expr','parser.py',567),
  ('numerical_expr -> PLUS expr','numerical_expr',2,'p_numerical_expr','parser.py',568),
  ('numerical_expr -> INTEGER','numerical_expr',1,'p_numerical_expr','parser.py',569),
  ('numerical_expr -> DOUBLE','numerical_expr',1,'p_numerical_expr','parser.py',570),
  ('aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr','aggregation_expr',6,'p_aggregation_expr','parser.py',579),
  ('control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr','control_expr',8,'p_control_expr','parser.py',583),
  ('control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY','control_expr',7,'p_control_expr','parser.py',584),
  ('randomvar_expr -> BERNOULLI LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',591),
  ('randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',592),
  ('randomvar_expr -> KRON_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',593),
  ('randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',594),
  ('randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',595),
  ('randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',596),
  ('randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',597),
  ('randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',598),
  ('randomvar_expr -> POISSON LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',599),
  ('randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',600),
  ('randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',601),
  ('typed_var_list -> typed_var_list COMMA typed_var','typed_var_list',3,'p_typed_var_list','parser.py',611),
  ('typed_var_list -> typed_var','typed_var_list',1,'p_typed_var_list','parser.py',612),
  ('typed_var -> VAR COLON IDENT','typed_var',3,'p_typed_var','parser.py',620),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','parser.py',624),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',625),
  ('case_list -> case_list COMMA case_def','case_list',3,'p_case_list','parser.py',633),
  ('case_list -> case_def','case_list',1,'p_case_list','parser.py',634),
  ('case_def -> CASE term COLON expr','case_def',4,'p_case_def','parser.py',642),
  ('case_def -> DEFAULT COLON expr','case_def',3,'p_case_def','parser.py',643),
  ('lconst_case_list -> lconst COLON expr','lconst_case_list',3,'p_lconst_case_list','parser.py',650),
  ('lconst_case_list -> lconst COLON OTHERWISE','lconst_case_list',3,'p_lconst_case_list','parser.py',651),
  ('lconst_case_list -> lconst_case_list COMMA lconst COLON expr','lconst_case_list',5,'p_lconst_case_list','parser.py',652),
  ('lconst -> IDENT','lconst',1,'p_lconst','parser.py',660),
  ('lconst -> ENUM_VAL','lconst',1,'p_lconst','parser.py',661),
  ('param_list -> string_list','param_list',1,'p_param_list','parser.py',665),
  ('type_spec -> IDENT','type_spec',1,'p_type_spec','parser.py',669),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',670),
  ('type_spec -> REAL','type_spec',1,'p_type_spec','parser.py',671),
  ('type_spec -> BOOL','type_spec',1,'p_type_spec','parser.py',672),
  ('range_const -> bool_type','range_const',1,'p_range_const','parser.py',676),
  ('range_const -> double_type','range_const',1,'p_range_const','parser.py',677),
  ('range_const -> int_type','range_const',1,'p_range_const','parser.py',678),
  ('range_const -> IDENT','range_const',1,'p_range_const','parser.py',679),
  ('bool_type -> TRUE','bool_type',1,'p_bool_type','parser.py',683),
  ('bool_type -> FALSE','bool_type',1,'p_bool_type','parser.py',684),
  ('double_type -> DOUBLE','double_type',1,'p_double_type','parser.py',688),
  ('double_type -> MINUS DOUBLE','double_type',2,'p_double_type','parser.py',689),
  ('double_type -> POS_INF','double_type',1,'p_double_type','parser.py',690),
  ('double_type -> NEG_INF','double_type',1,'p_double_type','parser.py',691),
  ('int_type -> INTEGER','int_type',1,'p_int_type','parser.py',695),
  ('int_type -> MINUS INTEGER','int_type',2,'p_int_type','parser.py',696),
  ('pos_int_type_or_pos_inf -> INTEGER','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',700),
  ('pos_int_type_or_pos_inf -> POS_INF','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',701),
  ('instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY','instance_block',5,'p_instance_block','parser.py',705),
  ('instance_list -> instance_list domain_section','instance_list',2,'p_instance_list','parser.py',710),
  ('instance_list -> instance_list nonfluents_section','instance_list',2,'p_instance_list','parser.py',711),
  ('instance_list -> instance_list objects_section','instance_list',2,'p_instance_list','parser.py',712),
  ('instance_list -> instance_list init_state_section','instance_list',2,'p_instance_list','parser.py',713),
  ('instance_list -> instance_list max_nondef_actions_section','instance_list',2,'p_instance_list','parser.py',714),
  ('instance_list -> instance_list horizon_spec_section','instance_list',2,'p_instance_list','parser.py',715),
  ('instance_list -> instance_list discount_section','instance_list',2,'p_instance_list','parser.py',716),
  ('instance_list -> empty','instance_list',1,'p_instance_list','parser.py',717),
  ('domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI','domain_section',4,'p_domain_section','parser.py',726),
  ('nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI','nonfluents_section',4,'p_nonfluents_section','parser.py',730),
  ('objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI','objects_section',5,'p_objects_section','parser.py',735),
  ('init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI','init_state_section',5,'p_init_state_section','parser.py',740),
  ('max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','max_nondef_actions_section',4,'p_max_nondef_actions_section','parser.py',745),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','horizon_spec_section',4,'p_horizon_spec_section','parser.py',750),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN','horizon_spec_section',6,'p_horizon_spec_section','parser.py',751),
  ('discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI','discount_section',4,'p_discount_section','parser.py',759),
  ('nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY','nonfluent_block',5,'p_nonfluent_block','parser.py',764),
  ('nonfluent_list -> nonfluent_list domain_section','nonfluent_list',2,'p_nonfluent_list','parser.py',769),
  ('nonfluent_list -> nonfluent_list objects_section','nonfluent_list',2,'p_nonfluent_list','parser.py',770),
  ('nonfluent_list -> nonfluent_list init_non_fluent_section','nonfluent_list',2,'p_nonfluent_list','parser.py',771),
  ('nonfluent_list -> empty','nonfluent_list',1,'p_nonfluent_list','parser.py',772),
  ('init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI','init_non_fluent_section',5,'p_init_non_fluent_section','parser.py',781),
  ('objects_list -> objects_list objects_def','objects_list',2,'p_objects_list','parser.py',786),
  ('objects_list -> objects_def','objects_list',1,'p_objects_list','parser.py',787),
  ('objects_list -> empty','objects_list',1,'p_objects_list','parser.py',788),
  ('objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI','objects_def',6,'p_objects_def','parser.py',796),
  ('object_const_list -> object_const_list COMMA IDENT','object_const_list',3,'p_object_const_list','parser.py',800),
  ('object_const_list -> IDENT','object_const_list',1,'p_object_const_list','parser.py',801),
  ('pvar_inst_list -> pvar_inst_list pvar_inst_def','pvar_inst_list',2,'p_pvar_inst_list','parser.py',809),
  ('pvar_inst_list -> pvar_inst_def','pvar_inst_list',1,'p_pvar_inst_list','parser.py',810),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',5,'p_pvar_inst_def','parser.py',818),
  ('pvar_inst_def -> IDENT SEMI','pvar_inst_def',2,'p_pvar_inst_def','parser.py',819),
  ('pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',6,'p_pvar_inst_def','parser.py',820),
  ('pvar_inst_def -> NOT IDENT SEMI','pvar_inst_def',3,'p_pvar_inst_def','parser.py',821),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI','pvar_inst_def',7,'p_pvar_inst_def','parser.py',822),
  ('pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI','pvar_inst_def',4,'p_pvar_inst_def','parser.py',823),
  ('lconst_list -> lconst_list COMMA lconst','lconst_list',3,'p_lconst_list','parser.py',838),
  ('lconst_list -> lconst','lconst_list',1,'p_lconst_list','parser.py',839),
  ('string_list -> string_list COMMA IDENT','string_list',3,'p_string_list','parser.py',847),
  ('string_list -> IDENT','string_list',1,'p_string_list','parser.py',848),
  ('string_list -> empty','string_list',1,'p_string_list','parser.py',849),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',859),
]
