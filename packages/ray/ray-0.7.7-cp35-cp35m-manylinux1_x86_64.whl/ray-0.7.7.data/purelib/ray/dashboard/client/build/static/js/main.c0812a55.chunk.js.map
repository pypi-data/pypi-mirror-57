{"version":3,"sources":["UsageBar.tsx","Dashboard.tsx","NumberedLines.tsx","Errors.tsx","Logs.tsx","App.tsx","index.tsx"],"names":["Component","this","props","classes","text","percent","Math","max","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","min","gradient","join","className","root","style","background","React","withStyles","theme","createStyles","borderColor","palette","divider","borderStyle","borderWidth","formatByteAmount","amount","unit","pow","toFixed","formatUsage","used","total","usedFormatted","totalFormatted","formatUptime","bootTime","uptimeSecondsTotal","Date","now","uptimeSeconds","floor","uptimeMinutes","uptimeHours","uptimeDays","pad","value","toString","padStart","state","response","error","expanded","fetchNodeInfo","a","url","URL","window","location","origin","fetch","json","setState","setTimeout","toggleExpand","ip","Typography","color","result","timestamp","logCounts","errorCounts","clients","client","perWorker","workers","worker","pid","Object","keys","log_counts","entries","count","error_counts","variant","Table","TableHead","TableRow","TableCell","cell","TableBody","map","Fragment","key","hover","classNames","expandCollapseCell","onClick","expandCollapseIcon","hostname","length","boot_time","cpuUsage","UsageBar","cpu","mem","disk","secondary","Link","component","RouterLink","to","toLocaleString","index","cmdline","split","create_time","cpu_percent","memory_info","rss","align","backgroundColor","paper","padding","spacing","marginTop","textAlign","paddingRight","cursor","fontSize","verticalAlign","minWidth","lines","line","lineNumber","data-line-number","overflowX","fontFamily","width","content","whiteSpace","handleClose","history","push","match","params","searchParams","set","Dialog","fullWidth","maxWidth","onClose","open","scroll","IconButton","closeButton","title","errors","header","message","NumberedLines","trim","position","right","top","zIndex","borderBottomColor","borderBottomStyle","borderBottomWidth","lineHeight","marginBottom","paddingBottom","fade","main","borderLeftColor","borderLeftStyle","borderLeftWidth","App","CssBaseline","Dashboard","Logs","path","Errors","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0812a55.chunk.js","sourcesContent":["import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio\n];\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1\n    }\n  });\n\ninterface Props {\n  percent: number;\n  text: string;\n}\n\nclass Component extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, text } = this.props;\n\n    let { percent } = this.props;\n    percent = Math.max(percent, 0);\n    percent = Math.min(percent, 100);\n\n    const minColor = [0, 255, 0];\n    const maxColor = [255, 0, 0];\n\n    const leftColor = minColor;\n    const rightColor = blend(minColor, maxColor, percent / 100);\n    const alpha = 0.2;\n\n    const gradient = `\n      linear-gradient(\n        to right,\n        rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n        rgba(${rightColor.join(\",\")}, ${alpha}) ${percent}%,\n        transparent ${percent}%\n      )\n    `;\n\n    // Use a nested `div` here because the right border is affected by the\n    // gradient background otherwise.\n    return (\n      <div className={classes.root}>\n        <div style={{ background: gradient }}>{text}</div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import Link from \"@material-ui/core/Link\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport UsageBar from \"./UsageBar\";\n\nconst formatByteAmount = (amount: number, unit: \"mebibyte\" | \"gibibyte\") =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nconst formatUsage = (\n  used: number,\n  total: number,\n  unit: \"mebibyte\" | \"gibibyte\"\n) => {\n  const usedFormatted = formatByteAmount(used, unit);\n  const totalFormatted = formatByteAmount(total, unit);\n  const percent = (100 * used) / total;\n  return `${usedFormatted} / ${totalFormatted} (${percent.toFixed(0)}%)`;\n};\n\nconst formatUptime = (bootTime: number) => {\n  const uptimeSecondsTotal = Date.now() / 1000 - bootTime;\n  const uptimeSeconds = Math.floor(uptimeSecondsTotal) % 60;\n  const uptimeMinutes = Math.floor(uptimeSecondsTotal / 60) % 60;\n  const uptimeHours = Math.floor(uptimeSecondsTotal / 60 / 60) % 24;\n  const uptimeDays = Math.floor(uptimeSecondsTotal / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    uptimeDays ? `${uptimeDays}d` : \"\",\n    `${pad(uptimeHours)}h`,\n    `${pad(uptimeMinutes)}m`,\n    `${pad(uptimeSeconds)}s`\n  ].join(\" \");\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2)\n      }\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1)\n      }\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\"\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\"\n    },\n    cpuUsage: {\n      minWidth: 60\n    },\n    secondary: {\n      color: theme.palette.text.secondary\n    }\n  });\n\n// TODO(mitchellstern): Add JSON schema validation for the node info.\ninterface NodeInfo {\n  clients: Array<{\n    now: number;\n    hostname: string;\n    ip: string;\n    boot_time: number;\n    cpu: number;\n    cpus: [number, number];\n    mem: [number, number, number];\n    disk: {\n      [path: string]: {\n        total: number;\n        free: number;\n        used: number;\n        percent: number;\n      };\n    };\n    load_avg: [[number, number, number], [number, number, number]];\n    net: [number, number];\n    workers: Array<{\n      pid: number;\n      create_time: number;\n      name: string;\n      cmdline: string[];\n      cpu_percent: number;\n      cpu_times: {\n        system: number;\n        children_system: number;\n        user: number;\n        children_user: number;\n      };\n      memory_info: {\n        pageins: number;\n        pfaults: number;\n        vms: number;\n        rss: number;\n      };\n      memory_full_info: null;\n    }>;\n  }>;\n  log_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n  error_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n}\n\ninterface State {\n  response: {\n    result: NodeInfo;\n    timestamp: number;\n  } | null;\n  error: string | null;\n  expanded: {\n    [ip: string]: boolean;\n  };\n}\n\nclass Component extends React.Component<WithStyles<typeof styles>, State> {\n  state: State = {\n    response: null,\n    error: null,\n    expanded: {}\n  };\n\n  fetchNodeInfo = async () => {\n    try {\n      const url = new URL(\n        \"/api/node_info\",\n        process.env.NODE_ENV === \"development\"\n          ? \"http://localhost:8080\"\n          : window.location.origin\n      );\n      const response = await fetch(url.toString());\n      const json = await response.json();\n      this.setState({ response: json, error: null });\n    } catch (error) {\n      this.setState({ response: null, error: error.toString() });\n    } finally {\n      setTimeout(this.fetchNodeInfo, 1000);\n    }\n  };\n\n  toggleExpand = (ip: string) => () => {\n    this.setState(state => ({\n      expanded: {\n        ...state.expanded,\n        [ip]: !state.expanded[ip]\n      }\n    }));\n  };\n\n  async componentDidMount() {\n    await this.fetchNodeInfo();\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { response, error, expanded } = this.state;\n\n    if (error !== null) {\n      return (\n        <Typography className={classes.root} color=\"error\">\n          {error}\n        </Typography>\n      );\n    }\n\n    if (response === null) {\n      return (\n        <Typography className={classes.root} color=\"textSecondary\">\n          Loading...\n        </Typography>\n      );\n    }\n\n    const { result, timestamp } = response;\n\n    const logCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    const errorCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    for (const client of result.clients) {\n      logCounts[client.ip] = { perWorker: {}, total: 0 };\n      errorCounts[client.ip] = { perWorker: {}, total: 0 };\n      for (const worker of client.workers) {\n        logCounts[client.ip].perWorker[worker.pid] = 0;\n        errorCounts[client.ip].perWorker[worker.pid] = 0;\n      }\n    }\n\n    for (const ip of Object.keys(result.log_counts)) {\n      if (ip in logCounts) {\n        for (const [pid, count] of Object.entries(result.log_counts[ip])) {\n          logCounts[ip].perWorker[pid] = count;\n          logCounts[ip].total += count;\n        }\n      }\n    }\n\n    for (const ip of Object.keys(result.error_counts)) {\n      if (ip in errorCounts) {\n        for (const [pid, count] of Object.entries(result.error_counts[ip])) {\n          errorCounts[ip].perWorker[pid] = count;\n          errorCounts[ip].total += count;\n        }\n      }\n    }\n\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\">Ray Dashboard</Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} />\n              <TableCell className={classes.cell}>Host</TableCell>\n              <TableCell className={classes.cell}>Workers</TableCell>\n              <TableCell className={classes.cell}>Uptime</TableCell>\n              <TableCell className={classes.cell}>CPU</TableCell>\n              <TableCell className={classes.cell}>RAM</TableCell>\n              <TableCell className={classes.cell}>Disk</TableCell>\n              {/*<TableCell className={classes.cell}>Sent</TableCell>*/}\n              {/*<TableCell className={classes.cell}>Received</TableCell>*/}\n              <TableCell className={classes.cell}>Logs</TableCell>\n              <TableCell className={classes.cell}>Errors</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {result.clients.map(client => {\n              return (\n                <React.Fragment key={client.ip}>\n                  <TableRow hover>\n                    <TableCell\n                      className={classNames(\n                        classes.cell,\n                        classes.expandCollapseCell\n                      )}\n                      onClick={this.toggleExpand(client.ip)}\n                    >\n                      {!expanded[client.ip] ? (\n                        <AddIcon className={classes.expandCollapseIcon} />\n                      ) : (\n                        <RemoveIcon className={classes.expandCollapseIcon} />\n                      )}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {client.hostname} ({client.ip})\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {client.workers.length}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {formatUptime(client.boot_time)}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      <div className={classes.cpuUsage}>\n                        <UsageBar\n                          percent={client.cpu}\n                          text={`${client.cpu.toFixed(1)}%`}\n                        />\n                      </div>\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      <UsageBar\n                        percent={\n                          (100 * (client.mem[0] - client.mem[1])) /\n                          client.mem[0]\n                        }\n                        text={formatUsage(\n                          client.mem[0] - client.mem[1],\n                          client.mem[0],\n                          \"gibibyte\"\n                        )}\n                      />\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      <UsageBar\n                        percent={\n                          (100 * client.disk[\"/\"].used) / client.disk[\"/\"].total\n                        }\n                        text={formatUsage(\n                          client.disk[\"/\"].used,\n                          client.disk[\"/\"].total,\n                          \"gibibyte\"\n                        )}\n                      />\n                    </TableCell>\n                    {/*<TableCell className={classes.cell}>{(client.net[0] / Math.pow(1024, 2)).toFixed(3)} MiB/s</TableCell>*/}\n                    {/*<TableCell className={classes.cell}>{(client.net[1] / Math.pow(1024, 2)).toFixed(3)} MiB/s</TableCell>*/}\n                    <TableCell className={classes.cell}>\n                      {logCounts[client.ip].total === 0 ? (\n                        <span className={classes.secondary}>No logs</span>\n                      ) : (\n                        <Link\n                          component={RouterLink}\n                          to={`/logs/${client.hostname}`}\n                        >\n                          View all logs (\n                          {logCounts[client.ip].total.toLocaleString()}{\" \"}\n                          {logCounts[client.ip].total === 1 ? \"line\" : \"lines\"})\n                        </Link>\n                      )}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {errorCounts[client.ip].total === 0 ? (\n                        <span className={classes.secondary}>No errors</span>\n                      ) : (\n                        <Link\n                          component={RouterLink}\n                          to={`/errors/${client.hostname}`}\n                        >\n                          View all errors (\n                          {errorCounts[client.ip].total.toLocaleString()})\n                        </Link>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                  {expanded[client.ip] &&\n                    client.workers.map((worker, index: number) => (\n                      <TableRow hover key={index}>\n                        <TableCell className={classes.cell} />\n                        <TableCell className={classes.cell}>\n                          {worker.cmdline[0].split(\":\", 2)[0]} (PID:{\" \"}\n                          {worker.pid})\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {worker.cmdline[0].split(\":\", 2)[1] || (\n                            <span className={classes.secondary}>Idle</span>\n                          )}\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {formatUptime(worker.create_time)}\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          <UsageBar\n                            percent={worker.cpu_percent}\n                            text={`${worker.cpu_percent.toFixed(1)}%`}\n                          />\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          <UsageBar\n                            percent={\n                              (100 * worker.memory_info.rss) / client.mem[0]\n                            }\n                            text={formatByteAmount(\n                              worker.memory_info.rss,\n                              \"mebibyte\"\n                            )}\n                          />\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          <span className={classes.secondary}>\n                            Not available\n                          </span>\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {logCounts[client.ip].perWorker[worker.pid] === 0 ? (\n                            <span className={classes.secondary}>No logs</span>\n                          ) : (\n                            <Link\n                              component={RouterLink}\n                              to={`/logs/${client.hostname}/${worker.pid}`}\n                            >\n                              View log (\n                              {logCounts[client.ip].perWorker[\n                                worker.pid\n                              ].toLocaleString()}{\" \"}\n                              {logCounts[client.ip].perWorker[worker.pid] === 1\n                                ? \"line\"\n                                : \"lines\"}\n                              )\n                            </Link>\n                          )}\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {errorCounts[client.ip].perWorker[worker.pid] ===\n                          0 ? (\n                            <span className={classes.secondary}>No errors</span>\n                          ) : (\n                            <Link\n                              component={RouterLink}\n                              to={`/errors/${client.hostname}/${worker.pid}`}\n                            >\n                              View errors (\n                              {errorCounts[client.ip].perWorker[\n                                worker.pid\n                              ].toLocaleString()}\n                              )\n                            </Link>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                </React.Fragment>\n              );\n            })}\n          </TableBody>\n        </Table>\n        <Typography align=\"center\">\n          Last updated: {new Date(timestamp * 1000).toLocaleString()}\n        </Typography>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\"\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0\n      }\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\"\n      }\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\"\n    }\n  });\n\ninterface Props {\n  lines: string[];\n}\n\nclass Component extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import Dialog from \"@material-ui/core/Dialog\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport NumberedLines from \"./NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3)\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3)\n    },\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3)\n    },\n    error: {\n      backgroundColor: fade(theme.palette.error.main, 0.06),\n      borderLeftColor: theme.palette.error.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 3,\n      marginTop: theme.spacing(3),\n      padding: theme.spacing(2)\n    },\n    timestamp: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1)\n    }\n  });\n\ninterface State {\n  result: {\n    [pid: string]: Array<{\n      message: string;\n      timestamp: number;\n      type: string;\n    }>;\n  } | null;\n  error: string | null;\n}\n\nclass Component extends React.Component<\n  WithStyles<typeof styles> &\n    RouteComponentProps<{ hostname: string; pid: string | undefined }>,\n  State\n> {\n  state: State = {\n    result: null,\n    error: null\n  };\n\n  handleClose = () => {\n    this.props.history.push(\"/\");\n  };\n\n  async componentDidMount() {\n    try {\n      const { match } = this.props;\n      const { hostname, pid } = match.params;\n      const url = new URL(\n        \"/api/errors\",\n        process.env.NODE_ENV === \"development\"\n          ? \"http://localhost:8080\"\n          : window.location.origin\n      );\n      url.searchParams.set(\"hostname\", hostname);\n      url.searchParams.set(\"pid\", pid || \"\");\n      const response = await fetch(url.toString());\n      const json = await response.json();\n      this.setState({ result: json.result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, match } = this.props;\n    const { result, error } = this.state;\n\n    const { hostname } = match.params;\n\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={this.handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>Errors</Typography>\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, errors]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {errors.length > 0 ? (\n                errors.map(({ message, timestamp }, index) => (\n                  <div className={classes.error} key={index}>\n                    <Typography className={classes.timestamp}>\n                      Error at {new Date(timestamp * 1000).toLocaleString()}\n                    </Typography>\n                    <NumberedLines lines={message.trim().split(\"\\n\")} />\n                  </div>\n                ))\n              ) : (\n                <Typography color=\"textSecondary\">No errors found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import Dialog from \"@material-ui/core/Dialog\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport NumberedLines from \"./NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3)\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3)\n    },\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3)\n    }\n  });\n\ninterface State {\n  result: { [pid: string]: string[] } | null;\n  error: string | null;\n}\n\nclass Component extends React.Component<\n  WithStyles<typeof styles> &\n    RouteComponentProps<{ hostname: string; pid: string | undefined }>,\n  State\n> {\n  state: State = {\n    result: null,\n    error: null\n  };\n\n  handleClose = () => {\n    this.props.history.push(\"/\");\n  };\n\n  async componentDidMount() {\n    try {\n      const { match } = this.props;\n      const { hostname, pid } = match.params;\n      const url = new URL(\n        \"/api/logs\",\n        process.env.NODE_ENV === \"development\"\n          ? \"http://localhost:8080\"\n          : window.location.origin\n      );\n      url.searchParams.set(\"hostname\", hostname);\n      url.searchParams.set(\"pid\", pid || \"\");\n      const response = await fetch(url.toString());\n      const json = await response.json();\n      this.setState({ result: json.result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, match } = this.props;\n    const { result, error } = this.state;\n\n    const { hostname } = match.params;\n\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={this.handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>Logs</Typography>\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, lines]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {lines.length > 0 ? (\n                <NumberedLines lines={lines} />\n              ) : (\n                <Typography color=\"textSecondary\">No logs found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport Errors from \"./Errors\";\nimport Logs from \"./Logs\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <CssBaseline />\n        <Dashboard />\n        <Route component={Logs} path=\"/logs/:hostname/:pid?\" />\n        <Route component={Errors} path=\"/errors/:hostname/:pid?\" />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}