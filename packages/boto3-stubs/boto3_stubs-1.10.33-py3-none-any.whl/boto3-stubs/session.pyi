# pylint: disable=unused-argument,multiple-statements,unused-import
import sys
from typing import Any, List, Union, overload

import boto3
import boto3.utils
from boto3.exceptions import ResourceNotExistsError, UnknownAPIVersionError
from boto3.resources.factory import ResourceFactory
from botocore.client import BaseClient
from botocore.service_resource import ServiceResource
from botocore.config import Config
from botocore.credentials import Credentials
from botocore.loaders import Loader
from botocore.model import ServiceModel
from botocore.waiter import Waiter

if sys.version_info >= (3, 8):
    from typing import Literal
else:
    from typing_extensions import Literal

class Session:
    def __init__(
        self,
        aws_access_key_id: str = None,
        aws_secret_access_key: str = None,
        aws_session_token: str = None,
        region_name: str = None,
        botocore_session: Session = None,
        profile_name: str = None,
    ):
        self._session: ServiceModel
        self.resource_factory: ResourceFactory
        self._loader: Loader
    def __repr__(self) -> str: ...
    @property
    def profile_name(self) -> str: ...
    @property
    def region_name(self) -> str: ...
    @property
    def events(self) -> List[Any]: ...
    @property
    def available_profiles(self) -> List[Any]: ...
    def _setup_loader(self) -> None: ...
    def get_available_services(self) -> List[str]: ...
    def get_available_resources(self) -> List[str]: ...
    def get_available_partitions(self) -> List[str]: ...
    def get_available_regions(
        self, service_name: str, partition_name: str = "aws", allow_non_regional: bool = False,
    ) -> List[str]: ...
    def get_credentials(self) -> Credentials: ...
    def _register_default_handlers(self) -> None: ...
    def client(
        self,
        service_name: Literal[
            "accessanalyzer",
            "acm",
            "acm-pca",
            "alexaforbusiness",
            "amplify",
            "apigateway",
            "apigatewaymanagementapi",
            "apigatewayv2",
            "appconfig",
            "application-autoscaling",
            "application-insights",
            "appmesh",
            "appstream",
            "appsync",
            "athena",
            "autoscaling",
            "autoscaling-plans",
            "backup",
            "batch",
            "budgets",
            "ce",
            "chime",
            "cloud9",
            "clouddirectory",
            "cloudformation",
            "cloudfront",
            "cloudhsm",
            "cloudhsmv2",
            "cloudsearch",
            "cloudsearchdomain",
            "cloudtrail",
            "cloudwatch",
            "codebuild",
            "codecommit",
            "codedeploy",
            "codeguru-reviewer",
            "codeguruprofiler",
            "codepipeline",
            "codestar",
            "codestar-notifications",
            "cognito-identity",
            "cognito-idp",
            "cognito-sync",
            "comprehend",
            "comprehendmedical",
            "compute-optimizer",
            "config",
            "connect",
            "connectparticipant",
            "cur",
            "dataexchange",
            "datapipeline",
            "datasync",
            "dax",
            "devicefarm",
            "directconnect",
            "discovery",
            "dlm",
            "dms",
            "docdb",
            "ds",
            "dynamodb",
            "dynamodbstreams",
            "ebs",
            "ec2",
            "ec2-instance-connect",
            "ecr",
            "ecs",
            "efs",
            "eks",
            "elastic-inference",
            "elasticache",
            "elasticbeanstalk",
            "elastictranscoder",
            "elb",
            "elbv2",
            "emr",
            "es",
            "events",
            "firehose",
            "fms",
            "forecast",
            "forecastquery",
            "frauddetector",
            "fsx",
            "gamelift",
            "glacier",
            "globalaccelerator",
            "glue",
            "greengrass",
            "groundstation",
            "guardduty",
            "health",
            "iam",
            "imagebuilder",
            "importexport",
            "inspector",
            "iot",
            "iot-data",
            "iot-jobs-data",
            "iot1click-devices",
            "iot1click-projects",
            "iotanalytics",
            "iotevents",
            "iotevents-data",
            "iotsecuretunneling",
            "iotthingsgraph",
            "kafka",
            "kendra",
            "kinesis",
            "kinesis-video-archived-media",
            "kinesis-video-media",
            "kinesis-video-signaling",
            "kinesisanalytics",
            "kinesisanalyticsv2",
            "kinesisvideo",
            "kms",
            "lakeformation",
            "lambda",
            "lex-models",
            "lex-runtime",
            "license-manager",
            "lightsail",
            "logs",
            "machinelearning",
            "macie",
            "managedblockchain",
            "marketplace-catalog",
            "marketplace-entitlement",
            "marketplacecommerceanalytics",
            "mediaconnect",
            "mediaconvert",
            "medialive",
            "mediapackage",
            "mediapackage-vod",
            "mediastore",
            "mediastore-data",
            "mediatailor",
            "meteringmarketplace",
            "mgh",
            "migrationhub-config",
            "mobile",
            "mq",
            "mturk",
            "neptune",
            "networkmanager",
            "opsworks",
            "opsworkscm",
            "organizations",
            "outposts",
            "personalize",
            "personalize-events",
            "personalize-runtime",
            "pi",
            "pinpoint",
            "pinpoint-email",
            "pinpoint-sms-voice",
            "polly",
            "pricing",
            "qldb",
            "qldb-session",
            "quicksight",
            "ram",
            "rds",
            "rds-data",
            "redshift",
            "rekognition",
            "resource-groups",
            "resourcegroupstaggingapi",
            "robomaker",
            "route53",
            "route53domains",
            "route53resolver",
            "s3",
            "s3control",
            "sagemaker",
            "sagemaker-a2i-runtime",
            "sagemaker-runtime",
            "savingsplans",
            "schemas",
            "sdb",
            "secretsmanager",
            "securityhub",
            "serverlessrepo",
            "service-quotas",
            "servicecatalog",
            "servicediscovery",
            "ses",
            "sesv2",
            "shield",
            "signer",
            "sms",
            "sms-voice",
            "snowball",
            "sns",
            "sqs",
            "ssm",
            "sso",
            "sso-oidc",
            "stepfunctions",
            "storagegateway",
            "sts",
            "support",
            "swf",
            "textract",
            "transcribe",
            "transfer",
            "translate",
            "waf",
            "waf-regional",
            "wafv2",
            "workdocs",
            "worklink",
            "workmail",
            "workmailmessageflow",
            "workspaces",
            "xray",
        ],
        region_name: str = None,
        api_version: str = None,
        use_ssl: bool = None,
        verify: Union[str, bool] = None,
        endpoint_url: str = None,
        aws_access_key_id: str = None,
        aws_secret_access_key: str = None,
        aws_session_token: str = None,
        config: Config = None,
    ) -> BaseClient: ...
    def resource(
        self,
        service_name: Literal[
            "cloudformation",
            "cloudwatch",
            "dynamodb",
            "ec2",
            "glacier",
            "iam",
            "opsworks",
            "s3",
            "sns",
            "sqs",
        ],
        region_name: str = None,
        api_version: str = None,
        use_ssl: bool = None,
        verify: Union[str, bool] = None,
        endpoint_url: str = None,
        aws_access_key_id: str = None,
        aws_secret_access_key: str = None,
        aws_session_token: str = None,
        config: Config = None,
    ) -> ServiceResource: ...
