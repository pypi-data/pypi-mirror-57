# Minimum CMake required
cmake_minimum_required(VERSION 3.1.3)

if({{ name }}_VERBOSE)
  message(STATUS "{{ name }} Configuring...")
endif()

# CMake policies
cmake_policy(SET CMP0022 NEW)
# On MacOS use @rpath/ for target's install name prefix path
if (POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif ()
# Clear VERSION variables when no VERSION is given to project()
if(POLICY CMP0048)
  cmake_policy(SET CMP0048 NEW)
endif()

# Project
project({{ name }})


# Options

option({{ name }}_CXX11_ENABLE "enable C++ 11 compile feature." {{ "ON" if cxx11 else "OFF" }})
if({{ name }}_CXX11_ENABLE)

    if (CYGWIN)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
    else()
      set(CMAKE_CXX_STANDARD 11)
      set(CMAKE_CXX_STANDARD_REQUIRED ON)
      set(CMAKE_CXX_EXTENSIONS OFF)
    endif()
endif({{ name }}_CXX11_ENABLE)

if (BUILD_SHARED_LIBS)
  set({{ name }}_BUILD_SHARED_LIBS_DEFAULT ON)
else (BUILD_SHARED_LIBS)
  set({{ name }}_BUILD_SHARED_LIBS_DEFAULT OFF)
endif (BUILD_SHARED_LIBS)

option({{ name }}_BUILD_SHARED_LIBS "Build Shared Libraries" {{ '${%s_BUILD_SHARED_LIBS_DEFAULT}' % name }})
option({{ name }}_MSVC_STATIC_RUNTIME "MSVC Link static runtime libraries." OFF)
  
set({{ name }}_DEBUG_POSTFIX "d" CACHE STRING "Default debug postfix")
mark_as_advanced({{ name }}_DEBUG_POSTFIX)

if ({{ name }}_BUILD_SHARED_LIBS)
  set({{ name }}_SHARED_OR_STATIC "SHARED")
else ({{ name }}_BUILD_SHARED_LIBS)
  set({{ name }}_SHARED_OR_STATIC "STATIC")
  # In case we are building static libraries, link also the runtime library statically
  # so that MSVCR*.DLL is not required at runtime.
  # https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx
  # This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd
  # http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F
  if (MSVC AND {{ name }}_MSVC_STATIC_RUNTIME)
    foreach(flag_var
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      if(${flag_var} MATCHES "/MD")
        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
      endif(${flag_var} MATCHES "/MD")
    endforeach(flag_var)
  endif (MSVC AND {{ name }}_MSVC_STATIC_RUNTIME)
endif ({{ name }}_BUILD_SHARED_LIBS)

if (MSVC)
  # Build with multiple processes
  add_definitions(/MP)
  # MSVC warning suppressions
  add_definitions(
#    /wd4018 # 'expression' : signed/unsigned mismatch
#    /wd4065 # switch statement contains 'default' but no 'case' labels
#    /wd4146 # unary minus operator applied to unsigned type, result still unsigned
#    /wd4244 # 'conversion' conversion from 'type1' to 'type2', possible loss of data
#    /wd4251 # 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
#    /wd4267 # 'var' : conversion from 'size_t' to 'type', possible loss of data
#    /wd4305 # 'identifier' : truncation from 'type1' to 'type2'
#    /wd4307 # 'operator' : integral constant overflow
#    /wd4309 # 'conversion' : truncation of constant value
#    /wd4334 # 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
#    /wd4355 # 'this' : used in base member initializer list
#    /wd4506 # no definition for inline function 'function'
#    /wd4800 # 'type' : forcing value to bool 'true' or 'false' (performance warning)
#    /wd4996 # The compiler encountered a deprecated declaration.
  )

  # Suppress linker warnings about files with no symbols defined.
#  set(CMAKE_STATIC_LINKER_FLAGS /ignore:4221)

endif (MSVC)

get_filename_component(lib_source_dir {{ '${%s_SOURCE_DIR} ' % name }} PATH)
include_directories(
  ${lib_source_dir}/include
  ${lib_source_dir}/source)

if (MSVC)
  # Add the "lib" prefix for generated .lib outputs.
  set(LIB_PREFIX lib)
else (MSVC)
  # When building with "make", "lib" prefix will be added automatically by
  # the build tool.
  set(LIB_PREFIX)
endif (MSVC)

##############################################################
#
# {{ name }} library
#
##############################################################
set(_all_SRCs)

# protobuf-nano lib part if you need
if(PROTOBUF_NANO_LIBRARY)
set(_pb_nano_srcs)
set(_pb_imports)
file(GLOB_RECURSE _protos  ${CMAKE_CURRENT_SOURCE_DIR}/include/*.proto)
foreach( i name-of-import-protobuf-modules )
  string(TOUPPER i name)
  list(APPEND _pb_imports CONAN_${name}_ROOT/include)
endforeach()

protoc_nano(PROTOS ${_protos}
            APPEND_PATH
            ENGINE nano
            NAMESPACE_PREFIX nano
            OUT_VAR _pb_nano_SRCs
            BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include
            PROTOC_OUT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include

            if(_pb_imports)
            IMPORT_DIRS ${_pb_imports}
            endif()
            )
  list(APPEND _all_SRCs ${_pb_nano_SRCs})
endif()

set(_SRC_PATTERN ${lib_source_dir}/source/*.c
    ${lib_source_dir}/source/*.h ${lib_source_dir}/source/*.hpp
    ${lib_source_dir}/source/*.cpp ${lib_source_dir}/source/*.cc)


set(_HDR_PATTERN ${lib_source_dir}/include/*.h ${lib_source_dir}/include/*.hpp)

file(GLOB_RECURSE _lib_HDRs  ${_HDR_PATTERN})
file(GLOB_RECURSE _lib_SRCs  ${_SRC_PATTERN})
list(APPEND _all_SRCs ${_lib_SRCs})

add_library({{ name }}  ${_all_SRCs})

if(BUILD_SHARED_LIBS)
  if(MSVC)
    target_compile_definitions({{ name }}
		PUBLIC  {{ name | upper }}_USE_DLLS
		PRIVATE {{ name | upper }}_EXPORTS)

  endif()

target_link_libraries({{ name }} ${CONAN_LIBS} )
endif()
source_group(TREE ${lib_source_dir} FILES ${_all_SRCs} ${_lib_HDRs})


# Install configuration
set(_cmakedir_desc "Directory relative to CMAKE_INSTALL to install the cmake configuration files")
if(NOT MSVC)
  set(CMAKE_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/{{name}}" CACHE STRING "${_cmakedir_desc}")
else()
  set(CMAKE_INSTALL_CMAKEDIR "cmake" CACHE STRING "${_cmakedir_desc}")
endif()
mark_as_advanced(CMAKE_INSTALL_CMAKEDIR)

# Install configuration
set(_cmakedir_desc "Directory relative to CMAKE_INSTALL to install the cmake configuration files")
configure_file({{ name }}-config.cmake.in
               ${CMAKE_INSTALL_CMAKEDIR}/{{ name }}-config.cmake @ONLY)


export(TARGETS {{ name }}
  NAMESPACE {{ name }}::
  FILE ${CMAKE_INSTALL_CMAKEDIR}/{{ name }}-targets.cmake )

install(EXPORT {{ name }}-targets
  DESTINATION "${CMAKE_INSTALL_CMAKEDIR}"
  NAMESPACE {{ name }}::
  COMPONENT {{ name }}-export)

install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_CMAKEDIR}/
  DESTINATION "${CMAKE_INSTALL_CMAKEDIR}"
  COMPONENT {{ name }}-export
  PATTERN {{ name }}-targets.cmake EXCLUDE )

install(DIRECTORY ${lib_source_dir}/include/
        DESTINATION  include)

install(TARGETS {{ name }} EXPORT {{ name }}-targets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT {{ name }}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT {{ name }}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT {{ name }})



if({{ name }}_VERBOSE)
    message(STATUS "{{ name }} Configuring done")
endif()
