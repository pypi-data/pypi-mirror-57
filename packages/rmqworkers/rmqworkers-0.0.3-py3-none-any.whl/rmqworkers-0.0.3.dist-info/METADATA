Metadata-Version: 2.1
Name: rmqworkers
Version: 0.0.3
Summary: Rabbit MQ wrapper implement with amqpstorm and with threading or multiprocessing
Home-page: https://github.com/popescu-catalin-ionut/rmqworkers
Author: Popescu Catalin-Ionut
Author-email: popescu.catalin.ionut@gmail.com
License: Apache License 2.0
Keywords: rabbitmq,amqpstorm,amqp
Platform: any
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 5 - Production/Stable
Classifier: Topic :: System :: Networking
Classifier: Natural Language :: English
Requires-Python: >=3.6
Description-Content-Type: text/markdown


rmcworkers -- Manage dynamic workers rabbitmq for Python applications
=====

![status](https://img.shields.io/badge/rmqworkers-stable-success)



Project rmcworkers offer high availability through simple, yet powerful library:
    This library doesn't work as a standalone.

This project require a rabbitmq server.

Please note that for development I've used a container:

How to run
-----


docker run -d --hostname my-rabbit --name rabbitmq-server -p 15672:15672 -p 5672:5672 rabbitmq:3-management

Default has credentials:
    user:  quest
    passw: quest

cd rmqworkers/examples

source venv/bin/activate or venv/Scripts/activate.sh

pip install -r requirements.txt

python example_1queue_in_and_1queue_out.py  

Expected output
--
Default will use thread.

publish in queue in { "job_info": "11111"}

Verify if in queue out is {'job_info': '11111!!!!!!!', 'add_something': 'something'}

