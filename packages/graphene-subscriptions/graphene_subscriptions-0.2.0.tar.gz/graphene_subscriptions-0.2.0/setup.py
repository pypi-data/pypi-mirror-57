# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['graphene_subscriptions']

package_data = \
{'': ['*']}

install_requires = \
['channels>=2.3,<3.0', 'django>=1.11', 'graphene-django>=2.7,<3.0']

setup_kwargs = {
    'name': 'graphene-subscriptions',
    'version': '0.2.0',
    'description': 'A plug-and-play GraphQL subscription implementation for Graphene + Django built using Django Channels.',
    'long_description': '# Graphene Subscriptions\n\n<p>\n    <a href="" alt="License">\n        <img src="https://img.shields.io/github/license/jaydenwindle/graphene-subscriptions" /></a>\n    <a href="https://github.com/jaydenwindle/graphene-subscriptions/pulse" alt="Activity">\n        <img src="https://img.shields.io/github/commit-activity/m/jaydenwindle/graphene-subscriptions" /></a>\n    <a href="https://github.com/jaydenwindle/graphene-subscriptions/actions?query=workflow%3A%22Test+Package%22">\n        <img src="https://github.com/jaydenwindle/graphene-subscriptions/workflows/Tests/badge.svg" alt="build status"></a>\n    <a href="https://twitter.com/intent/follow?screen_name=jayden_windle">\n        <img src="https://img.shields.io/twitter/follow/jayden_windle?style=social&logo=twitter"\n            alt="follow on Twitter"></a>\n</p>\n\nA plug-and-play GraphQL subscription implementation for Graphene + Django built using Django Channels. Provides support for model creation, mutation and deletion subscriptions out of the box.\n\n\n## Installation\n\n1. Install `graphene-subscriptions`\n    ```bash\n    $ pip install graphene-subscriptions\n    ```\n\n2. Add `graphene_subscriptions` to `INSTALLED_APPS`:\n\n    ```python\n    # your_project/settings.py\n    INSTALLED_APPS = [\n        ...\n        \'graphene_subscriptions\'\n    ]\n    ```\n\n3. Add Django Channels to your project (see: [Django Channels installation docs](https://channels.readthedocs.io/en/latest/installation.html))\n\n4. Add `GraphqlSubscriptionConsumer` to your `routing.py` file.\n\n    ```python\n    # your_project/routing.py\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from django.urls import path \n\n    from graphene_subscriptions.consumers import GraphqlSubscriptionConsumer\n\n    application = ProtocolTypeRouter({\n        "websocket": URLRouter([\n            path(\'graphql/\', GraphqlSubscriptionConsumer)\n        ]),\n    })\n    ```\n\n5. Connect signals for any models you want to create subscriptions for\n\n    ```python\n    # your_app/signals.py\n    from django.db.models.signals import post_save, post_delete\n    from graphene_subscriptions.signals import post_save_subscription, post_delete_subscription\n\n    from your_app.models import YourModel\n\n    post_save.connect(post_save_subscription, sender=YourModel, dispatch_uid="your_model_post_save")\n    post_delete.connect(post_delete_subscription, sender=YourModel, dispatch_uid="your_model_post_delete")\n\n    # your_app/apps.py\n    from django.apps import AppConfig\n\n    class YourAppConfig(AppConfig):\n        name = \'your_app\'\n\n        def ready(self):\n            import your_app.signals\n    ```\n\n6. Define your subscriptions and connect them to your project schema\n\n    ```python\n    #your_project/schema.py\n    import graphene\n\n    from your_app.graphql.subscriptions import YourSubscription\n\n\n    class Query(graphene.ObjectType):\n        base = graphene.String()\n\n\n    class Mutation(graphene.ObjectType):\n        pass\n\n\n    class Subscription(YourSubscription):\n        pass\n\n\n    schema = graphene.Schema(\n        query=Query,\n        mutation=Mutation,\n        subscription=Subscription\n    )\n    ```\n\n\n## Defining Subscriptions\n\nSubscriptions in Graphene are defined as normal `ObjectType`\'s. Each subscription field resolver must return an observable which emits values matching the field\'s type.\n\nA simple hello world subscription (which returns the value `"hello world!"` every 3 seconds) could be defined as follows:\n\n```python\nimport graphene\nfrom rx import Observable\n\nclass Subscription(graphene.ObjectType):\n    hello = graphene.String()\n\n    def resolve_hello(root, info):\n        return Observable.interval(3000) \\\n                         .map(lambda: "hello world!")\n```\n\n## Receiving Model Events\n\nEach subscription that you define will receive a an `Observable` of `SubscriptionEvent`\'s as the `root` parameter, which will emit a new `SubscriptionEvent` each time one of the connected signals are fired.\n\nA `SubscriptionEvent` has two attributes: the `operation` that triggered the event, usually `CREATED`, `UPDATED` or `DELETED`) and the `instance` that triggered the signal.\n\nSince `root` is an `Observable`, you can apply any `rxpy` operations before returning it.\n\n### Model Created Subscriptions\n\nFor example, let\'s create a subscription called `yourModelCreated` that will be fired whenever an instance of `YourModel` is created. Since `root` receives a new event *every time a connected signal is fired*, we\'ll need to filter for only the events we want. In this case, we want all events where `operation` is `created` and the event `instance` is an instance of our model.\n\n```python\nimport graphene\nfrom graphene_django.types import DjangoObjectType\nfrom graphene_subscriptions.events import CREATED\n\nfrom your_app.models import YourModel\n\n\nclass YourModelType(DjangoObjectType)\n    class Meta:\n        model = YourModel\n\n\nclass Subscription(graphene.ObjectType):\n    your_model_created = graphene.Field(YourModelType)\n\n    def resolve_your_model_created(root, info):\n        return root.filter(\n            lambda event:\n                event.operation == CREATED and\n                isinstance(event.instance, YourModel)\n        ).map(lambda event: event.instance)\n```\n\n### Model Updated Subscriptions\n\nYou can also filter events based on a subscription\'s arguments. For example, here\'s a subscription that fires whenever a model is updated:\n\n```python\nimport graphene\nfrom graphene_django.types import DjangoObjectType\nfrom graphene_subscriptions.events import UPDATED \n\nfrom your_app.models import YourModel\n\n\nclass YourModelType(DjangoObjectType)\n    class Meta:\n        model = YourModel\n\n\nclass Subscription(graphene.ObjectType):\n    your_model_updated = graphene.Field(YourModelType, id=graphene.ID())\n\n    def resolve_your_model_updated(root, info, id):\n        return root.filter(\n            lambda event:\n                event.operation == UPDATED and\n                isinstance(event.instance, YourModel) and\n                event.instance.pk == int(id)\n        ).map(lambda event: event.instance)\n```\n\n### Model Updated Subscriptions\n\nDefining a subscription that is fired whenever a given model instance is deleted can be accomplished like so\n\n```python\nimport graphene\nfrom graphene_django.types import DjangoObjectType\nfrom graphene_subscriptions.events import DELETED \n\nfrom your_app.models import YourModel\n\n\nclass YourModelType(DjangoObjectType)\n    class Meta:\n        model = YourModel\n\n\nclass Subscription(graphene.ObjectType):\n    your_model_deleted = graphene.Field(YourModelType, id=graphene.ID())\n\n    def resolve_your_model_deleted(root, info, id):\n        return root.filter(\n            lambda event:\n                event.operation == DELETED and\n                isinstance(event.instance, YourModel) and\n                event.instance.pk == int(id)\n        ).map(lambda event: event.instance)\n```\n\n\n## Production Readiness\n\nThis implementation was spun out of an internal implementation I developed which we\'ve been using in production for the past 6 months at [Jetpack](https://www.tryjetpack.com/). We\'ve had relatively few issues with it, and I am confident that it can be reliably used in production environments.\n\nHowever, being a startup, our definition of production-readiness may be slightly different from your own. Also keep in mind that the scale at which we operate hasn\'t been taxing enough to illuminate where the scaling bottlenecks in this implementation may hide.\n\nIf you end up running this in production, please [reach out](https://twitter.com/jayden_windle) and let me know!\n\n\n## Contributing\n\nPRs and other contributions are very welcome! To set up `graphene_subscriptions` in a development envrionment, do the following:\n\n1. Clone the repo\n    ```bash\n    $ git clone git@github.com:jaydenwindle/graphene-subscriptions.git\n    ```\n\n2. Install [poetry](https://poetry.eustace.io/)\n    ```bash\n    $ curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n    ```\n3. Install dependencies\n    ```bash\n    $ poetry install\n    ```\n\n4. Run the test suite\n    ```bash\n    $ poetry run pytest\n    ```',
    'author': 'Jayden Windle',
    'author_email': 'jaydenwindle@gmail.com',
    'url': 'https://github.com/jaydenwindle/graphene-subscriptions',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
