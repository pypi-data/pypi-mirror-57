# coding: utf-8

"""
    Bleumi Pay API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CheckoutToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'transfer_address': 'str',
        'name': 'str',
        'symbol': 'str',
        'decimals': 'int'
    }

    attribute_map = {
        'chain': 'chain',
        'transfer_address': 'transferAddress',
        'name': 'name',
        'symbol': 'symbol',
        'decimals': 'decimals'
    }

    def __init__(self, chain=None, transfer_address=None, name=None, symbol=None, decimals=None):  # noqa: E501
        """CheckoutToken - a model defined in Swagger"""  # noqa: E501
        self._chain = None
        self._transfer_address = None
        self._name = None
        self._symbol = None
        self._decimals = None
        self.discriminator = None
        if chain is not None:
            self.chain = chain
        if transfer_address is not None:
            self.transfer_address = transfer_address
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if decimals is not None:
            self.decimals = decimals

    @property
    def chain(self):
        """Gets the chain of this CheckoutToken.  # noqa: E501

        The chain in which the token is defined  # noqa: E501

        :return: The chain of this CheckoutToken.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this CheckoutToken.

        The chain in which the token is defined  # noqa: E501

        :param chain: The chain of this CheckoutToken.  # noqa: E501
        :type: str
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def transfer_address(self):
        """Gets the transfer_address of this CheckoutToken.  # noqa: E501

        The destination address when payments are received in this token  # noqa: E501

        :return: The transfer_address of this CheckoutToken.  # noqa: E501
        :rtype: str
        """
        return self._transfer_address

    @transfer_address.setter
    def transfer_address(self, transfer_address):
        """Sets the transfer_address of this CheckoutToken.

        The destination address when payments are received in this token  # noqa: E501

        :param transfer_address: The transfer_address of this CheckoutToken.  # noqa: E501
        :type: str
        """
        if transfer_address is None:
            raise ValueError("Invalid value for `transfer_address`, must not be `None`")  # noqa: E501

        self._transfer_address = transfer_address

    @property
    def name(self):
        """Gets the name of this CheckoutToken.  # noqa: E501

        Name of the token  # noqa: E501

        :return: The name of this CheckoutToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckoutToken.

        Name of the token  # noqa: E501

        :param name: The name of this CheckoutToken.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this CheckoutToken.  # noqa: E501

        Symbol of the token  # noqa: E501

        :return: The symbol of this CheckoutToken.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CheckoutToken.

        Symbol of the token  # noqa: E501

        :param symbol: The symbol of this CheckoutToken.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def decimals(self):
        """Gets the decimals of this CheckoutToken.  # noqa: E501

        Token decimal places  # noqa: E501

        :return: The decimals of this CheckoutToken.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this CheckoutToken.

        Token decimal places  # noqa: E501

        :param decimals: The decimals of this CheckoutToken.  # noqa: E501
        :type: int
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")  # noqa: E501

        self._decimals = decimals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckoutToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckoutToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
