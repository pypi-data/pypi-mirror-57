# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGPUFiniteDifferenceFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGPUFiniteDifferenceFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkGPUFiniteDifferenceFunctionPython
            return _itkGPUFiniteDifferenceFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGPUFiniteDifferenceFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGPUFiniteDifferenceFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGPUFiniteDifferenceFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCovariantVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import ITKCommonBasePython
import itkSizePython
import itkGPUImagePython
import itkGPUDataManagerPython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import itkRGBAPixelPython

def itkGPUFiniteDifferenceFunctionGICVF33_New():
  return itkGPUFiniteDifferenceFunctionGICVF33.New()


def itkGPUFiniteDifferenceFunctionGIVF33_New():
  return itkGPUFiniteDifferenceFunctionGIVF33.New()


def itkGPUFiniteDifferenceFunctionGID3_New():
  return itkGPUFiniteDifferenceFunctionGID3.New()


def itkGPUFiniteDifferenceFunctionGIF3_New():
  return itkGPUFiniteDifferenceFunctionGIF3.New()


def itkGPUFiniteDifferenceFunctionGICVF22_New():
  return itkGPUFiniteDifferenceFunctionGICVF22.New()


def itkGPUFiniteDifferenceFunctionGIVF22_New():
  return itkGPUFiniteDifferenceFunctionGIVF22.New()


def itkGPUFiniteDifferenceFunctionGID2_New():
  return itkGPUFiniteDifferenceFunctionGID2.New()


def itkGPUFiniteDifferenceFunctionGIF2_New():
  return itkGPUFiniteDifferenceFunctionGIF2.New()


def itkFiniteDifferenceFunctionGICVF33_New():
  return itkFiniteDifferenceFunctionGICVF33.New()


def itkFiniteDifferenceFunctionGIVF33_New():
  return itkFiniteDifferenceFunctionGIVF33.New()


def itkFiniteDifferenceFunctionGID3_New():
  return itkFiniteDifferenceFunctionGID3.New()


def itkFiniteDifferenceFunctionGIF3_New():
  return itkFiniteDifferenceFunctionGIF3.New()


def itkFiniteDifferenceFunctionGICVF22_New():
  return itkFiniteDifferenceFunctionGICVF22.New()


def itkFiniteDifferenceFunctionGIVF22_New():
  return itkFiniteDifferenceFunctionGIVF22.New()


def itkFiniteDifferenceFunctionGID2_New():
  return itkFiniteDifferenceFunctionGID2.New()


def itkFiniteDifferenceFunctionGIF2_New():
  return itkFiniteDifferenceFunctionGIF2.New()

class itkFiniteDifferenceFunctionGICVF22(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGICVF22 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF2":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGICVF22 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::CovariantVector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::CovariantVector< float,2 >,2 >,itk::GPUImage< itk::CovariantVector< float,2 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkCovariantVectorF2
        ComputeUpdate(itkFiniteDifferenceFunctionGICVF22 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::CovariantVector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::CovariantVector< float,2 >,2 >,itk::GPUImage< itk::CovariantVector< float,2 >,2 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF2
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGICVF22 self, itkSize2 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionGICVF22 self) -> itkSize2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGICVF22 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGICVF22 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGICVF22 self) -> itkVectorD2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGICVF22 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGICVF22 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGICVF22 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGICVF22

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGICVF22 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGICVF22"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGICVF22

        Create a new object of the class itkFiniteDifferenceFunctionGICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGICVF22.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_InitializeIteration, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ComputeUpdate, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_SetRadius, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_GetRadius, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGICVF22)
itkFiniteDifferenceFunctionGICVF22_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_swigregister
itkFiniteDifferenceFunctionGICVF22_swigregister(itkFiniteDifferenceFunctionGICVF22)

def itkFiniteDifferenceFunctionGICVF22_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGICVF22 *":
    """itkFiniteDifferenceFunctionGICVF22_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGICVF22"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF22_cast(obj)

class itkFiniteDifferenceFunctionGICVF33(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGICVF33 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkCovariantVectorF3":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGICVF33 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::CovariantVector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::CovariantVector< float,3 >,3 >,itk::GPUImage< itk::CovariantVector< float,3 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkCovariantVectorF3
        ComputeUpdate(itkFiniteDifferenceFunctionGICVF33 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::CovariantVector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::CovariantVector< float,3 >,3 >,itk::GPUImage< itk::CovariantVector< float,3 >,3 > > > const & neighborhood, void * globalData) -> itkCovariantVectorF3
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGICVF33 self, itkSize3 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionGICVF33 self) -> itkSize3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGICVF33 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGICVF33 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGICVF33 self) -> itkVectorD3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGICVF33 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGICVF33 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGICVF33 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGICVF33

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGICVF33 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGICVF33"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGICVF33

        Create a new object of the class itkFiniteDifferenceFunctionGICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGICVF33.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_InitializeIteration, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ComputeUpdate, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_SetRadius, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_GetRadius, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGICVF33)
itkFiniteDifferenceFunctionGICVF33_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_swigregister
itkFiniteDifferenceFunctionGICVF33_swigregister(itkFiniteDifferenceFunctionGICVF33)

def itkFiniteDifferenceFunctionGICVF33_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGICVF33 *":
    """itkFiniteDifferenceFunctionGICVF33_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGICVF33"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGICVF33_cast(obj)

class itkFiniteDifferenceFunctionGID2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGID2 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "double":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGID2 self, itk::ConstNeighborhoodIterator< itk::GPUImage< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< double,2 >,itk::GPUImage< double,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> double
        ComputeUpdate(itkFiniteDifferenceFunctionGID2 self, itk::ConstNeighborhoodIterator< itk::GPUImage< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< double,2 >,itk::GPUImage< double,2 > > > const & neighborhood, void * globalData) -> double
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGID2 self, itkSize2 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionGID2 self) -> itkSize2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGID2 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGID2 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGID2 self) -> itkVectorD2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGID2 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGID2 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGID2 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGID2

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGID2 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGID2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGID2

        Create a new object of the class itkFiniteDifferenceFunctionGID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGID2.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_InitializeIteration, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ComputeUpdate, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_SetRadius, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_GetRadius, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGID2)
itkFiniteDifferenceFunctionGID2_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_swigregister
itkFiniteDifferenceFunctionGID2_swigregister(itkFiniteDifferenceFunctionGID2)

def itkFiniteDifferenceFunctionGID2_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGID2 *":
    """itkFiniteDifferenceFunctionGID2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGID2"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID2_cast(obj)

class itkFiniteDifferenceFunctionGID3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGID3 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "double":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGID3 self, itk::ConstNeighborhoodIterator< itk::GPUImage< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< double,3 >,itk::GPUImage< double,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> double
        ComputeUpdate(itkFiniteDifferenceFunctionGID3 self, itk::ConstNeighborhoodIterator< itk::GPUImage< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< double,3 >,itk::GPUImage< double,3 > > > const & neighborhood, void * globalData) -> double
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGID3 self, itkSize3 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionGID3 self) -> itkSize3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGID3 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGID3 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGID3 self) -> itkVectorD3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGID3 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGID3 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGID3 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGID3

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGID3 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGID3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGID3

        Create a new object of the class itkFiniteDifferenceFunctionGID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGID3.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_InitializeIteration, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ComputeUpdate, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_SetRadius, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_GetRadius, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGID3)
itkFiniteDifferenceFunctionGID3_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_swigregister
itkFiniteDifferenceFunctionGID3_swigregister(itkFiniteDifferenceFunctionGID3)

def itkFiniteDifferenceFunctionGID3_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGID3 *":
    """itkFiniteDifferenceFunctionGID3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGID3"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGID3_cast(obj)

class itkFiniteDifferenceFunctionGIF2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGIF2 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGIF2 self, itk::ConstNeighborhoodIterator< itk::GPUImage< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< float,2 >,itk::GPUImage< float,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> float
        ComputeUpdate(itkFiniteDifferenceFunctionGIF2 self, itk::ConstNeighborhoodIterator< itk::GPUImage< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< float,2 >,itk::GPUImage< float,2 > > > const & neighborhood, void * globalData) -> float
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGIF2 self, itkSize2 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionGIF2 self) -> itkSize2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGIF2 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGIF2 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGIF2 self) -> itkVectorD2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGIF2 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGIF2 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGIF2 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGIF2

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIF2 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIF2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGIF2

        Create a new object of the class itkFiniteDifferenceFunctionGIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGIF2.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_InitializeIteration, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ComputeUpdate, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_SetRadius, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_GetRadius, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGIF2)
itkFiniteDifferenceFunctionGIF2_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_swigregister
itkFiniteDifferenceFunctionGIF2_swigregister(itkFiniteDifferenceFunctionGIF2)

def itkFiniteDifferenceFunctionGIF2_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIF2 *":
    """itkFiniteDifferenceFunctionGIF2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIF2"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF2_cast(obj)

class itkFiniteDifferenceFunctionGIF3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGIF3 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGIF3 self, itk::ConstNeighborhoodIterator< itk::GPUImage< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< float,3 >,itk::GPUImage< float,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> float
        ComputeUpdate(itkFiniteDifferenceFunctionGIF3 self, itk::ConstNeighborhoodIterator< itk::GPUImage< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< float,3 >,itk::GPUImage< float,3 > > > const & neighborhood, void * globalData) -> float
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGIF3 self, itkSize3 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionGIF3 self) -> itkSize3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGIF3 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGIF3 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGIF3 self) -> itkVectorD3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGIF3 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGIF3 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGIF3 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGIF3

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIF3 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIF3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGIF3

        Create a new object of the class itkFiniteDifferenceFunctionGIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGIF3.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_InitializeIteration, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ComputeUpdate, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_SetRadius, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_GetRadius, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGIF3)
itkFiniteDifferenceFunctionGIF3_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_swigregister
itkFiniteDifferenceFunctionGIF3_swigregister(itkFiniteDifferenceFunctionGIF3)

def itkFiniteDifferenceFunctionGIF3_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIF3 *":
    """itkFiniteDifferenceFunctionGIF3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIF3"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIF3_cast(obj)

class itkFiniteDifferenceFunctionGIVF22(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGIVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGIVF22 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF2":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGIVF22 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::Vector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::Vector< float,2 >,2 >,itk::GPUImage< itk::Vector< float,2 >,2 > > > const & neighborhood, void * globalData, itkVectorF2 offset) -> itkVectorF2
        ComputeUpdate(itkFiniteDifferenceFunctionGIVF22 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::Vector< float,2 >,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::Vector< float,2 >,2 >,itk::GPUImage< itk::Vector< float,2 >,2 > > > const & neighborhood, void * globalData) -> itkVectorF2
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize2') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGIVF22 self, itkSize2 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_SetRadius(self, r)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkFiniteDifferenceFunctionGIVF22 self) -> itkSize2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGIVF22 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGIVF22 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD2 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGIVF22 self) -> itkVectorD2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGIVF22 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGIVF22 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGIVF22 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGIVF22

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIVF22 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIVF22"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGIVF22

        Create a new object of the class itkFiniteDifferenceFunctionGIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGIVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGIVF22.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_InitializeIteration, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ComputeUpdate, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_SetRadius, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_GetRadius, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGIVF22)
itkFiniteDifferenceFunctionGIVF22_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_swigregister
itkFiniteDifferenceFunctionGIVF22_swigregister(itkFiniteDifferenceFunctionGIVF22)

def itkFiniteDifferenceFunctionGIVF22_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIVF22 *":
    """itkFiniteDifferenceFunctionGIVF22_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIVF22"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF22_cast(obj)

class itkFiniteDifferenceFunctionGIVF33(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionGIVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self) -> "void":
        """InitializeIteration(itkFiniteDifferenceFunctionGIVF33 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_InitializeIteration(self)


    def ComputeUpdate(self, *args) -> "itkVectorF3":
        """
        ComputeUpdate(itkFiniteDifferenceFunctionGIVF33 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::Vector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::Vector< float,3 >,3 >,itk::GPUImage< itk::Vector< float,3 >,3 > > > const & neighborhood, void * globalData, itkVectorF3 offset) -> itkVectorF3
        ComputeUpdate(itkFiniteDifferenceFunctionGIVF33 self, itk::ConstNeighborhoodIterator< itk::GPUImage< itk::Vector< float,3 >,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::GPUImage< itk::Vector< float,3 >,3 >,itk::GPUImage< itk::Vector< float,3 >,3 > > > const & neighborhood, void * globalData) -> itkVectorF3
        """
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ComputeUpdate(self, *args)


    def SetRadius(self, r: 'itkSize3') -> "void":
        """SetRadius(itkFiniteDifferenceFunctionGIVF33 self, itkSize3 r)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_SetRadius(self, r)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkFiniteDifferenceFunctionGIVF33 self) -> itkSize3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_GetRadius(self)


    def SetScaleCoefficients(self, vals: 'double *') -> "void":
        """SetScaleCoefficients(itkFiniteDifferenceFunctionGIVF33 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_SetScaleCoefficients(self, vals)


    def GetScaleCoefficients(self, vals: 'double *') -> "void":
        """GetScaleCoefficients(itkFiniteDifferenceFunctionGIVF33 self, double * vals)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_GetScaleCoefficients(self, vals)


    def ComputeNeighborhoodScales(self) -> "itkVectorD3 const":
        """ComputeNeighborhoodScales(itkFiniteDifferenceFunctionGIVF33 self) -> itkVectorD3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ComputeNeighborhoodScales(self)


    def ComputeGlobalTimeStep(self, GlobalData: 'void *') -> "double":
        """ComputeGlobalTimeStep(itkFiniteDifferenceFunctionGIVF33 self, void * GlobalData) -> double"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ComputeGlobalTimeStep(self, GlobalData)


    def GetGlobalDataPointer(self) -> "void *":
        """GetGlobalDataPointer(itkFiniteDifferenceFunctionGIVF33 self) -> void *"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_GetGlobalDataPointer(self)


    def ReleaseGlobalDataPointer(self, GlobalData: 'void *') -> "void":
        """ReleaseGlobalDataPointer(itkFiniteDifferenceFunctionGIVF33 self, void * GlobalData)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ReleaseGlobalDataPointer(self, GlobalData)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionGIVF33

    def cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIVF33 *":
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIVF33"""
        return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionGIVF33

        Create a new object of the class itkFiniteDifferenceFunctionGIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFiniteDifferenceFunctionGIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFiniteDifferenceFunctionGIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionGIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionGIVF33.InitializeIteration = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_InitializeIteration, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.ComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ComputeUpdate, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.SetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_SetRadius, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.GetRadius = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_GetRadius, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.SetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_SetScaleCoefficients, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.GetScaleCoefficients = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_GetScaleCoefficients, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.ComputeNeighborhoodScales = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ComputeNeighborhoodScales, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.ComputeGlobalTimeStep = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ComputeGlobalTimeStep, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.GetGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_GetGlobalDataPointer, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33.ReleaseGlobalDataPointer = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_ReleaseGlobalDataPointer, None, itkFiniteDifferenceFunctionGIVF33)
itkFiniteDifferenceFunctionGIVF33_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_swigregister
itkFiniteDifferenceFunctionGIVF33_swigregister(itkFiniteDifferenceFunctionGIVF33)

def itkFiniteDifferenceFunctionGIVF33_cast(obj: 'itkLightObject') -> "itkFiniteDifferenceFunctionGIVF33 *":
    """itkFiniteDifferenceFunctionGIVF33_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionGIVF33"""
    return _itkGPUFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionGIVF33_cast(obj)

class itkGPUFiniteDifferenceFunctionGICVF22(itkFiniteDifferenceFunctionGICVF22):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageCVF22_Pointer const', update: 'itkGPUImageCVF22_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGICVF22 self, itkGPUImageCVF22_Pointer const output, itkGPUImageCVF22_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGICVF22 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGICVF22 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGICVF22

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGICVF22 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGICVF22"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGICVF22

        Create a new object of the class itkGPUFiniteDifferenceFunctionGICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGICVF22.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGICVF22)
itkGPUFiniteDifferenceFunctionGICVF22.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGICVF22)
itkGPUFiniteDifferenceFunctionGICVF22.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGICVF22)
itkGPUFiniteDifferenceFunctionGICVF22_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_swigregister
itkGPUFiniteDifferenceFunctionGICVF22_swigregister(itkGPUFiniteDifferenceFunctionGICVF22)

def itkGPUFiniteDifferenceFunctionGICVF22_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGICVF22 *":
    """itkGPUFiniteDifferenceFunctionGICVF22_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGICVF22"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF22_cast(obj)

class itkGPUFiniteDifferenceFunctionGICVF33(itkFiniteDifferenceFunctionGICVF33):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageCVF33_Pointer const', update: 'itkGPUImageCVF33_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGICVF33 self, itkGPUImageCVF33_Pointer const output, itkGPUImageCVF33_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGICVF33 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGICVF33 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGICVF33

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGICVF33 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGICVF33"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGICVF33

        Create a new object of the class itkGPUFiniteDifferenceFunctionGICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGICVF33.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGICVF33)
itkGPUFiniteDifferenceFunctionGICVF33.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGICVF33)
itkGPUFiniteDifferenceFunctionGICVF33.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGICVF33)
itkGPUFiniteDifferenceFunctionGICVF33_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_swigregister
itkGPUFiniteDifferenceFunctionGICVF33_swigregister(itkGPUFiniteDifferenceFunctionGICVF33)

def itkGPUFiniteDifferenceFunctionGICVF33_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGICVF33 *":
    """itkGPUFiniteDifferenceFunctionGICVF33_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGICVF33"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGICVF33_cast(obj)

class itkGPUFiniteDifferenceFunctionGID2(itkFiniteDifferenceFunctionGID2):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageD2_Pointer const', update: 'itkGPUImageD2_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGID2 self, itkGPUImageD2_Pointer const output, itkGPUImageD2_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGID2 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGID2 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGID2

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGID2 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGID2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGID2

        Create a new object of the class itkGPUFiniteDifferenceFunctionGID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGID2.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGID2)
itkGPUFiniteDifferenceFunctionGID2.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGID2)
itkGPUFiniteDifferenceFunctionGID2.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGID2)
itkGPUFiniteDifferenceFunctionGID2_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_swigregister
itkGPUFiniteDifferenceFunctionGID2_swigregister(itkGPUFiniteDifferenceFunctionGID2)

def itkGPUFiniteDifferenceFunctionGID2_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGID2 *":
    """itkGPUFiniteDifferenceFunctionGID2_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGID2"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID2_cast(obj)

class itkGPUFiniteDifferenceFunctionGID3(itkFiniteDifferenceFunctionGID3):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageD3_Pointer const', update: 'itkGPUImageD3_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGID3 self, itkGPUImageD3_Pointer const output, itkGPUImageD3_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGID3 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGID3 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGID3

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGID3 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGID3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGID3

        Create a new object of the class itkGPUFiniteDifferenceFunctionGID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGID3.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGID3)
itkGPUFiniteDifferenceFunctionGID3.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGID3)
itkGPUFiniteDifferenceFunctionGID3.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGID3)
itkGPUFiniteDifferenceFunctionGID3_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_swigregister
itkGPUFiniteDifferenceFunctionGID3_swigregister(itkGPUFiniteDifferenceFunctionGID3)

def itkGPUFiniteDifferenceFunctionGID3_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGID3 *":
    """itkGPUFiniteDifferenceFunctionGID3_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGID3"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGID3_cast(obj)

class itkGPUFiniteDifferenceFunctionGIF2(itkFiniteDifferenceFunctionGIF2):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageF2_Pointer const', update: 'itkGPUImageF2_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGIF2 self, itkGPUImageF2_Pointer const output, itkGPUImageF2_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGIF2 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGIF2 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGIF2

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIF2 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIF2"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGIF2

        Create a new object of the class itkGPUFiniteDifferenceFunctionGIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGIF2.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGIF2)
itkGPUFiniteDifferenceFunctionGIF2.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGIF2)
itkGPUFiniteDifferenceFunctionGIF2.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGIF2)
itkGPUFiniteDifferenceFunctionGIF2_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_swigregister
itkGPUFiniteDifferenceFunctionGIF2_swigregister(itkGPUFiniteDifferenceFunctionGIF2)

def itkGPUFiniteDifferenceFunctionGIF2_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIF2 *":
    """itkGPUFiniteDifferenceFunctionGIF2_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIF2"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF2_cast(obj)

class itkGPUFiniteDifferenceFunctionGIF3(itkFiniteDifferenceFunctionGIF3):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageF3_Pointer const', update: 'itkGPUImageF3_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGIF3 self, itkGPUImageF3_Pointer const output, itkGPUImageF3_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGIF3 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGIF3 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGIF3

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIF3 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIF3"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGIF3

        Create a new object of the class itkGPUFiniteDifferenceFunctionGIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGIF3.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGIF3)
itkGPUFiniteDifferenceFunctionGIF3.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGIF3)
itkGPUFiniteDifferenceFunctionGIF3.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGIF3)
itkGPUFiniteDifferenceFunctionGIF3_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_swigregister
itkGPUFiniteDifferenceFunctionGIF3_swigregister(itkGPUFiniteDifferenceFunctionGIF3)

def itkGPUFiniteDifferenceFunctionGIF3_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIF3 *":
    """itkGPUFiniteDifferenceFunctionGIF3_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIF3"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIF3_cast(obj)

class itkGPUFiniteDifferenceFunctionGIVF22(itkFiniteDifferenceFunctionGIVF22):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGIVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageVF22_Pointer const', update: 'itkGPUImageVF22_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGIVF22 self, itkGPUImageVF22_Pointer const output, itkGPUImageVF22_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGIVF22 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGIVF22 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGIVF22

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIVF22 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIVF22"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGIVF22

        Create a new object of the class itkGPUFiniteDifferenceFunctionGIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGIVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGIVF22.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGIVF22)
itkGPUFiniteDifferenceFunctionGIVF22.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGIVF22)
itkGPUFiniteDifferenceFunctionGIVF22.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGIVF22)
itkGPUFiniteDifferenceFunctionGIVF22_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_swigregister
itkGPUFiniteDifferenceFunctionGIVF22_swigregister(itkGPUFiniteDifferenceFunctionGIVF22)

def itkGPUFiniteDifferenceFunctionGIVF22_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIVF22 *":
    """itkGPUFiniteDifferenceFunctionGIVF22_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIVF22"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF22_cast(obj)

class itkGPUFiniteDifferenceFunctionGIVF33(itkFiniteDifferenceFunctionGIVF33):
    """Proxy of C++ itkGPUFiniteDifferenceFunctionGIVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GPUComputeUpdate(self, output: 'itkGPUImageVF33_Pointer const', update: 'itkGPUImageVF33_Pointer', gd: 'void *') -> "void":
        """GPUComputeUpdate(itkGPUFiniteDifferenceFunctionGIVF33 self, itkGPUImageVF33_Pointer const output, itkGPUImageVF33_Pointer update, void * gd)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_GPUComputeUpdate(self, output, update, gd)


    def GPUAllocateMetricData(self, arg0: 'unsigned int') -> "void":
        """GPUAllocateMetricData(itkGPUFiniteDifferenceFunctionGIVF33 self, unsigned int arg0)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_GPUAllocateMetricData(self, arg0)


    def GPUReleaseMetricData(self) -> "void":
        """GPUReleaseMetricData(itkGPUFiniteDifferenceFunctionGIVF33 self)"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_GPUReleaseMetricData(self)

    __swig_destroy__ = _itkGPUFiniteDifferenceFunctionPython.delete_itkGPUFiniteDifferenceFunctionGIVF33

    def cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIVF33 *":
        """cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIVF33"""
        return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUFiniteDifferenceFunctionGIVF33

        Create a new object of the class itkGPUFiniteDifferenceFunctionGIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUFiniteDifferenceFunctionGIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUFiniteDifferenceFunctionGIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUFiniteDifferenceFunctionGIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUFiniteDifferenceFunctionGIVF33.GPUComputeUpdate = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_GPUComputeUpdate, None, itkGPUFiniteDifferenceFunctionGIVF33)
itkGPUFiniteDifferenceFunctionGIVF33.GPUAllocateMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_GPUAllocateMetricData, None, itkGPUFiniteDifferenceFunctionGIVF33)
itkGPUFiniteDifferenceFunctionGIVF33.GPUReleaseMetricData = new_instancemethod(_itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_GPUReleaseMetricData, None, itkGPUFiniteDifferenceFunctionGIVF33)
itkGPUFiniteDifferenceFunctionGIVF33_swigregister = _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_swigregister
itkGPUFiniteDifferenceFunctionGIVF33_swigregister(itkGPUFiniteDifferenceFunctionGIVF33)

def itkGPUFiniteDifferenceFunctionGIVF33_cast(obj: 'itkLightObject') -> "itkGPUFiniteDifferenceFunctionGIVF33 *":
    """itkGPUFiniteDifferenceFunctionGIVF33_cast(itkLightObject obj) -> itkGPUFiniteDifferenceFunctionGIVF33"""
    return _itkGPUFiniteDifferenceFunctionPython.itkGPUFiniteDifferenceFunctionGIVF33_cast(obj)



