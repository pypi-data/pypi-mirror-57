# -*- coding: utf-8 -*-

from typing import Iterable, List, Optional, Union

class QueryBuilder:
    __slots__: Iterable[str]

    application: str
    key: str
    optional: bool
    restricted: bool

    _ops: List[dict]

    def __init__(self, application: str, key: str, *, restricted: Optional[bool] = ...,
                 optional: Optional[bool] = ...) -> None: ...

    def _single_strategy(self, op: str, key: str, value: Union[str, float, int, list]) -> QueryBuilder: ...

    def _multiple_stategy(self, op: str, key: str, builder: Node) -> QueryBuilder: ...

    def eq(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def ne(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def gt(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def gte(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def lt(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def lte(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def inside(self, key: str, value: list) -> QueryBuilder: ...

    def ninside(self, key: str, value: list) -> QueryBuilder: ...

    def contains(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def ncontains(self, key: str, value: Union[str, int, float, list]) -> QueryBuilder: ...

    def also(self, key: str, node: Node) -> QueryBuilder: ...

    def either(self, key: str, node: Node) -> QueryBuilder: ...

    def neither(self, key: str, node: Node) -> QueryBuilder: ...

    def to_json(self) -> List[dict]: ...


class Node:
    __slots__: Iterable[str]

    _ops: List[dict]

    def __init__(self) -> None: ...

    def _single_strategy(self, op: str, value: Union[str, float, int, list]) -> Node: ...

    def eq(self, value: Union[str, int, float, list]) -> Node: ...

    def ne(self, value: Union[str, int, float, list]) -> Node: ...

    def gt(self, value: Union[str, int, float, list]) -> Node: ...

    def gte(self, value: Union[str, int, float, list]) -> Node: ...

    def lt(self, value: Union[str, int, float, list]) -> Node: ...

    def lte(self, value: Union[str, int, float, list]) -> Node: ...

    def inside(self, value: list) -> Node: ...

    def ninside(self, value: list) -> Node: ...

    def contains(self, value: Union[str, int, float, list]) -> Node: ...

    def ncontains(self, value: Union[str, int, float, list]) -> Node: ...

    def to_json(self) -> List[dict]: ...
