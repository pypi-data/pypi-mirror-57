"Main interface for transfer service Client"
from __future__ import annotations

from typing import Any, Dict, List
from botocore.client import BaseClient
from botocore.exceptions import ClientError as Boto3ClientError
from botocore.paginate import Paginator as Boto3Paginator
from mypy_boto3.type_defs import Literal, overload

# pylint: disable=import-self
import mypy_boto3_transfer.client as client_scope

# pylint: disable=import-self
import mypy_boto3_transfer.paginator as paginator_scope
from mypy_boto3_transfer.type_defs import (
    ClientCreateServerEndpointDetailsTypeDef,
    ClientCreateServerIdentityProviderDetailsTypeDef,
    ClientCreateServerResponseTypeDef,
    ClientCreateServerTagsTypeDef,
    ClientCreateUserHomeDirectoryMappingsTypeDef,
    ClientCreateUserResponseTypeDef,
    ClientCreateUserTagsTypeDef,
    ClientDescribeServerResponseTypeDef,
    ClientDescribeUserResponseTypeDef,
    ClientImportSshPublicKeyResponseTypeDef,
    ClientListServersResponseTypeDef,
    ClientListTagsForResourceResponseTypeDef,
    ClientListUsersResponseTypeDef,
    ClientTagResourceTagsTypeDef,
    ClientTestIdentityProviderResponseTypeDef,
    ClientUpdateServerEndpointDetailsTypeDef,
    ClientUpdateServerIdentityProviderDetailsTypeDef,
    ClientUpdateServerResponseTypeDef,
    ClientUpdateUserHomeDirectoryMappingsTypeDef,
    ClientUpdateUserResponseTypeDef,
)


__all__ = ("Client",)


class Client(BaseClient):
    exceptions: client_scope.Exceptions

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def can_paginate(self, operation_name: str) -> bool:
        """
        Check if an operation can be paginated.

        :type operation_name: string
        :param operation_name: The operation name.  This is the same name
            as the method name on the client.  For example, if the
            method name is ``create_foo``, and you'd normally invoke the
            operation as ``client.create_foo(**kwargs)``, if the
            ``create_foo`` operation can be paginated, you can use the
            call ``client.get_paginator("create_foo")``.

        :return: ``True`` if the operation can be paginated,
            ``False`` otherwise.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def create_server(
        self,
        EndpointDetails: ClientCreateServerEndpointDetailsTypeDef = None,
        EndpointType: Literal["PUBLIC", "VPC_ENDPOINT"] = None,
        HostKey: str = None,
        IdentityProviderDetails: ClientCreateServerIdentityProviderDetailsTypeDef = None,
        IdentityProviderType: Literal["SERVICE_MANAGED", "API_GATEWAY"] = None,
        LoggingRole: str = None,
        Tags: List[ClientCreateServerTagsTypeDef] = None,
    ) -> ClientCreateServerResponseTypeDef:
        """
        Instantiates an autoscaling virtual server based on Secure File Transfer Protocol (SFTP) in
        AWS. When you make updates to your server or when you work with users, use the
        service-generated ``ServerId`` property that is assigned to the newly created server.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/CreateServer>`_

        **Request Syntax**
        ::

          response = client.create_server(
              EndpointDetails={
                  'VpcEndpointId': 'string'
              },
              EndpointType='PUBLIC'|'VPC_ENDPOINT',
              HostKey='string',
              IdentityProviderDetails={
                  'Url': 'string',
                  'InvocationRole': 'string'
              },
              IdentityProviderType='SERVICE_MANAGED'|'API_GATEWAY',
              LoggingRole='string',
              Tags=[
                  {
                      'Key': 'string',
                      'Value': 'string'
                  },
              ]
          )
        :type EndpointDetails: dict
        :param EndpointDetails:

          The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP
          server. This parameter is required when you specify a value for the ``EndpointType``
          parameter.

          - **VpcEndpointId** *(string) --*

            The ID of the VPC endpoint.

        :type EndpointType: string
        :param EndpointType:

          The type of VPC endpoint that you want your SFTP server to connect to. If you connect to a
          VPC endpoint, your SFTP server isn't accessible over the public internet.

        :type HostKey: string
        :param HostKey:

          The RSA private key as generated by the ``ssh-keygen -N "" -f my-new-server-key`` command.

          .. warning::

            If you aren't planning to migrate existing users from an existing SFTP server to a new
            AWS SFTP server, don't update the host key. Accidentally changing a server's host key
            can be disruptive.

          For more information, see
          "https://alpha-docs-aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
          in the *AWS SFTP User Guide.*

        :type IdentityProviderDetails: dict
        :param IdentityProviderDetails:

          This parameter is required when the ``IdentityProviderType`` is set to ``API_GATEWAY`` .
          Accepts an array containing all of the information required to call a customer-supplied
          authentication API, including the API Gateway URL. This property is not required when the
          ``IdentityProviderType`` is set to ``SERVICE_MANAGED`` .

          - **Url** *(string) --*

            The ``Url`` parameter provides contains the location of the service endpoint used to
            authenticate users.

          - **InvocationRole** *(string) --*

            The ``InvocationRole`` parameter provides the type of ``InvocationRole`` used to
            authenticate the user account.

        :type IdentityProviderType: string
        :param IdentityProviderType:

          Specifies the mode of authentication for the SFTP server. The default value is
          ``SERVICE_MANAGED`` , which allows you to store and access SFTP user credentials within
          the AWS Transfer for SFTP service. Use the ``API_GATEWAY`` value to integrate with an
          identity provider of your choosing. The ``API_GATEWAY`` setting requires you to provide an
          API Gateway endpoint URL to call for authentication using the ``IdentityProviderDetails``
          parameter.

        :type LoggingRole: string
        :param LoggingRole:

          A value that allows the service to write your SFTP users' activity to your Amazon
          CloudWatch logs for monitoring and auditing purposes.

        :type Tags: list
        :param Tags:

          Key-value pairs that can be used to group and search for servers.

          - *(dict) --*

            Creates a key-value pair for a specific resource. Tags are metadata that you can use to
            search for and group a resource for various purposes. You can apply tags to servers,
            users, and roles. A tag key can take more than one value. For example, to group servers
            for accounting purposes, you might create a tag called ``Group`` and assign the values
            ``Research`` and ``Accounting`` to that group.

            - **Key** *(string) --* **[REQUIRED]**

              The name assigned to the tag that you create.

            - **Value** *(string) --* **[REQUIRED]**

              This property contains one or more values that you assigned to the key name you
              create.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'ServerId': 'string'
            }
          **Response Structure**

          - *(dict) --*

            - **ServerId** *(string) --*

              The service-assigned ID of the SFTP server that is created.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def create_user(
        self,
        Role: str,
        ServerId: str,
        UserName: str,
        HomeDirectory: str = None,
        HomeDirectoryType: Literal["PATH", "LOGICAL"] = None,
        HomeDirectoryMappings: List[ClientCreateUserHomeDirectoryMappingsTypeDef] = None,
        Policy: str = None,
        SshPublicKeyBody: str = None,
        Tags: List[ClientCreateUserTagsTypeDef] = None,
    ) -> ClientCreateUserResponseTypeDef:
        """
        Creates a user and associates them with an existing Secure File Transfer Protocol (SFTP)
        server. You can only create and associate users with SFTP servers that have the
        ``IdentityProviderType`` set to ``SERVICE_MANAGED`` . Using parameters for ``CreateUser`` ,
        you can specify the user name, set the home directory, store the user's public key, and
        assign the user's AWS Identity and Access Management (IAM) role. You can also optionally add
        a scope-down policy, and assign metadata with tags that can be used to group and search for
        users.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/CreateUser>`_

        **Request Syntax**
        ::

          response = client.create_user(
              HomeDirectory='string',
              HomeDirectoryType='PATH'|'LOGICAL',
              HomeDirectoryMappings=[
                  {
                      'Entry': 'string',
                      'Target': 'string'
                  },
              ],
              Policy='string',
              Role='string',
              ServerId='string',
              SshPublicKeyBody='string',
              Tags=[
                  {
                      'Key': 'string',
                      'Value': 'string'
                  },
              ],
              UserName='string'
          )
        :type HomeDirectory: string
        :param HomeDirectory:

          The landing directory (folder) for a user when they log in to the server using their SFTP
          client.

          An example is <``your-Amazon-S3-bucket-name>/home/username`` .

        :type HomeDirectoryType: string
        :param HomeDirectoryType:

          The type of landing directory (folder) you want your users' home directory to be when they
          log into the SFTP server. If you set it to ``PATH`` , the user will see the absolute
          Amazon S3 bucket paths as is in their SFTP clients. If you set it ``LOGICAL`` , you will
          need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make S3
          paths visible to your user.

        :type HomeDirectoryMappings: list
        :param HomeDirectoryMappings:

          Logical directory mappings that specify what S3 paths and keys should be visible to your
          user and how you want to make them visible. You will need to specify the "``Entry`` " and
          "``Target`` " pair, where ``Entry`` shows how the path is made visible and ``Target`` is
          the actual S3 path. If you only specify a target, it will be displayed as is. You will
          need to also make sure that your AWS IAM Role provides access to paths in ``Target`` . The
          following is an example.

           ``'[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target":
           "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'``

          In most cases, you can use this value instead of the scope down policy to lock your user
          down to the designated home directory ("chroot"). To do this, you can set ``Entry`` to '/'
          and set ``Target`` to the HomeDirectory parameter value.

          - *(dict) --*

            Represents an object that contains entries and a targets for ``HomeDirectoryMappings`` .

            - **Entry** *(string) --* **[REQUIRED]**

              Represents an entry and a target for ``HomeDirectoryMappings`` .

            - **Target** *(string) --* **[REQUIRED]**

              Represents the map target that is used in a ``HomeDirectorymapEntry`` .

        :type Policy: string
        :param Policy:

          A scope-down policy for your user so you can use the same IAM role across multiple users.
          This policy scopes down user access to portions of their Amazon S3 bucket. Variables that
          you can use inside this policy include ``${Transfer:UserName}`` ,
          ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

          .. note::

            For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON blob, instead
            of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and
            pass it in the ``Policy`` argument.

            For an example of a scope-down policy, see
            "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating
            a Scope-Down Policy.

            For more information, see
            "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html" in the *AWS
            Security Token Service API Reference* .

        :type Role: string
        :param Role: **[REQUIRED]**

          The IAM role that controls your user's access to your Amazon S3 bucket. The policies
          attached to this role will determine the level of access you want to provide your users
          when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role
          should also contain a trust relationship that allows the SFTP server to access your
          resources when servicing your SFTP user's transfer requests.

        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server instance. This is the specific SFTP
          server that you added your user to.

        :type SshPublicKeyBody: string
        :param SshPublicKeyBody:

          The public portion of the Secure Shell (SSH) key used to authenticate the user to the SFTP
          server.

        :type Tags: list
        :param Tags:

          Key-value pairs that can be used to group and search for users. Tags are metadata attached
          to users for any purpose.

          - *(dict) --*

            Creates a key-value pair for a specific resource. Tags are metadata that you can use to
            search for and group a resource for various purposes. You can apply tags to servers,
            users, and roles. A tag key can take more than one value. For example, to group servers
            for accounting purposes, you might create a tag called ``Group`` and assign the values
            ``Research`` and ``Accounting`` to that group.

            - **Key** *(string) --* **[REQUIRED]**

              The name assigned to the tag that you create.

            - **Value** *(string) --* **[REQUIRED]**

              This property contains one or more values that you assigned to the key name you
              create.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          A unique string that identifies a user and is associated with a server as specified by the
          ``ServerId`` . This user name must be a minimum of 3 and a maximum of 32 characters long.
          The following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name
          can't start with a hyphen.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'ServerId': 'string',
                'UserName': 'string'
            }
          **Response Structure**

          - *(dict) --*

            - **ServerId** *(string) --*

              The ID of the SFTP server that the user is attached to.

            - **UserName** *(string) --*

              A unique string that identifies a user account associated with an SFTP server.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def delete_server(self, ServerId: str) -> None:
        """
        Deletes the Secure File Transfer Protocol (SFTP) server that you specify.

        No response returns from this operation.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteServer>`_

        **Request Syntax**
        ::

          response = client.delete_server(
              ServerId='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A unique system-assigned identifier for an SFTP server instance.

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def delete_ssh_public_key(self, ServerId: str, SshPublicKeyId: str, UserName: str) -> None:
        """
        Deletes a user's Secure Shell (SSH) public key.

        No response is returned from this operation.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteSshPublicKey>`_

        **Request Syntax**
        ::

          response = client.delete_ssh_public_key(
              ServerId='string',
              SshPublicKeyId='string',
              UserName='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for a Secure File Transfer Protocol (SFTP) server
          instance that has the user assigned to it.

        :type SshPublicKeyId: string
        :param SshPublicKeyId: **[REQUIRED]**

          A unique identifier used to reference your user's specific SSH key.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          A unique string that identifies a user whose public key is being deleted.

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def delete_user(self, ServerId: str, UserName: str) -> None:
        """
        Deletes the user belonging to the server you specify.

        No response returns from this operation.

        .. note::

          When you delete a user from a server, the user's information is lost.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteUser>`_

        **Request Syntax**
        ::

          response = client.delete_user(
              ServerId='string',
              UserName='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server instance that has the user assigned
          to it.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          A unique string that identifies a user that is being deleted from the server.

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def describe_server(self, ServerId: str) -> ClientDescribeServerResponseTypeDef:
        """
        Describes the server that you specify by passing the ``ServerId`` parameter.

        The response contains a description of the server's properties.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DescribeServer>`_

        **Request Syntax**
        ::

          response = client.describe_server(
              ServerId='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'Server': {
                    'Arn': 'string',
                    'EndpointDetails': {
                        'VpcEndpointId': 'string'
                    },
                    'EndpointType': 'PUBLIC'|'VPC_ENDPOINT',
                    'HostKeyFingerprint': 'string',
                    'IdentityProviderDetails': {
                        'Url': 'string',
                        'InvocationRole': 'string'
                    },
                    'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY',
                    'LoggingRole': 'string',
                    'ServerId': 'string',
                    'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
                    'Tags': [
                        {
                            'Key': 'string',
                            'Value': 'string'
                        },
                    ],
                    'UserCount': 123
                }
            }
          **Response Structure**

          - *(dict) --*

            - **Server** *(dict) --*

              An array containing the properties of the server with the ``ServerID`` you specified.

              - **Arn** *(string) --*

                Specifies the unique Amazon Resource Name (ARN) for the server to be described.

              - **EndpointDetails** *(dict) --*

                The virtual private cloud (VPC) endpoint settings that you configured for your SFTP
                server.

                - **VpcEndpointId** *(string) --*

                  The ID of the VPC endpoint.

              - **EndpointType** *(string) --*

                The type of endpoint that your SFTP server is connected to. If your SFTP server is
                connected to a VPC endpoint, your server isn't accessible over the public internet.

              - **HostKeyFingerprint** *(string) --*

                This value contains the message-digest algorithm (MD5) hash of the server's host
                key. This value is equivalent to the output of the ``ssh-keygen -l -E md5 -f
                my-new-server-key`` command.

              - **IdentityProviderDetails** *(dict) --*

                Specifies information to call a customer-supplied authentication API. This field is
                not populated when the ``IdentityProviderType`` of the server is ``SERVICE_MANAGED``
                >.

                - **Url** *(string) --*

                  The ``Url`` parameter provides contains the location of the service endpoint used
                  to authenticate users.

                - **InvocationRole** *(string) --*

                  The ``InvocationRole`` parameter provides the type of ``InvocationRole`` used to
                  authenticate the user account.

              - **IdentityProviderType** *(string) --*

                This property defines the mode of authentication method enabled for this service. A
                value of ``SERVICE_MANAGED`` means that you are using this server to store and
                access SFTP user credentials within the service. A value of ``API_GATEWAY``
                indicates that you have integrated an API Gateway endpoint that will be invoked for
                authenticating your user into the service.

              - **LoggingRole** *(string) --*

                This property is an AWS Identity and Access Management (IAM) entity that allows the
                server to turn on Amazon CloudWatch logging for Amazon S3 events. When set, user
                activity can be viewed in your CloudWatch logs.

              - **ServerId** *(string) --*

                This property is a unique system-assigned identifier for the SFTP server that you
                instantiate.

              - **State** *(string) --*

                The condition of the SFTP server for the server that was described. A value of
                ``ONLINE`` indicates that the server can accept jobs and transfer files. A ``State``
                value of ``OFFLINE`` means that the server cannot perform file transfer operations.

                The states of ``STARTING`` and ``STOPPING`` indicate that the server is in an
                intermediate state, either not fully able to respond, or not fully offline. The
                values of ``START_FAILED`` or ``STOP_FAILED`` can indicate an error condition.

              - **Tags** *(list) --*

                This property contains the key-value pairs that you can use to search for and group
                servers that were assigned to the server that was described.

                - *(dict) --*

                  Creates a key-value pair for a specific resource. Tags are metadata that you can
                  use to search for and group a resource for various purposes. You can apply tags to
                  servers, users, and roles. A tag key can take more than one value. For example, to
                  group servers for accounting purposes, you might create a tag called ``Group`` and
                  assign the values ``Research`` and ``Accounting`` to that group.

                  - **Key** *(string) --*

                    The name assigned to the tag that you create.

                  - **Value** *(string) --*

                    This property contains one or more values that you assigned to the key name you
                    create.

              - **UserCount** *(integer) --*

                The number of users that are assigned to the SFTP server you specified with the
                ``ServerId`` .
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def describe_user(self, ServerId: str, UserName: str) -> ClientDescribeUserResponseTypeDef:
        """
        Describes the user assigned to a specific server, as identified by its ``ServerId``
        property.

        The response from this call returns the properties of the user associated with the
        ``ServerId`` value that was specified.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DescribeUser>`_

        **Request Syntax**
        ::

          response = client.describe_user(
              ServerId='string',
              UserName='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server that has this user assigned.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          The name of the user assigned to one or more servers. User names are part of the sign-in
          credentials to use the AWS Transfer for SFTP service and perform file transfer tasks.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'ServerId': 'string',
                'User': {
                    'Arn': 'string',
                    'HomeDirectory': 'string',
                    'HomeDirectoryMappings': [
                        {
                            'Entry': 'string',
                            'Target': 'string'
                        },
                    ],
                    'HomeDirectoryType': 'PATH'|'LOGICAL',
                    'Policy': 'string',
                    'Role': 'string',
                    'SshPublicKeys': [
                        {
                            'DateImported': datetime(2015, 1, 1),
                            'SshPublicKeyBody': 'string',
                            'SshPublicKeyId': 'string'
                        },
                    ],
                    'Tags': [
                        {
                            'Key': 'string',
                            'Value': 'string'
                        },
                    ],
                    'UserName': 'string'
                }
            }
          **Response Structure**

          - *(dict) --*

            - **ServerId** *(string) --*

              A system-assigned unique identifier for an SFTP server that has this user assigned.

            - **User** *(dict) --*

              An array containing the properties of the user account for the ``ServerID`` value that
              you specified.

              - **Arn** *(string) --*

                This property contains the unique Amazon Resource Name (ARN) for the user that was
                requested to be described.

              - **HomeDirectory** *(string) --*

                This property specifies the landing directory (or folder), which is the location
                that files are written to or read from in an Amazon S3 bucket for the described
                user. An example is ``/*your s3 bucket name* /home/*username* `` .

              - **HomeDirectoryMappings** *(list) --*

                Logical directory mappings that you specified for what S3 paths and keys should be
                visible to your user and how you want to make them visible. You will need to specify
                the "``Entry`` " and "``Target`` " pair, where ``Entry`` shows how the path is made
                visible and ``Target`` is the actual S3 path. If you only specify a target, it will
                be displayed as is. You will need to also make sure that your AWS IAM Role provides
                access to paths in ``Target`` .

                In most cases, you can use this value instead of the scope down policy to lock your
                user down to the designated home directory ("chroot"). To do this, you can set
                ``Entry`` to '/' and set ``Target`` to the HomeDirectory parameter value.

                In most cases, you can use this value instead of the scope down policy to lock your
                user down to the designated home directory ("chroot"). To do this, you can set
                ``Entry`` to '/' and set ``Target`` to the HomeDirectory parameter value.

                - *(dict) --*

                  Represents an object that contains entries and a targets for
                  ``HomeDirectoryMappings`` .

                  - **Entry** *(string) --*

                    Represents an entry and a target for ``HomeDirectoryMappings`` .

                  - **Target** *(string) --*

                    Represents the map target that is used in a ``HomeDirectorymapEntry`` .

              - **HomeDirectoryType** *(string) --*

                The type of landing directory (folder) you mapped for your users' to see when they
                log into the SFTP server. If you set it to ``PATH`` , the user will see the absolute
                Amazon S3 bucket paths as is in their SFTP clients. If you set it ``LOGICAL`` , you
                will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to
                make S3 paths visible to your user.

              - **Policy** *(string) --*

                Specifies the name of the policy in use for the described user.

              - **Role** *(string) --*

                This property specifies the IAM role that controls your user's access to your Amazon
                S3 bucket. The policies attached to this role will determine the level of access you
                want to provide your users when transferring files into and out of your Amazon S3
                bucket or buckets. The IAM role should also contain a trust relationship that allows
                the SFTP server to access your resources when servicing your SFTP user's transfer
                requests.

              - **SshPublicKeys** *(list) --*

                This property contains the public key portion of the Secure Shell (SSH) keys stored
                for the described user.

                - *(dict) --*

                  Provides information about the public Secure Shell (SSH) key that is associated
                  with a user account for a specific server (as identified by ``ServerId`` ). The
                  information returned includes the date the key was imported, the public key
                  contents, and the public key ID. A user can store more than one SSH public key
                  associated with their user name on a specific SFTP server.

                  - **DateImported** *(datetime) --*

                    The date that the public key was added to the user account.

                  - **SshPublicKeyBody** *(string) --*

                    The content of the SSH public key as specified by the ``PublicKeyId`` .

                  - **SshPublicKeyId** *(string) --*

                    The ``SshPublicKeyId`` parameter contains the identifier of the public key.

              - **Tags** *(list) --*

                This property contains the key-value pairs for the user requested. Tag can be used
                to search for and group users for a variety of purposes.

                - *(dict) --*

                  Creates a key-value pair for a specific resource. Tags are metadata that you can
                  use to search for and group a resource for various purposes. You can apply tags to
                  servers, users, and roles. A tag key can take more than one value. For example, to
                  group servers for accounting purposes, you might create a tag called ``Group`` and
                  assign the values ``Research`` and ``Accounting`` to that group.

                  - **Key** *(string) --*

                    The name assigned to the tag that you create.

                  - **Value** *(string) --*

                    This property contains one or more values that you assigned to the key name you
                    create.

              - **UserName** *(string) --*

                This property is the name of the user that was requested to be described. User names
                are used for authentication purposes. This is the string that will be used by your
                user when they log in to your SFTP server.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def generate_presigned_url(
        self,
        ClientMethod: str,
        Params: Dict[str, Any] = None,
        ExpiresIn: int = 3600,
        HttpMethod: str = None,
    ) -> None:
        """
        Generate a presigned url given a client, its method, and arguments

        :type ClientMethod: string
        :param ClientMethod: The client method to presign for

        :type Params: dict
        :param Params: The parameters normally passed to
            ``ClientMethod``.

        :type ExpiresIn: int
        :param ExpiresIn: The number of seconds the presigned url is valid
            for. By default it expires in an hour (3600 seconds)

        :type HttpMethod: string
        :param HttpMethod: The http method to use on the generated url. By
            default, the http method is whatever is used in the method's model.

        :returns: The presigned url
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def import_ssh_public_key(
        self, ServerId: str, SshPublicKeyBody: str, UserName: str
    ) -> ClientImportSshPublicKeyResponseTypeDef:
        """
        Adds a Secure Shell (SSH) public key to a user account identified by a ``UserName`` value
        assigned to a specific server, identified by ``ServerId`` .

        The response returns the ``UserName`` value, the ``ServerId`` value, and the name of the
        ``SshPublicKeyId`` .

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ImportSshPublicKey>`_

        **Request Syntax**
        ::

          response = client.import_ssh_public_key(
              ServerId='string',
              SshPublicKeyBody='string',
              UserName='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server.

        :type SshPublicKeyBody: string
        :param SshPublicKeyBody: **[REQUIRED]**

          The public key portion of an SSH key pair.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          The name of the user account that is assigned to one or more servers.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'ServerId': 'string',
                'SshPublicKeyId': 'string',
                'UserName': 'string'
            }
          **Response Structure**

          - *(dict) --*

            This response identifies the user, the server they belong to, and the identifier of the
            SSH public key associated with that user. A user can have more than one key on each
            server that they are associated with.

            - **ServerId** *(string) --*

              A system-assigned unique identifier for an SFTP server.

            - **SshPublicKeyId** *(string) --*

              This identifier is the name given to a public key by the system that was imported.

            - **UserName** *(string) --*

              A user name assigned to the ``ServerID`` value that you specified.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def list_servers(
        self, MaxResults: int = None, NextToken: str = None
    ) -> ClientListServersResponseTypeDef:
        """
        Lists the Secure File Transfer Protocol (SFTP) servers that are associated with your AWS
        account.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListServers>`_

        **Request Syntax**
        ::

          response = client.list_servers(
              MaxResults=123,
              NextToken='string'
          )
        :type MaxResults: integer
        :param MaxResults:

          Specifies the number of servers to return as a response to the ``ListServers`` query.

        :type NextToken: string
        :param NextToken:

          When additional results are obtained from the ``ListServers`` command, a ``NextToken``
          parameter is returned in the output. You can then pass the ``NextToken`` parameter in a
          subsequent command to continue listing additional servers.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'NextToken': 'string',
                'Servers': [
                    {
                        'Arn': 'string',
                        'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY',
                        'EndpointType': 'PUBLIC'|'VPC_ENDPOINT',
                        'LoggingRole': 'string',
                        'ServerId': 'string',
                        'State':
                        'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'
                        |'STOP_FAILED',
                        'UserCount': 123
                    },
                ]
            }
          **Response Structure**

          - *(dict) --*

            - **NextToken** *(string) --*

              When you can get additional results from the ``ListServers`` operation, a
              ``NextToken`` parameter is returned in the output. In a following command, you can
              pass in the ``NextToken`` parameter to continue listing additional servers.

            - **Servers** *(list) --*

              An array of servers that were listed.

              - *(dict) --*

                Returns properties of the server that was specified.

                - **Arn** *(string) --*

                  The unique Amazon Resource Name (ARN) for the server to be listed.

                - **IdentityProviderType** *(string) --*

                  The authentication method used to validate a user for the server that was
                  specified. This can include Secure Shell (SSH), user name and password
                  combinations, or your own custom authentication method. Valid values include
                  ``SERVICE_MANAGED`` or ``API_GATEWAY`` .

                - **EndpointType** *(string) --*

                  The type of VPC endpoint that your SFTP server is connected to. If your SFTP
                  server is connected to a VPC endpoint, your server isn't accessible over the
                  public internet.

                - **LoggingRole** *(string) --*

                  The AWS Identity and Access Management entity that allows the server to turn on
                  Amazon CloudWatch logging.

                - **ServerId** *(string) --*

                  This value is the unique system assigned identifier for the SFTP servers that were
                  listed.

                - **State** *(string) --*

                  This property describes the condition of the SFTP server for the server that was
                  described. A value of ``ONLINE`` > indicates that the server can accept jobs and
                  transfer files. A ``State`` value of ``OFFLINE`` means that the server cannot
                  perform file transfer operations.

                  The states of ``STARTING`` and ``STOPPING`` indicate that the server is in an
                  intermediate state, either not fully able to respond, or not fully offline. The
                  values of ``START_FAILED`` or ``STOP_FAILED`` can indicate an error condition.

                - **UserCount** *(integer) --*

                  This property is a numeric value that indicates the number of users that are
                  assigned to the SFTP server you specified with the ``ServerId`` .
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def list_tags_for_resource(
        self, Arn: str, MaxResults: int = None, NextToken: str = None
    ) -> ClientListTagsForResourceResponseTypeDef:
        """
        Lists all of the tags associated with the Amazon Resource Number (ARN) you specify. The
        resource can be a user, server, or role.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListTagsForResource>`_

        **Request Syntax**
        ::

          response = client.list_tags_for_resource(
              Arn='string',
              MaxResults=123,
              NextToken='string'
          )
        :type Arn: string
        :param Arn: **[REQUIRED]**

          Requests the tags associated with a particular Amazon Resource Name (ARN). An ARN is an
          identifier for a specific AWS resource, such as a server, user, or role.

        :type MaxResults: integer
        :param MaxResults:

          Specifies the number of tags to return as a response to the ``ListTagsForResource``
          request.

        :type NextToken: string
        :param NextToken:

          When you request additional results from the ``ListTagsForResource`` operation, a
          ``NextToken`` parameter is returned in the input. You can then pass in a subsequent
          command to the ``NextToken`` parameter to continue listing additional tags.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'Arn': 'string',
                'NextToken': 'string',
                'Tags': [
                    {
                        'Key': 'string',
                        'Value': 'string'
                    },
                ]
            }
          **Response Structure**

          - *(dict) --*

            - **Arn** *(string) --*

              This value is the ARN you specified to list the tags of.

            - **NextToken** *(string) --*

              When you can get additional results from the ``ListTagsForResource`` call, a
              ``NextToken`` parameter is returned in the output. You can then pass in a subsequent
              command to the ``NextToken`` parameter to continue listing additional tags.

            - **Tags** *(list) --*

              Key-value pairs that are assigned to a resource, usually for the purpose of grouping
              and searching for items. Tags are metadata that you define.

              - *(dict) --*

                Creates a key-value pair for a specific resource. Tags are metadata that you can use
                to search for and group a resource for various purposes. You can apply tags to
                servers, users, and roles. A tag key can take more than one value. For example, to
                group servers for accounting purposes, you might create a tag called ``Group`` and
                assign the values ``Research`` and ``Accounting`` to that group.

                - **Key** *(string) --*

                  The name assigned to the tag that you create.

                - **Value** *(string) --*

                  This property contains one or more values that you assigned to the key name you
                  create.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def list_users(
        self, ServerId: str, MaxResults: int = None, NextToken: str = None
    ) -> ClientListUsersResponseTypeDef:
        """
        Lists the users for the server that you specify by passing the ``ServerId`` parameter.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListUsers>`_

        **Request Syntax**
        ::

          response = client.list_users(
              MaxResults=123,
              NextToken='string',
              ServerId='string'
          )
        :type MaxResults: integer
        :param MaxResults:

          Specifies the number of users to return as a response to the ``ListUsers`` request.

        :type NextToken: string
        :param NextToken:

          When you can get additional results from the ``ListUsers`` call, a ``NextToken`` parameter
          is returned in the output. You can then pass in a subsequent command to the ``NextToken``
          parameter to continue listing additional users.

        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for a Secure File Transfer Protocol (SFTP) server that
          has users assigned to it.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'NextToken': 'string',
                'ServerId': 'string',
                'Users': [
                    {
                        'Arn': 'string',
                        'HomeDirectory': 'string',
                        'HomeDirectoryType': 'PATH'|'LOGICAL',
                        'Role': 'string',
                        'SshPublicKeyCount': 123,
                        'UserName': 'string'
                    },
                ]
            }
          **Response Structure**

          - *(dict) --*

            - **NextToken** *(string) --*

              When you can get additional results from the ``ListUsers`` call, a ``NextToken``
              parameter is returned in the output. You can then pass in a subsequent command to the
              ``NextToken`` parameter to continue listing additional users.

            - **ServerId** *(string) --*

              A system-assigned unique identifier for an SFTP server that the users are assigned to.

            - **Users** *(list) --*

              Returns the user accounts and their properties for the ``ServerId`` value that you
              specify.

              - *(dict) --*

                Returns properties of the user that you specify.

                - **Arn** *(string) --*

                  This property is the unique Amazon Resource Name (ARN) for the user that you want
                  to learn about.

                - **HomeDirectory** *(string) --*

                  This value specifies the location that files are written to or read from an Amazon
                  S3 bucket for the user you specify by their ARN.

                - **HomeDirectoryType** *(string) --*

                  The type of landing directory (folder) you mapped for your users' home directory.
                  If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket paths
                  as is in their SFTP clients. If you set it ``LOGICAL`` , you will need to provide
                  mappings in the ``HomeDirectoryMappings`` for how you want to make S3 paths
                  visible to your user.

                - **Role** *(string) --*

                  The role in use by this user. A *role* is an AWS Identity and Access Management
                  (IAM) entity that, in this case, allows the SFTP server to act on a user's behalf.
                  It allows the server to inherit the trust relationship that enables that user to
                  perform file operations to their Amazon S3 bucket.

                - **SshPublicKeyCount** *(integer) --*

                  This value is the number of SSH public keys stored for the user you specified.

                - **UserName** *(string) --*

                  The name of the user whose ARN was specified. User names are used for
                  authentication purposes.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def start_server(self, ServerId: str) -> None:
        """
        Changes the state of a Secure File Transfer Protocol (SFTP) server from ``OFFLINE`` to
        ``ONLINE`` . It has no impact on an SFTP server that is already ``ONLINE`` . An ``ONLINE``
        server can accept and process file transfer jobs.

        The state of ``STARTING`` indicates that the server is in an intermediate state, either not
        fully able to respond, or not fully online. The values of ``START_FAILED`` can indicate an
        error condition.

        No response is returned from this call.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/StartServer>`_

        **Request Syntax**
        ::

          response = client.start_server(
              ServerId='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server that you start.

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def stop_server(self, ServerId: str) -> None:
        """
        Changes the state of an SFTP server from ``ONLINE`` to ``OFFLINE`` . An ``OFFLINE`` server
        cannot accept and process file transfer jobs. Information tied to your server such as server
        and user properties are not affected by stopping your server. Stopping a server will not
        reduce or impact your Secure File Transfer Protocol (SFTP) endpoint billing.

        The state of ``STOPPING`` indicates that the server is in an intermediate state, either not
        fully able to respond, or not fully offline. The values of ``STOP_FAILED`` can indicate an
        error condition.

        No response is returned from this call.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/StopServer>`_

        **Request Syntax**
        ::

          response = client.stop_server(
              ServerId='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server that you stopped.

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def tag_resource(self, Arn: str, Tags: List[ClientTagResourceTagsTypeDef]) -> None:
        """
        Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN).
        Resources are users, servers, roles, and other entities.

        There is no response returned from this call.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/TagResource>`_

        **Request Syntax**
        ::

          response = client.tag_resource(
              Arn='string',
              Tags=[
                  {
                      'Key': 'string',
                      'Value': 'string'
                  },
              ]
          )
        :type Arn: string
        :param Arn: **[REQUIRED]**

          An Amazon Resource Name (ARN) for a specific AWS resource, such as a server, user, or
          role.

        :type Tags: list
        :param Tags: **[REQUIRED]**

          Key-value pairs assigned to ARNs that you can use to group and search for resources by
          type. You can attach this metadata to user accounts for any purpose.

          - *(dict) --*

            Creates a key-value pair for a specific resource. Tags are metadata that you can use to
            search for and group a resource for various purposes. You can apply tags to servers,
            users, and roles. A tag key can take more than one value. For example, to group servers
            for accounting purposes, you might create a tag called ``Group`` and assign the values
            ``Research`` and ``Accounting`` to that group.

            - **Key** *(string) --* **[REQUIRED]**

              The name assigned to the tag that you create.

            - **Value** *(string) --* **[REQUIRED]**

              This property contains one or more values that you assigned to the key name you
              create.

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def test_identity_provider(
        self, ServerId: str, UserName: str, UserPassword: str = None
    ) -> ClientTestIdentityProviderResponseTypeDef:
        """
        If the ``IdentityProviderType`` of the server is ``API_Gateway`` , tests whether your API
        Gateway is set up successfully. We highly recommend that you call this operation to test
        your authentication method as soon as you create your server. By doing so, you can
        troubleshoot issues with the API Gateway integration to ensure that your users can
        successfully use the service.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/TestIdentityProvider>`_

        **Request Syntax**
        ::

          response = client.test_identity_provider(
              ServerId='string',
              UserName='string',
              UserPassword='string'
          )
        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned identifier for a specific server. That server's user authentication
          method is tested with a user name and password.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          This request parameter is the name of the user account to be tested.

        :type UserPassword: string
        :param UserPassword:

          The password of the user account to be tested.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'Response': 'string',
                'StatusCode': 123,
                'Message': 'string',
                'Url': 'string'
            }
          **Response Structure**

          - *(dict) --*

            - **Response** *(string) --*

              The response that is returned from your API Gateway.

            - **StatusCode** *(integer) --*

              The HTTP status code that is the response from your API Gateway.

            - **Message** *(string) --*

              A message that indicates whether the test was successful or not.

            - **Url** *(string) --*

              The endpoint of the service used to authenticate a user.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def untag_resource(self, Arn: str, TagKeys: List[str]) -> None:
        """
        Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN).
        Resources are users, servers, roles, and other entities.

        No response is returned from this call.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UntagResource>`_

        **Request Syntax**
        ::

          response = client.untag_resource(
              Arn='string',
              TagKeys=[
                  'string',
              ]
          )
        :type Arn: string
        :param Arn: **[REQUIRED]**

          This is the value of the resource that will have the tag removed. An Amazon Resource Name
          (ARN) is an identifier for a specific AWS resource, such as a server, user, or role.

        :type TagKeys: list
        :param TagKeys: **[REQUIRED]**

          TagKeys are key-value pairs assigned to ARNs that can be used to group and search for
          resources by type. This metadata can be attached to resources for any purpose.

          - *(string) --*

        :returns: None
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def update_server(
        self,
        ServerId: str,
        EndpointDetails: ClientUpdateServerEndpointDetailsTypeDef = None,
        EndpointType: Literal["PUBLIC", "VPC_ENDPOINT"] = None,
        HostKey: str = None,
        IdentityProviderDetails: ClientUpdateServerIdentityProviderDetailsTypeDef = None,
        LoggingRole: str = None,
    ) -> ClientUpdateServerResponseTypeDef:
        """
        Updates the server properties after that server has been created.

        The ``UpdateServer`` call returns the ``ServerId`` of the Secure File Transfer Protocol
        (SFTP) server you updated.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UpdateServer>`_

        **Request Syntax**
        ::

          response = client.update_server(
              EndpointDetails={
                  'VpcEndpointId': 'string'
              },
              EndpointType='PUBLIC'|'VPC_ENDPOINT',
              HostKey='string',
              IdentityProviderDetails={
                  'Url': 'string',
                  'InvocationRole': 'string'
              },
              LoggingRole='string',
              ServerId='string'
          )
        :type EndpointDetails: dict
        :param EndpointDetails:

          The virtual private cloud (VPC) endpoint settings that are configured for your SFTP
          server. With a VPC endpoint, your SFTP server isn't accessible over the public internet.

          - **VpcEndpointId** *(string) --*

            The ID of the VPC endpoint.

        :type EndpointType: string
        :param EndpointType:

          The type of endpoint that you want your SFTP server to connect to. You can choose to
          connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC
          endpoint, your SFTP server isn't accessible over the public internet.

        :type HostKey: string
        :param HostKey:

          The RSA private key as generated by ``ssh-keygen -N "" -f my-new-server-key`` .

          .. warning::

            If you aren't planning to migrate existing users from an existing SFTP server to a new
            AWS SFTP server, don't update the host key. Accidentally changing a server's host key
            can be disruptive.

          For more information, see
          "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
          in the *AWS SFTP User Guide.*

        :type IdentityProviderDetails: dict
        :param IdentityProviderDetails:

          This response parameter is an array containing all of the information required to call a
          customer's authentication API method.

          - **Url** *(string) --*

            The ``Url`` parameter provides contains the location of the service endpoint used to
            authenticate users.

          - **InvocationRole** *(string) --*

            The ``InvocationRole`` parameter provides the type of ``InvocationRole`` used to
            authenticate the user account.

        :type LoggingRole: string
        :param LoggingRole:

          A value that changes the AWS Identity and Access Management (IAM) role that allows Amazon
          S3 events to be logged in Amazon CloudWatch, turning logging on or off.

        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server instance that the user account is
          assigned to.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'ServerId': 'string'
            }
          **Response Structure**

          - *(dict) --*

            - **ServerId** *(string) --*

              A system-assigned unique identifier for an SFTP server that the user account is
              assigned to.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def update_user(
        self,
        ServerId: str,
        UserName: str,
        HomeDirectory: str = None,
        HomeDirectoryType: Literal["PATH", "LOGICAL"] = None,
        HomeDirectoryMappings: List[ClientUpdateUserHomeDirectoryMappingsTypeDef] = None,
        Policy: str = None,
        Role: str = None,
    ) -> ClientUpdateUserResponseTypeDef:
        """
        Assigns new properties to a user. Parameters you pass modify any or all of the following:
        the home directory, role, and policy for the ``UserName`` and ``ServerId`` you specify.

        The response returns the ``ServerId`` and the ``UserName`` for the updated user.

        See also: `AWS API Documentation
        <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UpdateUser>`_

        **Request Syntax**
        ::

          response = client.update_user(
              HomeDirectory='string',
              HomeDirectoryType='PATH'|'LOGICAL',
              HomeDirectoryMappings=[
                  {
                      'Entry': 'string',
                      'Target': 'string'
                  },
              ],
              Policy='string',
              Role='string',
              ServerId='string',
              UserName='string'
          )
        :type HomeDirectory: string
        :param HomeDirectory:

          A parameter that specifies the landing directory (folder) for a user when they log in to
          the server using their client.

          An example is ``<your-Amazon-S3-bucket-name>/home/username`` .

        :type HomeDirectoryType: string
        :param HomeDirectoryType:

          The type of landing directory (folder) you want your users' home directory to be when they
          log into the SFTP serve. If you set it to ``PATH`` , the user will see the absolute Amazon
          S3 bucket paths as is in their SFTP clients. If you set it ``LOGICAL`` , you will need to
          provide mappings in the ``HomeDirectoryMappings`` for how you want to make S3 paths
          visible to your user.

        :type HomeDirectoryMappings: list
        :param HomeDirectoryMappings:

          Logical directory mappings that specify what S3 paths and keys should be visible to your
          user and how you want to make them visible. You will need to specify the "``Entry`` " and
          "``Target`` " pair, where ``Entry`` shows how the path is made visible and ``Target`` is
          the actual S3 path. If you only specify a target, it will be displayed as is. You will
          need to also make sure that your AWS IAM Role provides access to paths in ``Target`` . The
          following is an example.

           ``'[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target":
           "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'``

          In most cases, you can use this value instead of the scope down policy to lock your user
          down to the designated home directory ("chroot"). To do this, you can set ``Entry`` to '/'
          and set ``Target`` to the HomeDirectory parameter value.

          - *(dict) --*

            Represents an object that contains entries and a targets for ``HomeDirectoryMappings`` .

            - **Entry** *(string) --* **[REQUIRED]**

              Represents an entry and a target for ``HomeDirectoryMappings`` .

            - **Target** *(string) --* **[REQUIRED]**

              Represents the map target that is used in a ``HomeDirectorymapEntry`` .

        :type Policy: string
        :param Policy:

          Allows you to supply a scope-down policy for your user so you can use the same AWS
          Identity and Access Management (IAM) role across multiple users. The policy scopes down
          user access to portions of your Amazon S3 bucket. Variables you can use inside this policy
          include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and
          ``${Transfer:HomeBucket}`` .

          .. note::

            For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON blob, instead
            of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and
            pass it in the ``Policy`` argument.

            For an example of a scope-down policy, see
            "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating
            a Scope-Down Policy.

            For more information, see
            "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html" in the *AWS
            Security Token Service API Reference* .

        :type Role: string
        :param Role:

          The IAM role that controls your user's access to your Amazon S3 bucket. The policies
          attached to this role will determine the level of access you want to provide your users
          when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role
          should also contain a trust relationship that allows the Secure File Transfer Protocol
          (SFTP) server to access your resources when servicing your SFTP user's transfer requests.

        :type ServerId: string
        :param ServerId: **[REQUIRED]**

          A system-assigned unique identifier for an SFTP server instance that the user account is
          assigned to.

        :type UserName: string
        :param UserName: **[REQUIRED]**

          A unique string that identifies a user and is associated with a server as specified by the
          ``ServerId`` . This is the string that will be used by your user when they log in to your
          SFTP server. This user name is a minimum of 3 and a maximum of 32 characters long. The
          following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can't
          start with a hyphen.

        :rtype: dict
        :returns:

          **Response Syntax**

          ::

            {
                'ServerId': 'string',
                'UserName': 'string'
            }
          **Response Structure**

          - *(dict) --*

             ``UpdateUserResponse`` returns the user name and server identifier for the request to
             update a user's properties.

            - **ServerId** *(string) --*

              A system-assigned unique identifier for an SFTP server instance that the user account
              is assigned to.

            - **UserName** *(string) --*

              The unique identifier for a user that is assigned to the SFTP server instance that was
              specified in the request.
        """

    @overload
    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def get_paginator(
        self, operation_name: Literal["list_servers"]
    ) -> paginator_scope.ListServersPaginator:
        """
        Get Paginator for `list_servers` operation.
        """

    # pylint: disable=arguments-differ,redefined-outer-name,redefined-builtin
    def get_paginator(self, operation_name: str) -> Boto3Paginator:
        """
        Create a paginator for an operation.

        :type operation_name: string
        :param operation_name: The operation name.  This is the same name
            as the method name on the client.  For example, if the
            method name is ``create_foo``, and you'd normally invoke the
            operation as ``client.create_foo(**kwargs)``, if the
            ``create_foo`` operation can be paginated, you can use the
            call ``client.get_paginator("create_foo")``.

        :raise OperationNotPageableError: Raised if the operation is not
            pageable.  You can use the ``client.can_paginate`` method to
            check if an operation is pageable.

        :rtype: L{botocore.paginate.Paginator}
        :return: A paginator object.
        """


class Exceptions:
    ClientError: Boto3ClientError
    InternalServiceError: Boto3ClientError
    InvalidNextTokenException: Boto3ClientError
    InvalidRequestException: Boto3ClientError
    ResourceExistsException: Boto3ClientError
    ResourceNotFoundException: Boto3ClientError
    ServiceUnavailableException: Boto3ClientError
    ThrottlingException: Boto3ClientError
