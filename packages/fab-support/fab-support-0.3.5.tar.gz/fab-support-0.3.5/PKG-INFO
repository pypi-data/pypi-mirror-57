Metadata-Version: 1.1
Name: fab-support
Version: 0.3.5
Summary: Implement staging in Fabric and recipes for pelican to [local, s3] and Django to Heroku.
Home-page: https://github.com/drummonds/fab_support
Author: Humphrey Drummond
Author-email: hum3@drummond.info
License: UNKNOWN
Description: fab_support - Simple Django Deployment
        ======================================
        
        .. image:: https://img.shields.io/pypi/v/fab_support.svg
                :target: https://pypi.python.org/pypi/fab_support
        
        .. image:: https://img.shields.io/travis/drummonds/fab_support.svg
                :target: https://travis-ci.org/drummonds/fab_support
        
        .. image:: https://readthedocs.org/projects/fab-support/badge/?version=latest
                :target: https://fab-support.readthedocs.io/en/latest/?badge=latest
                :alt: Documentation Status
        
        .. image:: https://pyup.io/repos/github/drummonds/fab_support/shield.svg
             :target: https://pyup.io/repos/github/drummonds/fab_support/
             :alt: Updates
        
        
        Making deployment of simple Django projects simple to heroku and dokku with fabric.  This implement staging so as to
        make it trivial to test your code eg
        
        .. code-block:: bash
        
            fab build_uat
        
        It supports a local .env file importing for storing secrets that you don't want to store in git.
        
        See the roadmap_ for current development.
        
        .. _roadmap:
            :target: https://drummonds.atlassian.net/secure/Roadmap.jspa?projectKey=FS&rapidView=1
        
        Stages
        ---------
        Stages are the different stages of development of an application.
        So they might go from:
        
        test â†’ dev â†’ uat â†’ production â†’ old production
        
        .. figure:: 2018-04-21staging.svg
            :alt: Use of staging
        
            Different stages of a single project
        
        
        I have create a fab-support.py which does the heavy lifting of creating, updating and destroying each environment.
        The aim is that this should
        be hardly any more than the use of fabric and much simpler than the use of a full featured build Salt_ or Ansible_.  This
        is really only if you fit one of the use cases.  Like Ansible this is a simple single master deployment system, unlike
        Ansible this is an opinated deployment of Django applications.
        
        
        .. _Salt: https://saltstack.com/
        .. _Ansible: https://www.ansible.com/
        
        Suitable use cases:
        
            - Simple Django to Heroku where you have at a minimum two stages eg UAT and Production.
                - Copes with Postgres database
                - Static data in AWS
        
            - Deployment of Pelican static website
                - Deployment to local file system for use with a file server
                - Deployment to local for a file based browser
                - Deployment to S3
        
        
        In the root fabfile create a dictionary like this which
        documents how to deploy each stage:
        
        .. code-block:: python
        
            from fabric.api import env
        
            # Definition of different environments to deploy to
            env['stages'] = {
                'localsite': {
                    'comment': 'stage: For serving locally on this computer via mongoose. ',
                    'config_file': 'local_conf.py',
                    'destination': 'C:/Sites/local.drummond.info',
                    'copy_method': copy_file,
                    'SITEURL': 'http://localhost:8042',
                },
                'production': {
                    'comment': 'stage: For serving on local file server',
                    'destination': '//10.0.0.1/web/www.drummond.info',
                    'config_file': 'local_conf.py',
                    'copy_method': copy_file,
                    'SITEURL': 'http://www.drummond.info',
            },
            }
        
        Then the deployment by Pelican is pretty standardised eg build deploy and you have commands such as:
        
        `fab localsite deploy`
        
        I think it was inspired by BreytenErnsting_.  This is then reimplemented using the standard env environment
        and support in Fabric.
        
        
        .. _BreytenErnsting: http://yerb.net/blog/2014/03/03/multiple-environments-for-deployment-using-fabric/
        
        * Free software: MIT license
        * Documentation: https://fab-support.readthedocs.io.
        
        Django configuration
        ====================
        
        The Django configuration includes the following features:
            - deployment to Heroku
            - Celery support with aqmp
            - Log trapping support with Papertrail
        
        Features
        --------
        Runs on Windows.  If it is getting to complex then it should probably be ported to Ansible or Salt.
        
        
        Credits
        -------
        
        This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.  Thanks Audrey
        
        .. _Cookiecutter: https://github.com/audreyr/cookiecutter
        .. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
        
        
        
        History
        =======
        
        0.3.0 (2019-11-12)
        ------------------
        This is actually a series of major breaking changes.
        
        * Changing from requirements.txt to pipenv for managing dependencies
        * Changing from predefined tasks to methods which can be used.  The
          destination eg heroku or dokku is abstracted into the definition of the stage.
        * Implementation of dokku alongside Heroku as a deployment platform
        
        .env to config.json
        ~~~~~~~~~~~~~~~~~~~
        This change is inspired by zappa which has a configuration file zappa.json.  Each environment has
        mostly the same list of environment variables (obviously with different values).  A hierachical
        data structure is a nice way to store these.
        
        Predefined tasks to methods
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        The previous methods meant that including tasks created lots of verbiage when you did `fab --list`
        In order to simplify the output I am now providing tools that need to be selected for your
        particular use case.
        
        The abstraction of the destination eg heroku or dokku into the stage is meant to make it
        really easy to use either platforms in a mixed deployment.
        
        Support for dokku
        ~~~~~~~~~~~~~~~~~
        I have started to use dokku for lower cost.  Heroku can still scale to a larger intances.
        
        requirements.txt to pipenv
        ~~~~~~~~~~~~~~~~~~~~~~~~~~
        I am using pipenv quite happily and find it easier to bundle up the dependencies and is quite widely
        supported eg on PyCharm.
        
        0.2.1 (2018-05-11)
        ------------------
        * Updating pelican commands to the parameter method of passing stage.
        
        Note tests were failing to a non obvious cause.  This was Heroku CLI needed updating to the latest version.
        I manually upgraded.
        
        0.2.0 (2018-04-20)
        ------------------
        * Change the way environment variables are passed through.
        
        In version 0.1 only the following variables were considered env variables:
        
        'DJANGO_SECRET_KEY', 'DJANGO_ADMIN_URL', 'DJANGO_AWS_ACCESS_KEY_ID', 'DJANGO_AWS_SECRET_ACCESS_KEY',
        'DJANGO_AWS_STORAGE_BUCKET_NAME', 'DJANGO_MAILGUN_API_KEY', 'DJANGO_SERVER_EMAIL', 'MAILGUN_SENDER_DOMAIN',
        'DJANGO_ACCOUNT_ALLOW_REGISTRATION', 'DJANGO_SENTRY_DSN', 'XERO_CONSUMER_SECRET', 'XERO_CONSUMER_KEY'
        
        Now there is an 'ENV' list of variables that allows any variables to be passed through and also for them to
        renamed on the way from the file .env
        
        0.1.0 (2018-02-04)
        ------------------
        
        * First release on PyPI.
        
Keywords: fab-support
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
