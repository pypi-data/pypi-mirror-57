# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str


class SWITCH(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class State(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'SWITCH.State': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['SWITCH.State']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'SWITCH.State']]: ...
        UNDEFINED = typing___cast('SWITCH.State', 0)
        OFF = typing___cast('SWITCH.State', 1)
        ON = typing___cast('SWITCH.State', 2)
    UNDEFINED = typing___cast('SWITCH.State', 0)
    OFF = typing___cast('SWITCH.State', 1)
    ON = typing___cast('SWITCH.State', 2)

    state = ... # type: SWITCH.State

    def __init__(self,
        *,
        state : typing___Optional[SWITCH.State] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: builtin___bytes) -> SWITCH: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"state"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"state",b"state"]) -> None: ...
