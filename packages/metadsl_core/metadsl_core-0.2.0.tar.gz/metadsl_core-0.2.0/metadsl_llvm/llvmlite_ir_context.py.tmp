"""
Dataflow based LLVMLite IR to create LLVMLite IR.
"""

from __future__ import annotations

import typing

from metadsl import *
from metadsl_core import *

from .llvmlite_ir import *


# We keep a context along as we build up modules, functions, and blocks
# This is so we can build them all up as we encounter new values
ModuleContext = Pair[Vec[Function], ModuleBuilder]
FunctionContext = Pair[FunctionBuilder, Vec[Function], ModuleBuilder]
BlockContext = Pair[BlockBuilder, Pair[FunctionContext, Vec[Block]]]
ValueContext = Pair[Value, BlockContext]


class ValueExpression(Expression):


    @expression
    def build(self, block_ctx: BlockContext) -> ValueContext:
        ...


    @expression
    def add(self, right: ValueExpression) -> ValueExpression:
        ...

    @expression
    def sub(self, right: ValueExpression) -> ValueExpression:
        ...

    @expression
    def cbranch(self, true: ValueExpression, false: ValueExpression) -> ValueExpression:
        ...

    @expression
    @classmethod
    def call(
        cls, functions: FunctionReference, args: Vec[ValueExpression]
    ) -> ValueExpression:
        ...

    @expression
    @classmethod
    def constant(cls, type: Type, args: typing.Any) -> ValueExpression:
        ...

    @expression
    def icmp_signed(self, operator: str, right: ValueExpression) -> ValueExpression:
        ...


@rule
def build_add(
    l_exp: ValueExpression, r_exp: ValueExpression, block_ctx: BlockContext
) -> R[ValueContext]:
    l, block_ctx = l_exp.build(block_ctx).spread
    r, block_ctx = r_exp.build(block_ctx).spread
    block_builder = block_ctx.left
    block_builder, res = block_builder.add(l, r).spread
    return (
        l_exp.add(r_exp).build(block_ctx),
        Pair.create(res, block_ctx.set_left(block_builder)),
    )


@rule
def build_icmp_signed(
    l_exp: ValueExpression,
    r_exp: ValueExpression,
    operator: str,
    block_ctx: BlockContext,
) -> R[ValueContext]:
    l, block_ctx = l_exp.build(block_ctx).spread
    r, block_ctx = r_exp.build(block_ctx).spread
    block_builder = block_ctx.left
    block_builder, res = block_builder.icmp_signed(operator, l, r).spread
    return (
        l_exp.icmp_signed(operator, r_exp).build(block_ctx),
        Pair.create(res, block_ctx.set_left(block_builder)),
    )


@rule
def build_cbranch(
    true_exp: ValueExpression, false_exp: ValueExpression, block_ctx: BlockContext
) -> R[ValueContext]:
    """
    Builds a cbranch from two expressions, by creating a block for the true and false
    expressions. In each block, it will store the result in a `phi` allocated memory.
    Then, there is a after block that will load from the phi memory.
    """
    # Get the current function builder
    block_builder, fn_ctx = block_ctx.spread
    fn_builder, mod_builder = fn_ctx.spread

    # add new block refs
    fn_builder, true_block_ref = BlockReference.create(
        "cbranch_true", fn_builder
    ).spread
    fn_builder, false_block_ref = BlockReference.create(
        "cbranch_false", fn_builder
    ).spread
    fn_builder, after_block_ref = BlockReference.create(
        "cbranch_after", fn_builder
    ).spread

    # Create builders for each
    true_block_builder = BlockBuilder.create(true_block_ref)
    false_block_builder = BlockBuilder.create(false_block_ref)
    after_block_builder = BlockBuilder.create(cbranch_after)

    # Create block context for true builder and build value

    l, block_ctx = true_exp.build(block_ctx).spread
    r, block_ctx = false_exp.build(block_ctx).spread
    block_builder = block_ctx.left
    block_builder, res = block_builder.icmp_signed(operator, l, r).spread
    return (
        l_exp.icmp_signed(operator, r_exp).build(block_ctx),
        Pair.create(res, block_ctx.set_left(block_builder)),
    )


@rule
def build_constant(
    tp: Type, value: typing.Any, block_ctx: BlockContext
) -> R[ValueContext]:
    return (
        ValueExpression.constant(tp, value).build(block_ctx),
        Pair.create(Value.constant(tp, value), block_ctx),
    )


