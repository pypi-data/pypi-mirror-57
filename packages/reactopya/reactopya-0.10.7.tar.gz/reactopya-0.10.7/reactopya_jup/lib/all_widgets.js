////////////////////////////////////////////////////////////////////
// This file is automatically generated
// Do not edit manually
////////////////////////////////////////////////////////////////////

var ReactopyaModel = require('./ReactopyaModel.js');
var widgets = require('@jupyter-widgets/base');
var _ = require('lodash');
const version = require('../package.json').version;

class ReactopyaJupyterWidgetModel extends widgets.DOMWidgetModel {
    initialize(attributes, options) {
        super.initialize(attributes, options);
        let that = this;
        
        this.listenTo(this, 'msg:custom', _.bind(this.handleMessage, this));
        this.reactopyaModel = null;
    }
    _initialize() {
        let that = this;
        const project_name = this.get('_project_name');
        const type = this.get('_type');
        const initialChildren = this.get('_initial_children', []);
        
        this.reactopyaModel = new ReactopyaModel(project_name, type);
        this.reactopyaModel.addChildModelsFromSerializedChildren(initialChildren);
     
        // important to do this before adding the handler below (don't want to send these messages)
        this.reactopyaModel.onJavaScriptStateChanged(function(state) {
            that.send({
                name: 'setJavaScriptState',
                state: state
            });
        });

        this.reactopyaModel.onSendCustomMessage(function(msg) {
            that.send({
                name: 'customMessage',
                message: msg
            });
        });

        // important that this comes after we have added the initial children to the model
        this.reactopyaModel.onChildModelAdded(function(data) {
            that.send({
                name: 'addChild',
                data: data
            });
        });
    }
    handleMessage(content) {
        const name = content.name;
        if (name == 'initialize') {
            this._initialize();
        }
        else if (name == 'setPythonState') {
            let state = content.state;
            this.reactopyaModel.setPythonState(state);
        }
        else if (name == 'customMessage') {
            let message = content.message;
            this.reactopyaModel.handleCustomMessage(message);
        }
        else {
            console.error(`Unregognized message in Model: ${name}`);
        }
    }
    defaults() {
        return _.extend(widgets.DOMWidgetModel.prototype.defaults(), {
            _model_name : 'ReactopyaJupyterWidgetModel',
            _view_name : 'ReactopyaJupyterWidgetView',
            _model_module : 'reactopya_jup',
            _view_module : 'reactopya_jup',
            _model_module_version : version,
            _view_module_version : version,

            _project_name: 'unknown',
            _type: 'unknown',
            _props: {},
            _key: '',
            _initial_children: []
        });
    }
}

// Custom View. Renders the widget model.
class ReactopyaJupyterWidgetView extends widgets.DOMWidgetView {
    initialize(parameters) {
        super.initialize(parameters);
    }
    render() {
        this.div=document.createElement('div');
        this.el.appendChild(this.div);

        const project_name = this.model.get('_project_name');
        const type = this.model.get('_type');
        let props = this.model.get('_props', {});
        let key = this.model.get('_key');
        let initial_children = this.model.get('_initial_children', []);

        window.reactopya.widgets[project_name][type].render(
            this.div,
            initial_children,
            props,
            key || undefined,
            this.model.reactopyaModel
        );
    }
}

module.exports = {
    ReactopyaJupyterWidgetModel: ReactopyaJupyterWidgetModel,
    ReactopyaJupyterWidgetView: ReactopyaJupyterWidgetView
};