# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sense_data.stock_pb2 as stock__pb2


class StockInfStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_stock_price_tick = channel.unary_unary(
        '/StockInf/get_stock_price_tick',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_stock_price_day = channel.unary_unary(
        '/StockInf/get_stock_price_day',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_company_info = channel.unary_unary(
        '/StockInf/get_company_info',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_industry_concept = channel.unary_unary(
        '/StockInf/get_industry_concept',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_company_alias = channel.unary_unary(
        '/StockInf/get_company_alias',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_chairman_supervisor = channel.unary_unary(
        '/StockInf/get_chairman_supervisor',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_stockholder = channel.unary_unary(
        '/StockInf/get_stockholder',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_subcompany = channel.unary_unary(
        '/StockInf/get_subcompany',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_trade_date = channel.unary_unary(
        '/StockInf/get_trade_date',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_market_rise_fall = channel.unary_unary(
        '/StockInf/get_market_rise_fall',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_industry_rise_fall = channel.unary_unary(
        '/StockInf/get_industry_rise_fall',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_concept_rise_fall = channel.unary_unary(
        '/StockInf/get_concept_rise_fall',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_entity_role = channel.unary_unary(
        '/StockInf/get_entity_role',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_financial_info = channel.unary_unary(
        '/StockInf/get_financial_info',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_total_shares = channel.unary_unary(
        '/StockInf/get_total_shares',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_company_name = channel.unary_unary(
        '/StockInf/get_company_name',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_title_code = channel.unary_unary(
        '/StockInf/get_title_code',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_actual_control_person = channel.unary_unary(
        '/StockInf/get_actual_control_person',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_code_by_name = channel.unary_unary(
        '/StockInf/get_code_by_name',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_detail_info_by_name = channel.unary_unary(
        '/StockInf/get_detail_info_by_name',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_multi_market_info_by_name = channel.unary_unary(
        '/StockInf/get_multi_market_info_by_name',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_main_market_info_by_name = channel.unary_unary(
        '/StockInf/get_main_market_info_by_name',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_market_info_by_stock_code = channel.unary_unary(
        '/StockInf/get_market_info_by_stock_code',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_company_role_info = channel.unary_unary(
        '/StockInf/get_company_role_info',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )
    self.get_infos_by_terms = channel.unary_unary(
        '/StockInf/get_infos_by_terms',
        request_serializer=stock__pb2.Request.SerializeToString,
        response_deserializer=stock__pb2.Reply.FromString,
        )


class StockInfServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_stock_price_tick(self, request, context):
    """输入股票代码返回最新一天股票价格信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_stock_price_day(self, request, context):
    """输入股票代码返回历史股价信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_company_info(self, request, context):
    """输入股票代码返回基础数据信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_industry_concept(self, request, context):
    """输入股票代码返回行业/概念信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_company_alias(self, request, context):
    """输入股票代码返回名称
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_chairman_supervisor(self, request, context):
    """输入股票代码返回董监高
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_stockholder(self, request, context):
    """输入股票代码返回股东信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_subcompany(self, request, context):
    """输入股票代码返回子公司信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_trade_date(self, request, context):
    """输入当前时间戳返回上个收盘日期
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_market_rise_fall(self, request, context):
    """输出市场涨跌幅（中小板、创业板、深市主板和沪市主板）
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_industry_rise_fall(self, request, context):
    """输出行业涨跌幅
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_concept_rise_fall(self, request, context):
    """输出概念涨跌幅
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_entity_role(self, request, context):
    """给实体输出相关上市公司信息及他们的关系
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_financial_info(self, request, context):
    """给股票代码输出前端财务信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_total_shares(self, request, context):
    """给公司代码输出total_shares
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_company_name(self, request, context):
    """给公司代码输出total_shares
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_title_code(self, request, context):
    """输入字符串标题匹配返回股票代码or[]
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_actual_control_person(self, request, context):
    """输入股票代码返回实控人名字
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_code_by_name(self, request, context):
    """输入公司名字返回公司code,plate,full_name
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_detail_info_by_name(self, request, context):
    """输入公司名字返回公司redis中的other_name结构
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_multi_market_info_by_name(self, request, context):
    """输入别名返回多市场信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_main_market_info_by_name(self, request, context):
    """输入别名返回主市场信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_market_info_by_stock_code(self, request, context):
    """输入别名返回主市场信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_company_role_info(self, request, context):
    """输入股票代码返回相关人员和公司和该公司的相关关系
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_infos_by_terms(self, request, context):
    """输入公司名称列表，返回所有公司代码全称信息
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StockInfServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_stock_price_tick': grpc.unary_unary_rpc_method_handler(
          servicer.get_stock_price_tick,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_stock_price_day': grpc.unary_unary_rpc_method_handler(
          servicer.get_stock_price_day,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_company_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_company_info,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_industry_concept': grpc.unary_unary_rpc_method_handler(
          servicer.get_industry_concept,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_company_alias': grpc.unary_unary_rpc_method_handler(
          servicer.get_company_alias,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_chairman_supervisor': grpc.unary_unary_rpc_method_handler(
          servicer.get_chairman_supervisor,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_stockholder': grpc.unary_unary_rpc_method_handler(
          servicer.get_stockholder,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_subcompany': grpc.unary_unary_rpc_method_handler(
          servicer.get_subcompany,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_trade_date': grpc.unary_unary_rpc_method_handler(
          servicer.get_trade_date,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_market_rise_fall': grpc.unary_unary_rpc_method_handler(
          servicer.get_market_rise_fall,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_industry_rise_fall': grpc.unary_unary_rpc_method_handler(
          servicer.get_industry_rise_fall,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_concept_rise_fall': grpc.unary_unary_rpc_method_handler(
          servicer.get_concept_rise_fall,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_entity_role': grpc.unary_unary_rpc_method_handler(
          servicer.get_entity_role,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_financial_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_financial_info,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_total_shares': grpc.unary_unary_rpc_method_handler(
          servicer.get_total_shares,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_company_name': grpc.unary_unary_rpc_method_handler(
          servicer.get_company_name,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_title_code': grpc.unary_unary_rpc_method_handler(
          servicer.get_title_code,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_actual_control_person': grpc.unary_unary_rpc_method_handler(
          servicer.get_actual_control_person,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_code_by_name': grpc.unary_unary_rpc_method_handler(
          servicer.get_code_by_name,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_detail_info_by_name': grpc.unary_unary_rpc_method_handler(
          servicer.get_detail_info_by_name,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_multi_market_info_by_name': grpc.unary_unary_rpc_method_handler(
          servicer.get_multi_market_info_by_name,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_main_market_info_by_name': grpc.unary_unary_rpc_method_handler(
          servicer.get_main_market_info_by_name,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_market_info_by_stock_code': grpc.unary_unary_rpc_method_handler(
          servicer.get_market_info_by_stock_code,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_company_role_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_company_role_info,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
      'get_infos_by_terms': grpc.unary_unary_rpc_method_handler(
          servicer.get_infos_by_terms,
          request_deserializer=stock__pb2.Request.FromString,
          response_serializer=stock__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'StockInf', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
