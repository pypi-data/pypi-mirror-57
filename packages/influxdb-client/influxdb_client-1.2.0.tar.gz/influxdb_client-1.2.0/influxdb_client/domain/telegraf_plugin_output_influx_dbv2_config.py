# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TelegrafPluginOutputInfluxDBV2Config(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'urls': 'list[str]',
        'token': 'str',
        'organization': 'str',
        'bucket': 'str'
    }

    attribute_map = {
        'urls': 'urls',
        'token': 'token',
        'organization': 'organization',
        'bucket': 'bucket'
    }

    def __init__(self, urls=None, token=None, organization=None, bucket=None):  # noqa: E501
        """TelegrafPluginOutputInfluxDBV2Config - a model defined in OpenAPI"""  # noqa: E501

        self._urls = None
        self._token = None
        self._organization = None
        self._bucket = None
        self.discriminator = None

        self.urls = urls
        self.token = token
        self.organization = organization
        self.bucket = bucket

    @property
    def urls(self):
        """Gets the urls of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501


        :return: The urls of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this TelegrafPluginOutputInfluxDBV2Config.


        :param urls: The urls of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :type: list[str]
        """
        if urls is None:
            raise ValueError("Invalid value for `urls`, must not be `None`")  # noqa: E501

        self._urls = urls

    @property
    def token(self):
        """Gets the token of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501


        :return: The token of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TelegrafPluginOutputInfluxDBV2Config.


        :param token: The token of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def organization(self):
        """Gets the organization of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501


        :return: The organization of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this TelegrafPluginOutputInfluxDBV2Config.


        :param organization: The organization of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def bucket(self):
        """Gets the bucket of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501


        :return: The bucket of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this TelegrafPluginOutputInfluxDBV2Config.


        :param bucket: The bucket of this TelegrafPluginOutputInfluxDBV2Config.  # noqa: E501
        :type: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")  # noqa: E501

        self._bucket = bucket

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TelegrafPluginOutputInfluxDBV2Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
