"Main interface for ec2 service type defs"
from __future__ import annotations

from datetime import datetime
import sys
from typing import Any, List

if sys.version_info >= (3, 8):
    from typing import Literal
else:
    from typing_extensions import Literal
if sys.version_info >= (3, 8):
    from typing import TypedDict
else:
    from typing_extensions import TypedDict


BundleTaskCompleteWaitFiltersTypeDef = TypedDict(
    "BundleTaskCompleteWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

BundleTaskCompleteWaitWaiterConfigTypeDef = TypedDict(
    "BundleTaskCompleteWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

ClassicAddressAssociateResponseTypeDef = TypedDict(
    "ClassicAddressAssociateResponseTypeDef", {"AssociationId": str}, total=False
)

ClientAcceptReservedInstancesExchangeQuoteResponseTypeDef = TypedDict(
    "ClientAcceptReservedInstancesExchangeQuoteResponseTypeDef", {"ExchangeId": str}, total=False
)

ClientAcceptReservedInstancesExchangeQuoteTargetConfigurationsTypeDef = TypedDict(
    "ClientAcceptReservedInstancesExchangeQuoteTargetConfigurationsTypeDef",
    {"InstanceCount": int, "OfferingId": str},
    total=False,
)

ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef = TypedDict(
    "ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef = TypedDict(
    "ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef = TypedDict(
    "ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef = TypedDict(
    "ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef = TypedDict(
    "ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "RequesterTgwInfo": ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef,
        "AccepterTgwInfo": ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef,
        "Status": ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "CreationTime": datetime,
        "Tags": List[
            ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientAcceptTransitGatewayPeeringAttachmentResponseTypeDef = TypedDict(
    "ClientAcceptTransitGatewayPeeringAttachmentResponseTypeDef",
    {
        "TransitGatewayPeeringAttachment": ClientAcceptTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef
    },
    total=False,
)

ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef = TypedDict(
    "ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef = TypedDict(
    "ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef,
        "Tags": List[
            ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientAcceptTransitGatewayVpcAttachmentResponseTypeDef = TypedDict(
    "ClientAcceptTransitGatewayVpcAttachmentResponseTypeDef",
    {
        "TransitGatewayVpcAttachment": ClientAcceptTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef
    },
    total=False,
)

ClientAcceptVpcEndpointConnectionsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientAcceptVpcEndpointConnectionsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientAcceptVpcEndpointConnectionsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientAcceptVpcEndpointConnectionsResponseUnsuccessfulTypeDef",
    {
        "Error": ClientAcceptVpcEndpointConnectionsResponseUnsuccessfulErrorTypeDef,
        "ResourceId": str,
    },
    total=False,
)

ClientAcceptVpcEndpointConnectionsResponseTypeDef = TypedDict(
    "ClientAcceptVpcEndpointConnectionsResponseTypeDef",
    {"Unsuccessful": List[ClientAcceptVpcEndpointConnectionsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionStatusTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionStatusTypeDef",
    {
        "Code": Literal[
            "initiating-request",
            "pending-acceptance",
            "active",
            "deleted",
            "rejected",
            "failed",
            "expired",
            "provisioning",
            "deleting",
        ],
        "Message": str,
    },
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionTagsTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionTypeDef",
    {
        "AccepterVpcInfo": ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoTypeDef,
        "ExpirationTime": datetime,
        "RequesterVpcInfo": ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoTypeDef,
        "Status": ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionStatusTypeDef,
        "Tags": List[ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionTagsTypeDef],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientAcceptVpcPeeringConnectionResponseTypeDef = TypedDict(
    "ClientAcceptVpcPeeringConnectionResponseTypeDef",
    {"VpcPeeringConnection": ClientAcceptVpcPeeringConnectionResponseVpcPeeringConnectionTypeDef},
    total=False,
)

ClientAdvertiseByoipCidrResponseByoipCidrTypeDef = TypedDict(
    "ClientAdvertiseByoipCidrResponseByoipCidrTypeDef",
    {
        "Cidr": str,
        "Description": str,
        "StatusMessage": str,
        "State": Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
        ],
    },
    total=False,
)

ClientAdvertiseByoipCidrResponseTypeDef = TypedDict(
    "ClientAdvertiseByoipCidrResponseTypeDef",
    {"ByoipCidr": ClientAdvertiseByoipCidrResponseByoipCidrTypeDef},
    total=False,
)

ClientAllocateAddressResponseTypeDef = TypedDict(
    "ClientAllocateAddressResponseTypeDef",
    {
        "PublicIp": str,
        "AllocationId": str,
        "PublicIpv4Pool": str,
        "NetworkBorderGroup": str,
        "Domain": Literal["vpc", "standard"],
        "CustomerOwnedIp": str,
        "CustomerOwnedIpv4Pool": str,
    },
    total=False,
)

ClientAllocateHostsResponseTypeDef = TypedDict(
    "ClientAllocateHostsResponseTypeDef", {"HostIds": List[str]}, total=False
)

ClientAllocateHostsTagSpecificationsTagsTypeDef = TypedDict(
    "ClientAllocateHostsTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientAllocateHostsTagSpecificationsTypeDef = TypedDict(
    "ClientAllocateHostsTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientAllocateHostsTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientApplySecurityGroupsToClientVpnTargetNetworkResponseTypeDef = TypedDict(
    "ClientApplySecurityGroupsToClientVpnTargetNetworkResponseTypeDef",
    {"SecurityGroupIds": List[str]},
    total=False,
)

ClientAssignIpv6AddressesResponseTypeDef = TypedDict(
    "ClientAssignIpv6AddressesResponseTypeDef",
    {"AssignedIpv6Addresses": List[str], "NetworkInterfaceId": str},
    total=False,
)

ClientAssignPrivateIpAddressesResponseAssignedPrivateIpAddressesTypeDef = TypedDict(
    "ClientAssignPrivateIpAddressesResponseAssignedPrivateIpAddressesTypeDef",
    {"PrivateIpAddress": str},
    total=False,
)

ClientAssignPrivateIpAddressesResponseTypeDef = TypedDict(
    "ClientAssignPrivateIpAddressesResponseTypeDef",
    {
        "NetworkInterfaceId": str,
        "AssignedPrivateIpAddresses": List[
            ClientAssignPrivateIpAddressesResponseAssignedPrivateIpAddressesTypeDef
        ],
    },
    total=False,
)

ClientAssociateAddressResponseTypeDef = TypedDict(
    "ClientAssociateAddressResponseTypeDef", {"AssociationId": str}, total=False
)

ClientAssociateClientVpnTargetNetworkResponseStatusTypeDef = TypedDict(
    "ClientAssociateClientVpnTargetNetworkResponseStatusTypeDef",
    {
        "Code": Literal[
            "associating", "associated", "association-failed", "disassociating", "disassociated"
        ],
        "Message": str,
    },
    total=False,
)

ClientAssociateClientVpnTargetNetworkResponseTypeDef = TypedDict(
    "ClientAssociateClientVpnTargetNetworkResponseTypeDef",
    {"AssociationId": str, "Status": ClientAssociateClientVpnTargetNetworkResponseStatusTypeDef},
    total=False,
)

ClientAssociateIamInstanceProfileIamInstanceProfileTypeDef = TypedDict(
    "ClientAssociateIamInstanceProfileIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientAssociateIamInstanceProfileResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef = TypedDict(
    "ClientAssociateIamInstanceProfileResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

ClientAssociateIamInstanceProfileResponseIamInstanceProfileAssociationTypeDef = TypedDict(
    "ClientAssociateIamInstanceProfileResponseIamInstanceProfileAssociationTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "IamInstanceProfile": ClientAssociateIamInstanceProfileResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
        "Timestamp": datetime,
    },
    total=False,
)

ClientAssociateIamInstanceProfileResponseTypeDef = TypedDict(
    "ClientAssociateIamInstanceProfileResponseTypeDef",
    {
        "IamInstanceProfileAssociation": ClientAssociateIamInstanceProfileResponseIamInstanceProfileAssociationTypeDef
    },
    total=False,
)

ClientAssociateRouteTableResponseAssociationStateTypeDef = TypedDict(
    "ClientAssociateRouteTableResponseAssociationStateTypeDef",
    {
        "State": Literal["associating", "associated", "disassociating", "disassociated", "failed"],
        "StatusMessage": str,
    },
    total=False,
)

ClientAssociateRouteTableResponseTypeDef = TypedDict(
    "ClientAssociateRouteTableResponseTypeDef",
    {
        "AssociationId": str,
        "AssociationState": ClientAssociateRouteTableResponseAssociationStateTypeDef,
    },
    total=False,
)

ClientAssociateSubnetCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientAssociateSubnetCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientAssociateSubnetCidrBlockResponseIpv6CidrBlockAssociationTypeDef = TypedDict(
    "ClientAssociateSubnetCidrBlockResponseIpv6CidrBlockAssociationTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientAssociateSubnetCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef,
    },
    total=False,
)

ClientAssociateSubnetCidrBlockResponseTypeDef = TypedDict(
    "ClientAssociateSubnetCidrBlockResponseTypeDef",
    {
        "Ipv6CidrBlockAssociation": ClientAssociateSubnetCidrBlockResponseIpv6CidrBlockAssociationTypeDef,
        "SubnetId": str,
    },
    total=False,
)

ClientAssociateTransitGatewayMulticastDomainResponseAssociationsSubnetsTypeDef = TypedDict(
    "ClientAssociateTransitGatewayMulticastDomainResponseAssociationsSubnetsTypeDef",
    {
        "SubnetId": str,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientAssociateTransitGatewayMulticastDomainResponseAssociationsTypeDef = TypedDict(
    "ClientAssociateTransitGatewayMulticastDomainResponseAssociationsTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "Subnets": List[
            ClientAssociateTransitGatewayMulticastDomainResponseAssociationsSubnetsTypeDef
        ],
    },
    total=False,
)

ClientAssociateTransitGatewayMulticastDomainResponseTypeDef = TypedDict(
    "ClientAssociateTransitGatewayMulticastDomainResponseTypeDef",
    {"Associations": ClientAssociateTransitGatewayMulticastDomainResponseAssociationsTypeDef},
    total=False,
)

ClientAssociateTransitGatewayRouteTableResponseAssociationTypeDef = TypedDict(
    "ClientAssociateTransitGatewayRouteTableResponseAssociationTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientAssociateTransitGatewayRouteTableResponseTypeDef = TypedDict(
    "ClientAssociateTransitGatewayRouteTableResponseTypeDef",
    {"Association": ClientAssociateTransitGatewayRouteTableResponseAssociationTypeDef},
    total=False,
)

ClientAssociateVpcCidrBlockResponseCidrBlockAssociationCidrBlockStateTypeDef = TypedDict(
    "ClientAssociateVpcCidrBlockResponseCidrBlockAssociationCidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientAssociateVpcCidrBlockResponseCidrBlockAssociationTypeDef = TypedDict(
    "ClientAssociateVpcCidrBlockResponseCidrBlockAssociationTypeDef",
    {
        "AssociationId": str,
        "CidrBlock": str,
        "CidrBlockState": ClientAssociateVpcCidrBlockResponseCidrBlockAssociationCidrBlockStateTypeDef,
    },
    total=False,
)

ClientAssociateVpcCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientAssociateVpcCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientAssociateVpcCidrBlockResponseIpv6CidrBlockAssociationTypeDef = TypedDict(
    "ClientAssociateVpcCidrBlockResponseIpv6CidrBlockAssociationTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientAssociateVpcCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef,
        "NetworkBorderGroup": str,
    },
    total=False,
)

ClientAssociateVpcCidrBlockResponseTypeDef = TypedDict(
    "ClientAssociateVpcCidrBlockResponseTypeDef",
    {
        "Ipv6CidrBlockAssociation": ClientAssociateVpcCidrBlockResponseIpv6CidrBlockAssociationTypeDef,
        "CidrBlockAssociation": ClientAssociateVpcCidrBlockResponseCidrBlockAssociationTypeDef,
        "VpcId": str,
    },
    total=False,
)

ClientAttachClassicLinkVpcResponseTypeDef = TypedDict(
    "ClientAttachClassicLinkVpcResponseTypeDef", {"Return": bool}, total=False
)

ClientAttachNetworkInterfaceResponseTypeDef = TypedDict(
    "ClientAttachNetworkInterfaceResponseTypeDef", {"AttachmentId": str}, total=False
)

ClientAttachVolumeResponseTypeDef = TypedDict(
    "ClientAttachVolumeResponseTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

ClientAttachVpnGatewayResponseVpcAttachmentTypeDef = TypedDict(
    "ClientAttachVpnGatewayResponseVpcAttachmentTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientAttachVpnGatewayResponseTypeDef = TypedDict(
    "ClientAttachVpnGatewayResponseTypeDef",
    {"VpcAttachment": ClientAttachVpnGatewayResponseVpcAttachmentTypeDef},
    total=False,
)

ClientAuthorizeClientVpnIngressResponseStatusTypeDef = TypedDict(
    "ClientAuthorizeClientVpnIngressResponseStatusTypeDef",
    {"Code": Literal["authorizing", "active", "failed", "revoking"], "Message": str},
    total=False,
)

ClientAuthorizeClientVpnIngressResponseTypeDef = TypedDict(
    "ClientAuthorizeClientVpnIngressResponseTypeDef",
    {"Status": ClientAuthorizeClientVpnIngressResponseStatusTypeDef},
    total=False,
)

ClientAuthorizeSecurityGroupEgressIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupEgressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientAuthorizeSecurityGroupEgressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupEgressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientAuthorizeSecurityGroupEgressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupEgressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientAuthorizeSecurityGroupEgressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupEgressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientAuthorizeSecurityGroupEgressIpPermissionsTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupEgressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[ClientAuthorizeSecurityGroupEgressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[ClientAuthorizeSecurityGroupEgressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[ClientAuthorizeSecurityGroupEgressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientAuthorizeSecurityGroupEgressIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientAuthorizeSecurityGroupIngressIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupIngressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientAuthorizeSecurityGroupIngressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupIngressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientAuthorizeSecurityGroupIngressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupIngressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientAuthorizeSecurityGroupIngressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupIngressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientAuthorizeSecurityGroupIngressIpPermissionsTypeDef = TypedDict(
    "ClientAuthorizeSecurityGroupIngressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[ClientAuthorizeSecurityGroupIngressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[ClientAuthorizeSecurityGroupIngressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[ClientAuthorizeSecurityGroupIngressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientAuthorizeSecurityGroupIngressIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientBundleInstanceResponseBundleTaskBundleTaskErrorTypeDef = TypedDict(
    "ClientBundleInstanceResponseBundleTaskBundleTaskErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientBundleInstanceResponseBundleTaskStorageS3TypeDef = TypedDict(
    "ClientBundleInstanceResponseBundleTaskStorageS3TypeDef",
    {
        "AWSAccessKeyId": str,
        "Bucket": str,
        "Prefix": str,
        "UploadPolicy": bytes,
        "UploadPolicySignature": str,
    },
    total=False,
)

ClientBundleInstanceResponseBundleTaskStorageTypeDef = TypedDict(
    "ClientBundleInstanceResponseBundleTaskStorageTypeDef",
    {"S3": ClientBundleInstanceResponseBundleTaskStorageS3TypeDef},
    total=False,
)

ClientBundleInstanceResponseBundleTaskTypeDef = TypedDict(
    "ClientBundleInstanceResponseBundleTaskTypeDef",
    {
        "BundleId": str,
        "BundleTaskError": ClientBundleInstanceResponseBundleTaskBundleTaskErrorTypeDef,
        "InstanceId": str,
        "Progress": str,
        "StartTime": datetime,
        "State": Literal[
            "pending",
            "waiting-for-shutdown",
            "bundling",
            "storing",
            "cancelling",
            "complete",
            "failed",
        ],
        "Storage": ClientBundleInstanceResponseBundleTaskStorageTypeDef,
        "UpdateTime": datetime,
    },
    total=False,
)

ClientBundleInstanceResponseTypeDef = TypedDict(
    "ClientBundleInstanceResponseTypeDef",
    {"BundleTask": ClientBundleInstanceResponseBundleTaskTypeDef},
    total=False,
)

ClientBundleInstanceStorageS3TypeDef = TypedDict(
    "ClientBundleInstanceStorageS3TypeDef",
    {
        "AWSAccessKeyId": str,
        "Bucket": str,
        "Prefix": str,
        "UploadPolicy": bytes,
        "UploadPolicySignature": str,
    },
    total=False,
)

ClientBundleInstanceStorageTypeDef = TypedDict(
    "ClientBundleInstanceStorageTypeDef", {"S3": ClientBundleInstanceStorageS3TypeDef}, total=False
)

ClientCancelBundleTaskResponseBundleTaskBundleTaskErrorTypeDef = TypedDict(
    "ClientCancelBundleTaskResponseBundleTaskBundleTaskErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientCancelBundleTaskResponseBundleTaskStorageS3TypeDef = TypedDict(
    "ClientCancelBundleTaskResponseBundleTaskStorageS3TypeDef",
    {
        "AWSAccessKeyId": str,
        "Bucket": str,
        "Prefix": str,
        "UploadPolicy": bytes,
        "UploadPolicySignature": str,
    },
    total=False,
)

ClientCancelBundleTaskResponseBundleTaskStorageTypeDef = TypedDict(
    "ClientCancelBundleTaskResponseBundleTaskStorageTypeDef",
    {"S3": ClientCancelBundleTaskResponseBundleTaskStorageS3TypeDef},
    total=False,
)

ClientCancelBundleTaskResponseBundleTaskTypeDef = TypedDict(
    "ClientCancelBundleTaskResponseBundleTaskTypeDef",
    {
        "BundleId": str,
        "BundleTaskError": ClientCancelBundleTaskResponseBundleTaskBundleTaskErrorTypeDef,
        "InstanceId": str,
        "Progress": str,
        "StartTime": datetime,
        "State": Literal[
            "pending",
            "waiting-for-shutdown",
            "bundling",
            "storing",
            "cancelling",
            "complete",
            "failed",
        ],
        "Storage": ClientCancelBundleTaskResponseBundleTaskStorageTypeDef,
        "UpdateTime": datetime,
    },
    total=False,
)

ClientCancelBundleTaskResponseTypeDef = TypedDict(
    "ClientCancelBundleTaskResponseTypeDef",
    {"BundleTask": ClientCancelBundleTaskResponseBundleTaskTypeDef},
    total=False,
)

ClientCancelCapacityReservationResponseTypeDef = TypedDict(
    "ClientCancelCapacityReservationResponseTypeDef", {"Return": bool}, total=False
)

ClientCancelImportTaskResponseTypeDef = TypedDict(
    "ClientCancelImportTaskResponseTypeDef",
    {"ImportTaskId": str, "PreviousState": str, "State": str},
    total=False,
)

ClientCancelReservedInstancesListingResponseReservedInstancesListingsInstanceCountsTypeDef = TypedDict(
    "ClientCancelReservedInstancesListingResponseReservedInstancesListingsInstanceCountsTypeDef",
    {"InstanceCount": int, "State": Literal["available", "sold", "cancelled", "pending"]},
    total=False,
)

ClientCancelReservedInstancesListingResponseReservedInstancesListingsPriceSchedulesTypeDef = TypedDict(
    "ClientCancelReservedInstancesListingResponseReservedInstancesListingsPriceSchedulesTypeDef",
    {"Active": bool, "CurrencyCode": str, "Price": float, "Term": int},
    total=False,
)

ClientCancelReservedInstancesListingResponseReservedInstancesListingsTagsTypeDef = TypedDict(
    "ClientCancelReservedInstancesListingResponseReservedInstancesListingsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCancelReservedInstancesListingResponseReservedInstancesListingsTypeDef = TypedDict(
    "ClientCancelReservedInstancesListingResponseReservedInstancesListingsTypeDef",
    {
        "ClientToken": str,
        "CreateDate": datetime,
        "InstanceCounts": List[
            ClientCancelReservedInstancesListingResponseReservedInstancesListingsInstanceCountsTypeDef
        ],
        "PriceSchedules": List[
            ClientCancelReservedInstancesListingResponseReservedInstancesListingsPriceSchedulesTypeDef
        ],
        "ReservedInstancesId": str,
        "ReservedInstancesListingId": str,
        "Status": Literal["active", "pending", "cancelled", "closed"],
        "StatusMessage": str,
        "Tags": List[
            ClientCancelReservedInstancesListingResponseReservedInstancesListingsTagsTypeDef
        ],
        "UpdateDate": datetime,
    },
    total=False,
)

ClientCancelReservedInstancesListingResponseTypeDef = TypedDict(
    "ClientCancelReservedInstancesListingResponseTypeDef",
    {
        "ReservedInstancesListings": List[
            ClientCancelReservedInstancesListingResponseReservedInstancesListingsTypeDef
        ]
    },
    total=False,
)

ClientCancelSpotFleetRequestsResponseSuccessfulFleetRequestsTypeDef = TypedDict(
    "ClientCancelSpotFleetRequestsResponseSuccessfulFleetRequestsTypeDef",
    {
        "CurrentSpotFleetRequestState": Literal[
            "submitted",
            "active",
            "cancelled",
            "failed",
            "cancelled_running",
            "cancelled_terminating",
            "modifying",
        ],
        "PreviousSpotFleetRequestState": Literal[
            "submitted",
            "active",
            "cancelled",
            "failed",
            "cancelled_running",
            "cancelled_terminating",
            "modifying",
        ],
        "SpotFleetRequestId": str,
    },
    total=False,
)

ClientCancelSpotFleetRequestsResponseUnsuccessfulFleetRequestsErrorTypeDef = TypedDict(
    "ClientCancelSpotFleetRequestsResponseUnsuccessfulFleetRequestsErrorTypeDef",
    {
        "Code": Literal[
            "fleetRequestIdDoesNotExist",
            "fleetRequestIdMalformed",
            "fleetRequestNotInCancellableState",
            "unexpectedError",
        ],
        "Message": str,
    },
    total=False,
)

ClientCancelSpotFleetRequestsResponseUnsuccessfulFleetRequestsTypeDef = TypedDict(
    "ClientCancelSpotFleetRequestsResponseUnsuccessfulFleetRequestsTypeDef",
    {
        "Error": ClientCancelSpotFleetRequestsResponseUnsuccessfulFleetRequestsErrorTypeDef,
        "SpotFleetRequestId": str,
    },
    total=False,
)

ClientCancelSpotFleetRequestsResponseTypeDef = TypedDict(
    "ClientCancelSpotFleetRequestsResponseTypeDef",
    {
        "SuccessfulFleetRequests": List[
            ClientCancelSpotFleetRequestsResponseSuccessfulFleetRequestsTypeDef
        ],
        "UnsuccessfulFleetRequests": List[
            ClientCancelSpotFleetRequestsResponseUnsuccessfulFleetRequestsTypeDef
        ],
    },
    total=False,
)

ClientCancelSpotInstanceRequestsResponseCancelledSpotInstanceRequestsTypeDef = TypedDict(
    "ClientCancelSpotInstanceRequestsResponseCancelledSpotInstanceRequestsTypeDef",
    {
        "SpotInstanceRequestId": str,
        "State": Literal["active", "open", "closed", "cancelled", "completed"],
    },
    total=False,
)

ClientCancelSpotInstanceRequestsResponseTypeDef = TypedDict(
    "ClientCancelSpotInstanceRequestsResponseTypeDef",
    {
        "CancelledSpotInstanceRequests": List[
            ClientCancelSpotInstanceRequestsResponseCancelledSpotInstanceRequestsTypeDef
        ]
    },
    total=False,
)

ClientConfirmProductInstanceResponseTypeDef = TypedDict(
    "ClientConfirmProductInstanceResponseTypeDef", {"OwnerId": str, "Return": bool}, total=False
)

ClientCopyFpgaImageResponseTypeDef = TypedDict(
    "ClientCopyFpgaImageResponseTypeDef", {"FpgaImageId": str}, total=False
)

ClientCopyImageResponseTypeDef = TypedDict(
    "ClientCopyImageResponseTypeDef", {"ImageId": str}, total=False
)

ClientCopySnapshotResponseTagsTypeDef = TypedDict(
    "ClientCopySnapshotResponseTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCopySnapshotResponseTypeDef = TypedDict(
    "ClientCopySnapshotResponseTypeDef",
    {"SnapshotId": str, "Tags": List[ClientCopySnapshotResponseTagsTypeDef]},
    total=False,
)

ClientCopySnapshotTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCopySnapshotTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCopySnapshotTagSpecificationsTypeDef = TypedDict(
    "ClientCopySnapshotTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCopySnapshotTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateCapacityReservationResponseCapacityReservationTagsTypeDef = TypedDict(
    "ClientCreateCapacityReservationResponseCapacityReservationTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateCapacityReservationResponseCapacityReservationTypeDef = TypedDict(
    "ClientCreateCapacityReservationResponseCapacityReservationTypeDef",
    {
        "CapacityReservationId": str,
        "OwnerId": str,
        "CapacityReservationArn": str,
        "AvailabilityZoneId": str,
        "InstanceType": str,
        "InstancePlatform": Literal[
            "Linux/UNIX",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux with SQL Server Enterprise",
        ],
        "AvailabilityZone": str,
        "Tenancy": Literal["default", "dedicated"],
        "TotalInstanceCount": int,
        "AvailableInstanceCount": int,
        "EbsOptimized": bool,
        "EphemeralStorage": bool,
        "State": Literal["active", "expired", "cancelled", "pending", "failed"],
        "EndDate": datetime,
        "EndDateType": Literal["unlimited", "limited"],
        "InstanceMatchCriteria": Literal["open", "targeted"],
        "CreateDate": datetime,
        "Tags": List[ClientCreateCapacityReservationResponseCapacityReservationTagsTypeDef],
    },
    total=False,
)

ClientCreateCapacityReservationResponseTypeDef = TypedDict(
    "ClientCreateCapacityReservationResponseTypeDef",
    {"CapacityReservation": ClientCreateCapacityReservationResponseCapacityReservationTypeDef},
    total=False,
)

ClientCreateCapacityReservationTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateCapacityReservationTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateCapacityReservationTagSpecificationsTypeDef = TypedDict(
    "ClientCreateCapacityReservationTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateCapacityReservationTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateClientVpnEndpointAuthenticationOptionsActiveDirectoryTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointAuthenticationOptionsActiveDirectoryTypeDef",
    {"DirectoryId": str},
    total=False,
)

ClientCreateClientVpnEndpointAuthenticationOptionsMutualAuthenticationTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointAuthenticationOptionsMutualAuthenticationTypeDef",
    {"ClientRootCertificateChainArn": str},
    total=False,
)

ClientCreateClientVpnEndpointAuthenticationOptionsTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointAuthenticationOptionsTypeDef",
    {
        "Type": Literal["certificate-authentication", "directory-service-authentication"],
        "ActiveDirectory": ClientCreateClientVpnEndpointAuthenticationOptionsActiveDirectoryTypeDef,
        "MutualAuthentication": ClientCreateClientVpnEndpointAuthenticationOptionsMutualAuthenticationTypeDef,
    },
    total=False,
)

ClientCreateClientVpnEndpointConnectionLogOptionsTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointConnectionLogOptionsTypeDef",
    {"Enabled": bool, "CloudwatchLogGroup": str, "CloudwatchLogStream": str},
    total=False,
)

ClientCreateClientVpnEndpointResponseStatusTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointResponseStatusTypeDef",
    {"Code": Literal["pending-associate", "available", "deleting", "deleted"], "Message": str},
    total=False,
)

ClientCreateClientVpnEndpointResponseTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointResponseTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Status": ClientCreateClientVpnEndpointResponseStatusTypeDef,
        "DnsName": str,
    },
    total=False,
)

ClientCreateClientVpnEndpointTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateClientVpnEndpointTagSpecificationsTypeDef = TypedDict(
    "ClientCreateClientVpnEndpointTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateClientVpnEndpointTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateClientVpnRouteResponseStatusTypeDef = TypedDict(
    "ClientCreateClientVpnRouteResponseStatusTypeDef",
    {"Code": Literal["creating", "active", "failed", "deleting"], "Message": str},
    total=False,
)

ClientCreateClientVpnRouteResponseTypeDef = TypedDict(
    "ClientCreateClientVpnRouteResponseTypeDef",
    {"Status": ClientCreateClientVpnRouteResponseStatusTypeDef},
    total=False,
)

ClientCreateCustomerGatewayResponseCustomerGatewayTagsTypeDef = TypedDict(
    "ClientCreateCustomerGatewayResponseCustomerGatewayTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateCustomerGatewayResponseCustomerGatewayTypeDef = TypedDict(
    "ClientCreateCustomerGatewayResponseCustomerGatewayTypeDef",
    {
        "BgpAsn": str,
        "CustomerGatewayId": str,
        "IpAddress": str,
        "CertificateArn": str,
        "State": str,
        "Type": str,
        "DeviceName": str,
        "Tags": List[ClientCreateCustomerGatewayResponseCustomerGatewayTagsTypeDef],
    },
    total=False,
)

ClientCreateCustomerGatewayResponseTypeDef = TypedDict(
    "ClientCreateCustomerGatewayResponseTypeDef",
    {"CustomerGateway": ClientCreateCustomerGatewayResponseCustomerGatewayTypeDef},
    total=False,
)

ClientCreateDefaultSubnetResponseSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientCreateDefaultSubnetResponseSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateDefaultSubnetResponseSubnetIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "ClientCreateDefaultSubnetResponseSubnetIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientCreateDefaultSubnetResponseSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
    },
    total=False,
)

ClientCreateDefaultSubnetResponseSubnetTagsTypeDef = TypedDict(
    "ClientCreateDefaultSubnetResponseSubnetTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateDefaultSubnetResponseSubnetTypeDef = TypedDict(
    "ClientCreateDefaultSubnetResponseSubnetTypeDef",
    {
        "AvailabilityZone": str,
        "AvailabilityZoneId": str,
        "AvailableIpAddressCount": int,
        "CidrBlock": str,
        "DefaultForAz": bool,
        "MapPublicIpOnLaunch": bool,
        "State": Literal["pending", "available"],
        "SubnetId": str,
        "VpcId": str,
        "OwnerId": str,
        "AssignIpv6AddressOnCreation": bool,
        "Ipv6CidrBlockAssociationSet": List[
            ClientCreateDefaultSubnetResponseSubnetIpv6CidrBlockAssociationSetTypeDef
        ],
        "Tags": List[ClientCreateDefaultSubnetResponseSubnetTagsTypeDef],
        "SubnetArn": str,
        "OutpostArn": str,
    },
    total=False,
)

ClientCreateDefaultSubnetResponseTypeDef = TypedDict(
    "ClientCreateDefaultSubnetResponseTypeDef",
    {"Subnet": ClientCreateDefaultSubnetResponseSubnetTypeDef},
    total=False,
)

ClientCreateDefaultVpcResponseVpcCidrBlockAssociationSetCidrBlockStateTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseVpcCidrBlockAssociationSetCidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateDefaultVpcResponseVpcCidrBlockAssociationSetTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseVpcCidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "CidrBlock": str,
        "CidrBlockState": ClientCreateDefaultVpcResponseVpcCidrBlockAssociationSetCidrBlockStateTypeDef,
    },
    total=False,
)

ClientCreateDefaultVpcResponseVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateDefaultVpcResponseVpcIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseVpcIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientCreateDefaultVpcResponseVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
        "NetworkBorderGroup": str,
    },
    total=False,
)

ClientCreateDefaultVpcResponseVpcTagsTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseVpcTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateDefaultVpcResponseVpcTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseVpcTypeDef",
    {
        "CidrBlock": str,
        "DhcpOptionsId": str,
        "State": Literal["pending", "available"],
        "VpcId": str,
        "OwnerId": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "Ipv6CidrBlockAssociationSet": List[
            ClientCreateDefaultVpcResponseVpcIpv6CidrBlockAssociationSetTypeDef
        ],
        "CidrBlockAssociationSet": List[
            ClientCreateDefaultVpcResponseVpcCidrBlockAssociationSetTypeDef
        ],
        "IsDefault": bool,
        "Tags": List[ClientCreateDefaultVpcResponseVpcTagsTypeDef],
    },
    total=False,
)

ClientCreateDefaultVpcResponseTypeDef = TypedDict(
    "ClientCreateDefaultVpcResponseTypeDef",
    {"Vpc": ClientCreateDefaultVpcResponseVpcTypeDef},
    total=False,
)

ClientCreateDhcpOptionsDhcpConfigurationsTypeDef = TypedDict(
    "ClientCreateDhcpOptionsDhcpConfigurationsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)

ClientCreateDhcpOptionsResponseDhcpOptionsDhcpConfigurationsValuesTypeDef = TypedDict(
    "ClientCreateDhcpOptionsResponseDhcpOptionsDhcpConfigurationsValuesTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateDhcpOptionsResponseDhcpOptionsDhcpConfigurationsTypeDef = TypedDict(
    "ClientCreateDhcpOptionsResponseDhcpOptionsDhcpConfigurationsTypeDef",
    {
        "Key": str,
        "Values": List[ClientCreateDhcpOptionsResponseDhcpOptionsDhcpConfigurationsValuesTypeDef],
    },
    total=False,
)

ClientCreateDhcpOptionsResponseDhcpOptionsTagsTypeDef = TypedDict(
    "ClientCreateDhcpOptionsResponseDhcpOptionsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateDhcpOptionsResponseDhcpOptionsTypeDef = TypedDict(
    "ClientCreateDhcpOptionsResponseDhcpOptionsTypeDef",
    {
        "DhcpConfigurations": List[
            ClientCreateDhcpOptionsResponseDhcpOptionsDhcpConfigurationsTypeDef
        ],
        "DhcpOptionsId": str,
        "OwnerId": str,
        "Tags": List[ClientCreateDhcpOptionsResponseDhcpOptionsTagsTypeDef],
    },
    total=False,
)

ClientCreateDhcpOptionsResponseTypeDef = TypedDict(
    "ClientCreateDhcpOptionsResponseTypeDef",
    {"DhcpOptions": ClientCreateDhcpOptionsResponseDhcpOptionsTypeDef},
    total=False,
)

ClientCreateEgressOnlyInternetGatewayResponseEgressOnlyInternetGatewayAttachmentsTypeDef = TypedDict(
    "ClientCreateEgressOnlyInternetGatewayResponseEgressOnlyInternetGatewayAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientCreateEgressOnlyInternetGatewayResponseEgressOnlyInternetGatewayTypeDef = TypedDict(
    "ClientCreateEgressOnlyInternetGatewayResponseEgressOnlyInternetGatewayTypeDef",
    {
        "Attachments": List[
            ClientCreateEgressOnlyInternetGatewayResponseEgressOnlyInternetGatewayAttachmentsTypeDef
        ],
        "EgressOnlyInternetGatewayId": str,
    },
    total=False,
)

ClientCreateEgressOnlyInternetGatewayResponseTypeDef = TypedDict(
    "ClientCreateEgressOnlyInternetGatewayResponseTypeDef",
    {
        "ClientToken": str,
        "EgressOnlyInternetGateway": ClientCreateEgressOnlyInternetGatewayResponseEgressOnlyInternetGatewayTypeDef,
    },
    total=False,
)

ClientCreateFleetLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientCreateFleetLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientCreateFleetLaunchTemplateConfigsOverridesPlacementTypeDef = TypedDict(
    "ClientCreateFleetLaunchTemplateConfigsOverridesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientCreateFleetLaunchTemplateConfigsOverridesTypeDef = TypedDict(
    "ClientCreateFleetLaunchTemplateConfigsOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": ClientCreateFleetLaunchTemplateConfigsOverridesPlacementTypeDef,
    },
    total=False,
)

ClientCreateFleetLaunchTemplateConfigsTypeDef = TypedDict(
    "ClientCreateFleetLaunchTemplateConfigsTypeDef",
    {
        "LaunchTemplateSpecification": ClientCreateFleetLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef,
        "Overrides": List[ClientCreateFleetLaunchTemplateConfigsOverridesTypeDef],
    },
    total=False,
)

ClientCreateFleetOnDemandOptionsTypeDef = TypedDict(
    "ClientCreateFleetOnDemandOptionsTypeDef",
    {
        "AllocationStrategy": Literal["lowest-price", "prioritized"],
        "SingleInstanceType": bool,
        "SingleAvailabilityZone": bool,
        "MinTargetCapacity": int,
        "MaxTotalPrice": str,
    },
    total=False,
)

ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef = TypedDict(
    "ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesOverridesTypeDef = TypedDict(
    "ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef,
    },
    total=False,
)

ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesTypeDef = TypedDict(
    "ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesTypeDef",
    {
        "LaunchTemplateSpecification": ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef,
        "Overrides": ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesOverridesTypeDef,
    },
    total=False,
)

ClientCreateFleetResponseErrorsTypeDef = TypedDict(
    "ClientCreateFleetResponseErrorsTypeDef",
    {
        "LaunchTemplateAndOverrides": ClientCreateFleetResponseErrorsLaunchTemplateAndOverridesTypeDef,
        "Lifecycle": Literal["spot", "on-demand"],
        "ErrorCode": str,
        "ErrorMessage": str,
    },
    total=False,
)

ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef = TypedDict(
    "ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesOverridesTypeDef = TypedDict(
    "ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef,
    },
    total=False,
)

ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesTypeDef = TypedDict(
    "ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesTypeDef",
    {
        "LaunchTemplateSpecification": ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef,
        "Overrides": ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesOverridesTypeDef,
    },
    total=False,
)

ClientCreateFleetResponseInstancesTypeDef = TypedDict(
    "ClientCreateFleetResponseInstancesTypeDef",
    {
        "LaunchTemplateAndOverrides": ClientCreateFleetResponseInstancesLaunchTemplateAndOverridesTypeDef,
        "Lifecycle": Literal["spot", "on-demand"],
        "InstanceIds": List[str],
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Platform": str,
    },
    total=False,
)

ClientCreateFleetResponseTypeDef = TypedDict(
    "ClientCreateFleetResponseTypeDef",
    {
        "FleetId": str,
        "Errors": List[ClientCreateFleetResponseErrorsTypeDef],
        "Instances": List[ClientCreateFleetResponseInstancesTypeDef],
    },
    total=False,
)

ClientCreateFleetSpotOptionsTypeDef = TypedDict(
    "ClientCreateFleetSpotOptionsTypeDef",
    {
        "AllocationStrategy": Literal["lowest-price", "diversified", "capacity-optimized"],
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
        "InstancePoolsToUseCount": int,
        "SingleInstanceType": bool,
        "SingleAvailabilityZone": bool,
        "MinTargetCapacity": int,
        "MaxTotalPrice": str,
    },
    total=False,
)

ClientCreateFleetTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateFleetTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateFleetTagSpecificationsTypeDef = TypedDict(
    "ClientCreateFleetTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateFleetTagSpecificationsTagsTypeDef],
    },
    total=False,
)

_RequiredClientCreateFleetTargetCapacitySpecificationTypeDef = TypedDict(
    "_RequiredClientCreateFleetTargetCapacitySpecificationTypeDef", {"TotalTargetCapacity": int}
)
_OptionalClientCreateFleetTargetCapacitySpecificationTypeDef = TypedDict(
    "_OptionalClientCreateFleetTargetCapacitySpecificationTypeDef",
    {
        "OnDemandTargetCapacity": int,
        "SpotTargetCapacity": int,
        "DefaultTargetCapacityType": Literal["spot", "on-demand"],
    },
    total=False,
)


class ClientCreateFleetTargetCapacitySpecificationTypeDef(
    _RequiredClientCreateFleetTargetCapacitySpecificationTypeDef,
    _OptionalClientCreateFleetTargetCapacitySpecificationTypeDef,
):
    pass


ClientCreateFlowLogsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientCreateFlowLogsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientCreateFlowLogsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientCreateFlowLogsResponseUnsuccessfulTypeDef",
    {"Error": ClientCreateFlowLogsResponseUnsuccessfulErrorTypeDef, "ResourceId": str},
    total=False,
)

ClientCreateFlowLogsResponseTypeDef = TypedDict(
    "ClientCreateFlowLogsResponseTypeDef",
    {
        "ClientToken": str,
        "FlowLogIds": List[str],
        "Unsuccessful": List[ClientCreateFlowLogsResponseUnsuccessfulTypeDef],
    },
    total=False,
)

ClientCreateFpgaImageInputStorageLocationTypeDef = TypedDict(
    "ClientCreateFpgaImageInputStorageLocationTypeDef", {"Bucket": str, "Key": str}, total=False
)

ClientCreateFpgaImageLogsStorageLocationTypeDef = TypedDict(
    "ClientCreateFpgaImageLogsStorageLocationTypeDef", {"Bucket": str, "Key": str}, total=False
)

ClientCreateFpgaImageResponseTypeDef = TypedDict(
    "ClientCreateFpgaImageResponseTypeDef",
    {"FpgaImageId": str, "FpgaImageGlobalId": str},
    total=False,
)

ClientCreateFpgaImageTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateFpgaImageTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateFpgaImageTagSpecificationsTypeDef = TypedDict(
    "ClientCreateFpgaImageTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateFpgaImageTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateImageBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientCreateImageBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientCreateImageBlockDeviceMappingsTypeDef = TypedDict(
    "ClientCreateImageBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientCreateImageBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientCreateImageResponseTypeDef = TypedDict(
    "ClientCreateImageResponseTypeDef", {"ImageId": str}, total=False
)

ClientCreateInstanceExportTaskExportToS3TaskTypeDef = TypedDict(
    "ClientCreateInstanceExportTaskExportToS3TaskTypeDef",
    {
        "ContainerFormat": str,
        "DiskImageFormat": Literal["VMDK", "RAW", "VHD"],
        "S3Bucket": str,
        "S3Prefix": str,
    },
    total=False,
)

ClientCreateInstanceExportTaskResponseExportTaskExportToS3TaskTypeDef = TypedDict(
    "ClientCreateInstanceExportTaskResponseExportTaskExportToS3TaskTypeDef",
    {
        "ContainerFormat": str,
        "DiskImageFormat": Literal["VMDK", "RAW", "VHD"],
        "S3Bucket": str,
        "S3Key": str,
    },
    total=False,
)

ClientCreateInstanceExportTaskResponseExportTaskInstanceExportDetailsTypeDef = TypedDict(
    "ClientCreateInstanceExportTaskResponseExportTaskInstanceExportDetailsTypeDef",
    {"InstanceId": str, "TargetEnvironment": Literal["citrix", "vmware", "microsoft"]},
    total=False,
)

ClientCreateInstanceExportTaskResponseExportTaskTypeDef = TypedDict(
    "ClientCreateInstanceExportTaskResponseExportTaskTypeDef",
    {
        "Description": str,
        "ExportTaskId": str,
        "ExportToS3Task": ClientCreateInstanceExportTaskResponseExportTaskExportToS3TaskTypeDef,
        "InstanceExportDetails": ClientCreateInstanceExportTaskResponseExportTaskInstanceExportDetailsTypeDef,
        "State": Literal["active", "cancelling", "cancelled", "completed"],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateInstanceExportTaskResponseTypeDef = TypedDict(
    "ClientCreateInstanceExportTaskResponseTypeDef",
    {"ExportTask": ClientCreateInstanceExportTaskResponseExportTaskTypeDef},
    total=False,
)

ClientCreateInternetGatewayResponseInternetGatewayAttachmentsTypeDef = TypedDict(
    "ClientCreateInternetGatewayResponseInternetGatewayAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientCreateInternetGatewayResponseInternetGatewayTagsTypeDef = TypedDict(
    "ClientCreateInternetGatewayResponseInternetGatewayTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateInternetGatewayResponseInternetGatewayTypeDef = TypedDict(
    "ClientCreateInternetGatewayResponseInternetGatewayTypeDef",
    {
        "Attachments": List[ClientCreateInternetGatewayResponseInternetGatewayAttachmentsTypeDef],
        "InternetGatewayId": str,
        "OwnerId": str,
        "Tags": List[ClientCreateInternetGatewayResponseInternetGatewayTagsTypeDef],
    },
    total=False,
)

ClientCreateInternetGatewayResponseTypeDef = TypedDict(
    "ClientCreateInternetGatewayResponseTypeDef",
    {"InternetGateway": ClientCreateInternetGatewayResponseInternetGatewayTypeDef},
    total=False,
)

ClientCreateKeyPairResponseTypeDef = TypedDict(
    "ClientCreateKeyPairResponseTypeDef",
    {"KeyFingerprint": str, "KeyMaterial": str, "KeyName": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataBlockDeviceMappingsEbsTypeDef",
    {
        "Encrypted": bool,
        "DeleteOnTermination": bool,
        "Iops": int,
        "KmsKeyId": str,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataBlockDeviceMappingsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientCreateLaunchTemplateLaunchTemplateDataBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientCreateLaunchTemplateLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataCpuOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataCreditSpecificationTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataCreditSpecificationTypeDef",
    {"CpuCredits": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataElasticGpuSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataElasticGpuSpecificationsTypeDef",
    {"Type": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataElasticInferenceAcceleratorsTypeDef",
    {"Type": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataHibernationOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataIamInstanceProfileTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataInstanceMarketOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": ClientCreateLaunchTemplateLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataLicenseSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataMonitoringTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataMonitoringTypeDef", {"Enabled": bool}, total=False
)

ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "InterfaceType": str,
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataPlacementTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataTagSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateLaunchTemplateLaunchTemplateDataTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateLaunchTemplateLaunchTemplateDataTypeDef = TypedDict(
    "ClientCreateLaunchTemplateLaunchTemplateDataTypeDef",
    {
        "KernelId": str,
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientCreateLaunchTemplateLaunchTemplateDataIamInstanceProfileTypeDef,
        "BlockDeviceMappings": List[
            ClientCreateLaunchTemplateLaunchTemplateDataBlockDeviceMappingsTypeDef
        ],
        "NetworkInterfaces": List[
            ClientCreateLaunchTemplateLaunchTemplateDataNetworkInterfacesTypeDef
        ],
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KeyName": str,
        "Monitoring": ClientCreateLaunchTemplateLaunchTemplateDataMonitoringTypeDef,
        "Placement": ClientCreateLaunchTemplateLaunchTemplateDataPlacementTypeDef,
        "RamDiskId": str,
        "DisableApiTermination": bool,
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "UserData": str,
        "TagSpecifications": List[
            ClientCreateLaunchTemplateLaunchTemplateDataTagSpecificationsTypeDef
        ],
        "ElasticGpuSpecifications": List[
            ClientCreateLaunchTemplateLaunchTemplateDataElasticGpuSpecificationsTypeDef
        ],
        "ElasticInferenceAccelerators": List[
            ClientCreateLaunchTemplateLaunchTemplateDataElasticInferenceAcceleratorsTypeDef
        ],
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "InstanceMarketOptions": ClientCreateLaunchTemplateLaunchTemplateDataInstanceMarketOptionsTypeDef,
        "CreditSpecification": ClientCreateLaunchTemplateLaunchTemplateDataCreditSpecificationTypeDef,
        "CpuOptions": ClientCreateLaunchTemplateLaunchTemplateDataCpuOptionsTypeDef,
        "CapacityReservationSpecification": ClientCreateLaunchTemplateLaunchTemplateDataCapacityReservationSpecificationTypeDef,
        "LicenseSpecifications": List[
            ClientCreateLaunchTemplateLaunchTemplateDataLicenseSpecificationsTypeDef
        ],
        "HibernationOptions": ClientCreateLaunchTemplateLaunchTemplateDataHibernationOptionsTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateResponseLaunchTemplateTagsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateResponseLaunchTemplateTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateLaunchTemplateResponseLaunchTemplateTypeDef = TypedDict(
    "ClientCreateLaunchTemplateResponseLaunchTemplateTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersionNumber": int,
        "LatestVersionNumber": int,
        "Tags": List[ClientCreateLaunchTemplateResponseLaunchTemplateTagsTypeDef],
    },
    total=False,
)

ClientCreateLaunchTemplateResponseTypeDef = TypedDict(
    "ClientCreateLaunchTemplateResponseTypeDef",
    {"LaunchTemplate": ClientCreateLaunchTemplateResponseLaunchTemplateTypeDef},
    total=False,
)

ClientCreateLaunchTemplateTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateLaunchTemplateTagSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateLaunchTemplateTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsEbsTypeDef",
    {
        "Encrypted": bool,
        "DeleteOnTermination": bool,
        "Iops": int,
        "KmsKeyId": str,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientCreateLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientCreateLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataCpuOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataCreditSpecificationTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataCreditSpecificationTypeDef",
    {"CpuCredits": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataElasticGpuSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataElasticGpuSpecificationsTypeDef",
    {"Type": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataElasticInferenceAcceleratorsTypeDef",
    {"Type": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataHibernationOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataIamInstanceProfileTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": ClientCreateLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataLicenseSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataMonitoringTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "InterfaceType": str,
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataPlacementTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionLaunchTemplateDataTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionLaunchTemplateDataTypeDef",
    {
        "KernelId": str,
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientCreateLaunchTemplateVersionLaunchTemplateDataIamInstanceProfileTypeDef,
        "BlockDeviceMappings": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsTypeDef
        ],
        "NetworkInterfaces": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesTypeDef
        ],
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KeyName": str,
        "Monitoring": ClientCreateLaunchTemplateVersionLaunchTemplateDataMonitoringTypeDef,
        "Placement": ClientCreateLaunchTemplateVersionLaunchTemplateDataPlacementTypeDef,
        "RamDiskId": str,
        "DisableApiTermination": bool,
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "UserData": str,
        "TagSpecifications": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTypeDef
        ],
        "ElasticGpuSpecifications": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataElasticGpuSpecificationsTypeDef
        ],
        "ElasticInferenceAccelerators": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataElasticInferenceAcceleratorsTypeDef
        ],
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "InstanceMarketOptions": ClientCreateLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsTypeDef,
        "CreditSpecification": ClientCreateLaunchTemplateVersionLaunchTemplateDataCreditSpecificationTypeDef,
        "CpuOptions": ClientCreateLaunchTemplateVersionLaunchTemplateDataCpuOptionsTypeDef,
        "CapacityReservationSpecification": ClientCreateLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationTypeDef,
        "LicenseSpecifications": List[
            ClientCreateLaunchTemplateVersionLaunchTemplateDataLicenseSpecificationsTypeDef
        ],
        "HibernationOptions": ClientCreateLaunchTemplateVersionLaunchTemplateDataHibernationOptionsTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsEbsTypeDef",
    {
        "Encrypted": bool,
        "DeleteOnTermination": bool,
        "Iops": int,
        "KmsKeyId": str,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCpuOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCreditSpecificationTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCreditSpecificationTypeDef",
    {"CpuCredits": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataElasticGpuSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataElasticGpuSpecificationsTypeDef",
    {"Type": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataElasticInferenceAcceleratorsTypeDef",
    {"Type": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataHibernationOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataIamInstanceProfileTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataLicenseSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataMonitoringTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "InterfaceType": str,
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataPlacementTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTypeDef",
    {
        "KernelId": str,
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataIamInstanceProfileTypeDef,
        "BlockDeviceMappings": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataBlockDeviceMappingsTypeDef
        ],
        "NetworkInterfaces": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataNetworkInterfacesTypeDef
        ],
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KeyName": str,
        "Monitoring": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataMonitoringTypeDef,
        "Placement": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataPlacementTypeDef,
        "RamDiskId": str,
        "DisableApiTermination": bool,
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "UserData": str,
        "TagSpecifications": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTagSpecificationsTypeDef
        ],
        "ElasticGpuSpecifications": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataElasticGpuSpecificationsTypeDef
        ],
        "ElasticInferenceAccelerators": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataElasticInferenceAcceleratorsTypeDef
        ],
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "InstanceMarketOptions": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataInstanceMarketOptionsTypeDef,
        "CreditSpecification": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCreditSpecificationTypeDef,
        "CpuOptions": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCpuOptionsTypeDef,
        "CapacityReservationSpecification": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataCapacityReservationSpecificationTypeDef,
        "LicenseSpecifications": List[
            ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataLicenseSpecificationsTypeDef
        ],
        "HibernationOptions": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataHibernationOptionsTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "VersionNumber": int,
        "VersionDescription": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersion": bool,
        "LaunchTemplateData": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionLaunchTemplateDataTypeDef,
    },
    total=False,
)

ClientCreateLaunchTemplateVersionResponseTypeDef = TypedDict(
    "ClientCreateLaunchTemplateVersionResponseTypeDef",
    {
        "LaunchTemplateVersion": ClientCreateLaunchTemplateVersionResponseLaunchTemplateVersionTypeDef
    },
    total=False,
)

ClientCreateLocalGatewayRouteResponseRouteTypeDef = TypedDict(
    "ClientCreateLocalGatewayRouteResponseRouteTypeDef",
    {
        "DestinationCidrBlock": str,
        "LocalGatewayVirtualInterfaceGroupId": str,
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
        "LocalGatewayRouteTableId": str,
    },
    total=False,
)

ClientCreateLocalGatewayRouteResponseTypeDef = TypedDict(
    "ClientCreateLocalGatewayRouteResponseTypeDef",
    {"Route": ClientCreateLocalGatewayRouteResponseRouteTypeDef},
    total=False,
)

ClientCreateLocalGatewayRouteTableVpcAssociationResponseLocalGatewayRouteTableVpcAssociationTypeDef = TypedDict(
    "ClientCreateLocalGatewayRouteTableVpcAssociationResponseLocalGatewayRouteTableVpcAssociationTypeDef",
    {
        "LocalGatewayRouteTableVpcAssociationId": str,
        "LocalGatewayRouteTableId": str,
        "LocalGatewayId": str,
        "VpcId": str,
        "State": str,
    },
    total=False,
)

ClientCreateLocalGatewayRouteTableVpcAssociationResponseTypeDef = TypedDict(
    "ClientCreateLocalGatewayRouteTableVpcAssociationResponseTypeDef",
    {
        "LocalGatewayRouteTableVpcAssociation": ClientCreateLocalGatewayRouteTableVpcAssociationResponseLocalGatewayRouteTableVpcAssociationTypeDef
    },
    total=False,
)

ClientCreateNatGatewayResponseNatGatewayNatGatewayAddressesTypeDef = TypedDict(
    "ClientCreateNatGatewayResponseNatGatewayNatGatewayAddressesTypeDef",
    {"AllocationId": str, "NetworkInterfaceId": str, "PrivateIp": str, "PublicIp": str},
    total=False,
)

ClientCreateNatGatewayResponseNatGatewayProvisionedBandwidthTypeDef = TypedDict(
    "ClientCreateNatGatewayResponseNatGatewayProvisionedBandwidthTypeDef",
    {
        "ProvisionTime": datetime,
        "Provisioned": str,
        "RequestTime": datetime,
        "Requested": str,
        "Status": str,
    },
    total=False,
)

ClientCreateNatGatewayResponseNatGatewayTagsTypeDef = TypedDict(
    "ClientCreateNatGatewayResponseNatGatewayTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateNatGatewayResponseNatGatewayTypeDef = TypedDict(
    "ClientCreateNatGatewayResponseNatGatewayTypeDef",
    {
        "CreateTime": datetime,
        "DeleteTime": datetime,
        "FailureCode": str,
        "FailureMessage": str,
        "NatGatewayAddresses": List[
            ClientCreateNatGatewayResponseNatGatewayNatGatewayAddressesTypeDef
        ],
        "NatGatewayId": str,
        "ProvisionedBandwidth": ClientCreateNatGatewayResponseNatGatewayProvisionedBandwidthTypeDef,
        "State": Literal["pending", "failed", "available", "deleting", "deleted"],
        "SubnetId": str,
        "VpcId": str,
        "Tags": List[ClientCreateNatGatewayResponseNatGatewayTagsTypeDef],
    },
    total=False,
)

ClientCreateNatGatewayResponseTypeDef = TypedDict(
    "ClientCreateNatGatewayResponseTypeDef",
    {"ClientToken": str, "NatGateway": ClientCreateNatGatewayResponseNatGatewayTypeDef},
    total=False,
)

ClientCreateNetworkAclEntryIcmpTypeCodeTypeDef = TypedDict(
    "ClientCreateNetworkAclEntryIcmpTypeCodeTypeDef", {"Code": int, "Type": int}, total=False
)

ClientCreateNetworkAclEntryPortRangeTypeDef = TypedDict(
    "ClientCreateNetworkAclEntryPortRangeTypeDef", {"From": int, "To": int}, total=False
)

ClientCreateNetworkAclResponseNetworkAclAssociationsTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseNetworkAclAssociationsTypeDef",
    {"NetworkAclAssociationId": str, "NetworkAclId": str, "SubnetId": str},
    total=False,
)

ClientCreateNetworkAclResponseNetworkAclEntriesIcmpTypeCodeTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseNetworkAclEntriesIcmpTypeCodeTypeDef",
    {"Code": int, "Type": int},
    total=False,
)

ClientCreateNetworkAclResponseNetworkAclEntriesPortRangeTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseNetworkAclEntriesPortRangeTypeDef",
    {"From": int, "To": int},
    total=False,
)

ClientCreateNetworkAclResponseNetworkAclEntriesTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseNetworkAclEntriesTypeDef",
    {
        "CidrBlock": str,
        "Egress": bool,
        "IcmpTypeCode": ClientCreateNetworkAclResponseNetworkAclEntriesIcmpTypeCodeTypeDef,
        "Ipv6CidrBlock": str,
        "PortRange": ClientCreateNetworkAclResponseNetworkAclEntriesPortRangeTypeDef,
        "Protocol": str,
        "RuleAction": Literal["allow", "deny"],
        "RuleNumber": int,
    },
    total=False,
)

ClientCreateNetworkAclResponseNetworkAclTagsTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseNetworkAclTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateNetworkAclResponseNetworkAclTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseNetworkAclTypeDef",
    {
        "Associations": List[ClientCreateNetworkAclResponseNetworkAclAssociationsTypeDef],
        "Entries": List[ClientCreateNetworkAclResponseNetworkAclEntriesTypeDef],
        "IsDefault": bool,
        "NetworkAclId": str,
        "Tags": List[ClientCreateNetworkAclResponseNetworkAclTagsTypeDef],
        "VpcId": str,
        "OwnerId": str,
    },
    total=False,
)

ClientCreateNetworkAclResponseTypeDef = TypedDict(
    "ClientCreateNetworkAclResponseTypeDef",
    {"NetworkAcl": ClientCreateNetworkAclResponseNetworkAclTypeDef},
    total=False,
)

ClientCreateNetworkInterfaceIpv6AddressesTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

ClientCreateNetworkInterfacePermissionResponseInterfacePermissionPermissionStateTypeDef = TypedDict(
    "ClientCreateNetworkInterfacePermissionResponseInterfacePermissionPermissionStateTypeDef",
    {"State": Literal["pending", "granted", "revoking", "revoked"], "StatusMessage": str},
    total=False,
)

ClientCreateNetworkInterfacePermissionResponseInterfacePermissionTypeDef = TypedDict(
    "ClientCreateNetworkInterfacePermissionResponseInterfacePermissionTypeDef",
    {
        "NetworkInterfacePermissionId": str,
        "NetworkInterfaceId": str,
        "AwsAccountId": str,
        "AwsService": str,
        "Permission": Literal["INSTANCE-ATTACH", "EIP-ASSOCIATE"],
        "PermissionState": ClientCreateNetworkInterfacePermissionResponseInterfacePermissionPermissionStateTypeDef,
    },
    total=False,
)

ClientCreateNetworkInterfacePermissionResponseTypeDef = TypedDict(
    "ClientCreateNetworkInterfacePermissionResponseTypeDef",
    {
        "InterfacePermission": ClientCreateNetworkInterfacePermissionResponseInterfacePermissionTypeDef
    },
    total=False,
)

ClientCreateNetworkInterfacePrivateIpAddressesTypeDef = TypedDict(
    "ClientCreateNetworkInterfacePrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfaceAssociationTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfaceAssociationTypeDef",
    {
        "AllocationId": str,
        "AssociationId": str,
        "IpOwnerId": str,
        "PublicDnsName": str,
        "PublicIp": str,
    },
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfaceAttachmentTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfaceAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfaceGroupsTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfaceGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfaceIpv6AddressesTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfaceIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfacePrivateIpAddressesAssociationTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfacePrivateIpAddressesAssociationTypeDef",
    {
        "AllocationId": str,
        "AssociationId": str,
        "IpOwnerId": str,
        "PublicDnsName": str,
        "PublicIp": str,
    },
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfacePrivateIpAddressesTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfacePrivateIpAddressesTypeDef",
    {
        "Association": ClientCreateNetworkInterfaceResponseNetworkInterfacePrivateIpAddressesAssociationTypeDef,
        "Primary": bool,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
    },
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfaceTagSetTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfaceTagSetTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateNetworkInterfaceResponseNetworkInterfaceTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseNetworkInterfaceTypeDef",
    {
        "Association": ClientCreateNetworkInterfaceResponseNetworkInterfaceAssociationTypeDef,
        "Attachment": ClientCreateNetworkInterfaceResponseNetworkInterfaceAttachmentTypeDef,
        "AvailabilityZone": str,
        "Description": str,
        "Groups": List[ClientCreateNetworkInterfaceResponseNetworkInterfaceGroupsTypeDef],
        "InterfaceType": Literal["interface", "natGateway", "efa"],
        "Ipv6Addresses": List[
            ClientCreateNetworkInterfaceResponseNetworkInterfaceIpv6AddressesTypeDef
        ],
        "MacAddress": str,
        "NetworkInterfaceId": str,
        "OutpostArn": str,
        "OwnerId": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientCreateNetworkInterfaceResponseNetworkInterfacePrivateIpAddressesTypeDef
        ],
        "RequesterId": str,
        "RequesterManaged": bool,
        "SourceDestCheck": bool,
        "Status": Literal["available", "associated", "attaching", "in-use", "detaching"],
        "SubnetId": str,
        "TagSet": List[ClientCreateNetworkInterfaceResponseNetworkInterfaceTagSetTypeDef],
        "VpcId": str,
    },
    total=False,
)

ClientCreateNetworkInterfaceResponseTypeDef = TypedDict(
    "ClientCreateNetworkInterfaceResponseTypeDef",
    {"NetworkInterface": ClientCreateNetworkInterfaceResponseNetworkInterfaceTypeDef},
    total=False,
)

ClientCreateReservedInstancesListingPriceSchedulesTypeDef = TypedDict(
    "ClientCreateReservedInstancesListingPriceSchedulesTypeDef",
    {"CurrencyCode": str, "Price": float, "Term": int},
    total=False,
)

ClientCreateReservedInstancesListingResponseReservedInstancesListingsInstanceCountsTypeDef = TypedDict(
    "ClientCreateReservedInstancesListingResponseReservedInstancesListingsInstanceCountsTypeDef",
    {"InstanceCount": int, "State": Literal["available", "sold", "cancelled", "pending"]},
    total=False,
)

ClientCreateReservedInstancesListingResponseReservedInstancesListingsPriceSchedulesTypeDef = TypedDict(
    "ClientCreateReservedInstancesListingResponseReservedInstancesListingsPriceSchedulesTypeDef",
    {"Active": bool, "CurrencyCode": str, "Price": float, "Term": int},
    total=False,
)

ClientCreateReservedInstancesListingResponseReservedInstancesListingsTagsTypeDef = TypedDict(
    "ClientCreateReservedInstancesListingResponseReservedInstancesListingsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateReservedInstancesListingResponseReservedInstancesListingsTypeDef = TypedDict(
    "ClientCreateReservedInstancesListingResponseReservedInstancesListingsTypeDef",
    {
        "ClientToken": str,
        "CreateDate": datetime,
        "InstanceCounts": List[
            ClientCreateReservedInstancesListingResponseReservedInstancesListingsInstanceCountsTypeDef
        ],
        "PriceSchedules": List[
            ClientCreateReservedInstancesListingResponseReservedInstancesListingsPriceSchedulesTypeDef
        ],
        "ReservedInstancesId": str,
        "ReservedInstancesListingId": str,
        "Status": Literal["active", "pending", "cancelled", "closed"],
        "StatusMessage": str,
        "Tags": List[
            ClientCreateReservedInstancesListingResponseReservedInstancesListingsTagsTypeDef
        ],
        "UpdateDate": datetime,
    },
    total=False,
)

ClientCreateReservedInstancesListingResponseTypeDef = TypedDict(
    "ClientCreateReservedInstancesListingResponseTypeDef",
    {
        "ReservedInstancesListings": List[
            ClientCreateReservedInstancesListingResponseReservedInstancesListingsTypeDef
        ]
    },
    total=False,
)

ClientCreateRouteResponseTypeDef = TypedDict(
    "ClientCreateRouteResponseTypeDef", {"Return": bool}, total=False
)

ClientCreateRouteTableResponseRouteTableAssociationsAssociationStateTypeDef = TypedDict(
    "ClientCreateRouteTableResponseRouteTableAssociationsAssociationStateTypeDef",
    {
        "State": Literal["associating", "associated", "disassociating", "disassociated", "failed"],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateRouteTableResponseRouteTableAssociationsTypeDef = TypedDict(
    "ClientCreateRouteTableResponseRouteTableAssociationsTypeDef",
    {
        "Main": bool,
        "RouteTableAssociationId": str,
        "RouteTableId": str,
        "SubnetId": str,
        "GatewayId": str,
        "AssociationState": ClientCreateRouteTableResponseRouteTableAssociationsAssociationStateTypeDef,
    },
    total=False,
)

ClientCreateRouteTableResponseRouteTablePropagatingVgwsTypeDef = TypedDict(
    "ClientCreateRouteTableResponseRouteTablePropagatingVgwsTypeDef",
    {"GatewayId": str},
    total=False,
)

ClientCreateRouteTableResponseRouteTableRoutesTypeDef = TypedDict(
    "ClientCreateRouteTableResponseRouteTableRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "DestinationIpv6CidrBlock": str,
        "DestinationPrefixListId": str,
        "EgressOnlyInternetGatewayId": str,
        "GatewayId": str,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "NatGatewayId": str,
        "TransitGatewayId": str,
        "LocalGatewayId": str,
        "NetworkInterfaceId": str,
        "Origin": Literal["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"],
        "State": Literal["active", "blackhole"],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientCreateRouteTableResponseRouteTableTagsTypeDef = TypedDict(
    "ClientCreateRouteTableResponseRouteTableTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateRouteTableResponseRouteTableTypeDef = TypedDict(
    "ClientCreateRouteTableResponseRouteTableTypeDef",
    {
        "Associations": List[ClientCreateRouteTableResponseRouteTableAssociationsTypeDef],
        "PropagatingVgws": List[ClientCreateRouteTableResponseRouteTablePropagatingVgwsTypeDef],
        "RouteTableId": str,
        "Routes": List[ClientCreateRouteTableResponseRouteTableRoutesTypeDef],
        "Tags": List[ClientCreateRouteTableResponseRouteTableTagsTypeDef],
        "VpcId": str,
        "OwnerId": str,
    },
    total=False,
)

ClientCreateRouteTableResponseTypeDef = TypedDict(
    "ClientCreateRouteTableResponseTypeDef",
    {"RouteTable": ClientCreateRouteTableResponseRouteTableTypeDef},
    total=False,
)

ClientCreateSecurityGroupResponseTypeDef = TypedDict(
    "ClientCreateSecurityGroupResponseTypeDef", {"GroupId": str}, total=False
)

ClientCreateSnapshotResponseTagsTypeDef = TypedDict(
    "ClientCreateSnapshotResponseTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateSnapshotResponseTypeDef = TypedDict(
    "ClientCreateSnapshotResponseTypeDef",
    {
        "DataEncryptionKeyId": str,
        "Description": str,
        "Encrypted": bool,
        "KmsKeyId": str,
        "OwnerId": str,
        "Progress": str,
        "SnapshotId": str,
        "StartTime": datetime,
        "State": Literal["pending", "completed", "error"],
        "StateMessage": str,
        "VolumeId": str,
        "VolumeSize": int,
        "OwnerAlias": str,
        "Tags": List[ClientCreateSnapshotResponseTagsTypeDef],
    },
    total=False,
)

ClientCreateSnapshotTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateSnapshotTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateSnapshotTagSpecificationsTypeDef = TypedDict(
    "ClientCreateSnapshotTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateSnapshotTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateSnapshotsInstanceSpecificationTypeDef = TypedDict(
    "ClientCreateSnapshotsInstanceSpecificationTypeDef",
    {"InstanceId": str, "ExcludeBootVolume": bool},
    total=False,
)

ClientCreateSnapshotsResponseSnapshotsTagsTypeDef = TypedDict(
    "ClientCreateSnapshotsResponseSnapshotsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateSnapshotsResponseSnapshotsTypeDef = TypedDict(
    "ClientCreateSnapshotsResponseSnapshotsTypeDef",
    {
        "Description": str,
        "Tags": List[ClientCreateSnapshotsResponseSnapshotsTagsTypeDef],
        "Encrypted": bool,
        "VolumeId": str,
        "State": Literal["pending", "completed", "error"],
        "VolumeSize": int,
        "StartTime": datetime,
        "Progress": str,
        "OwnerId": str,
        "SnapshotId": str,
    },
    total=False,
)

ClientCreateSnapshotsResponseTypeDef = TypedDict(
    "ClientCreateSnapshotsResponseTypeDef",
    {"Snapshots": List[ClientCreateSnapshotsResponseSnapshotsTypeDef]},
    total=False,
)

ClientCreateSnapshotsTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateSnapshotsTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateSnapshotsTagSpecificationsTypeDef = TypedDict(
    "ClientCreateSnapshotsTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateSnapshotsTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionFaultTypeDef = TypedDict(
    "ClientCreateSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionFaultTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientCreateSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionTypeDef = TypedDict(
    "ClientCreateSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionTypeDef",
    {
        "Bucket": str,
        "Fault": ClientCreateSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionFaultTypeDef,
        "OwnerId": str,
        "Prefix": str,
        "State": Literal["Active", "Inactive"],
    },
    total=False,
)

ClientCreateSpotDatafeedSubscriptionResponseTypeDef = TypedDict(
    "ClientCreateSpotDatafeedSubscriptionResponseTypeDef",
    {
        "SpotDatafeedSubscription": ClientCreateSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionTypeDef
    },
    total=False,
)

ClientCreateSubnetResponseSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientCreateSubnetResponseSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateSubnetResponseSubnetIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "ClientCreateSubnetResponseSubnetIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientCreateSubnetResponseSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
    },
    total=False,
)

ClientCreateSubnetResponseSubnetTagsTypeDef = TypedDict(
    "ClientCreateSubnetResponseSubnetTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateSubnetResponseSubnetTypeDef = TypedDict(
    "ClientCreateSubnetResponseSubnetTypeDef",
    {
        "AvailabilityZone": str,
        "AvailabilityZoneId": str,
        "AvailableIpAddressCount": int,
        "CidrBlock": str,
        "DefaultForAz": bool,
        "MapPublicIpOnLaunch": bool,
        "State": Literal["pending", "available"],
        "SubnetId": str,
        "VpcId": str,
        "OwnerId": str,
        "AssignIpv6AddressOnCreation": bool,
        "Ipv6CidrBlockAssociationSet": List[
            ClientCreateSubnetResponseSubnetIpv6CidrBlockAssociationSetTypeDef
        ],
        "Tags": List[ClientCreateSubnetResponseSubnetTagsTypeDef],
        "SubnetArn": str,
        "OutpostArn": str,
    },
    total=False,
)

ClientCreateSubnetResponseTypeDef = TypedDict(
    "ClientCreateSubnetResponseTypeDef",
    {"Subnet": ClientCreateSubnetResponseSubnetTypeDef},
    total=False,
)

ClientCreateTagsTagsTypeDef = TypedDict(
    "ClientCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterTagsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterTypeDef",
    {
        "TrafficMirrorFilterId": str,
        "IngressFilterRules": List[
            ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterIngressFilterRulesTypeDef
        ],
        "EgressFilterRules": List[
            ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterEgressFilterRulesTypeDef
        ],
        "NetworkServices": List[str],
        "Description": str,
        "Tags": List[ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterTagsTypeDef],
    },
    total=False,
)

ClientCreateTrafficMirrorFilterResponseTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterResponseTypeDef",
    {
        "TrafficMirrorFilter": ClientCreateTrafficMirrorFilterResponseTrafficMirrorFilterTypeDef,
        "ClientToken": str,
    },
    total=False,
)

ClientCreateTrafficMirrorFilterRuleDestinationPortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterRuleDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleDestinationPortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleSourcePortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleDestinationPortRangeTypeDef,
        "SourcePortRange": ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientCreateTrafficMirrorFilterRuleResponseTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterRuleResponseTypeDef",
    {
        "TrafficMirrorFilterRule": ClientCreateTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleTypeDef,
        "ClientToken": str,
    },
    total=False,
)

ClientCreateTrafficMirrorFilterRuleSourcePortRangeTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterRuleSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientCreateTrafficMirrorFilterTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTrafficMirrorFilterTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorFilterTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTrafficMirrorFilterTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTrafficMirrorSessionResponseTrafficMirrorSessionTagsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorSessionResponseTrafficMirrorSessionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTrafficMirrorSessionResponseTrafficMirrorSessionTypeDef = TypedDict(
    "ClientCreateTrafficMirrorSessionResponseTrafficMirrorSessionTypeDef",
    {
        "TrafficMirrorSessionId": str,
        "TrafficMirrorTargetId": str,
        "TrafficMirrorFilterId": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PacketLength": int,
        "SessionNumber": int,
        "VirtualNetworkId": int,
        "Description": str,
        "Tags": List[ClientCreateTrafficMirrorSessionResponseTrafficMirrorSessionTagsTypeDef],
    },
    total=False,
)

ClientCreateTrafficMirrorSessionResponseTypeDef = TypedDict(
    "ClientCreateTrafficMirrorSessionResponseTypeDef",
    {
        "TrafficMirrorSession": ClientCreateTrafficMirrorSessionResponseTrafficMirrorSessionTypeDef,
        "ClientToken": str,
    },
    total=False,
)

ClientCreateTrafficMirrorSessionTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorSessionTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTrafficMirrorSessionTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorSessionTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTrafficMirrorSessionTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTrafficMirrorTargetResponseTrafficMirrorTargetTagsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorTargetResponseTrafficMirrorTargetTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTrafficMirrorTargetResponseTrafficMirrorTargetTypeDef = TypedDict(
    "ClientCreateTrafficMirrorTargetResponseTrafficMirrorTargetTypeDef",
    {
        "TrafficMirrorTargetId": str,
        "NetworkInterfaceId": str,
        "NetworkLoadBalancerArn": str,
        "Type": Literal["network-interface", "network-load-balancer"],
        "Description": str,
        "OwnerId": str,
        "Tags": List[ClientCreateTrafficMirrorTargetResponseTrafficMirrorTargetTagsTypeDef],
    },
    total=False,
)

ClientCreateTrafficMirrorTargetResponseTypeDef = TypedDict(
    "ClientCreateTrafficMirrorTargetResponseTypeDef",
    {
        "TrafficMirrorTarget": ClientCreateTrafficMirrorTargetResponseTrafficMirrorTargetTypeDef,
        "ClientToken": str,
    },
    total=False,
)

ClientCreateTrafficMirrorTargetTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorTargetTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTrafficMirrorTargetTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTrafficMirrorTargetTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTrafficMirrorTargetTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTypeDef = TypedDict(
    "ClientCreateTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "CreationTime": datetime,
        "Tags": List[
            ClientCreateTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateTransitGatewayMulticastDomainResponseTypeDef = TypedDict(
    "ClientCreateTransitGatewayMulticastDomainResponseTypeDef",
    {
        "TransitGatewayMulticastDomain": ClientCreateTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTypeDef
    },
    total=False,
)

ClientCreateTransitGatewayMulticastDomainTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayMulticastDomainTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayMulticastDomainTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTransitGatewayMulticastDomainTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTransitGatewayMulticastDomainTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTransitGatewayOptionsTypeDef = TypedDict(
    "ClientCreateTransitGatewayOptionsTypeDef",
    {
        "AmazonSideAsn": int,
        "AutoAcceptSharedAttachments": Literal["enable", "disable"],
        "DefaultRouteTableAssociation": Literal["enable", "disable"],
        "DefaultRouteTablePropagation": Literal["enable", "disable"],
        "VpnEcmpSupport": Literal["enable", "disable"],
        "DnsSupport": Literal["enable", "disable"],
        "MulticastSupport": Literal["enable", "disable"],
    },
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "RequesterTgwInfo": ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef,
        "AccepterTgwInfo": ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef,
        "Status": ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "CreationTime": datetime,
        "Tags": List[
            ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentResponseTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentResponseTypeDef",
    {
        "TransitGatewayPeeringAttachment": ClientCreateTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef
    },
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayPeeringAttachmentTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTransitGatewayPeeringAttachmentTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTransitGatewayPeeringAttachmentTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTransitGatewayResponseTransitGatewayOptionsTypeDef = TypedDict(
    "ClientCreateTransitGatewayResponseTransitGatewayOptionsTypeDef",
    {
        "AmazonSideAsn": int,
        "AutoAcceptSharedAttachments": Literal["enable", "disable"],
        "DefaultRouteTableAssociation": Literal["enable", "disable"],
        "AssociationDefaultRouteTableId": str,
        "DefaultRouteTablePropagation": Literal["enable", "disable"],
        "PropagationDefaultRouteTableId": str,
        "VpnEcmpSupport": Literal["enable", "disable"],
        "DnsSupport": Literal["enable", "disable"],
        "MulticastSupport": Literal["enable", "disable"],
    },
    total=False,
)

ClientCreateTransitGatewayResponseTransitGatewayTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayResponseTransitGatewayTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayResponseTransitGatewayTypeDef = TypedDict(
    "ClientCreateTransitGatewayResponseTransitGatewayTypeDef",
    {
        "TransitGatewayId": str,
        "TransitGatewayArn": str,
        "State": Literal["pending", "available", "modifying", "deleting", "deleted"],
        "OwnerId": str,
        "Description": str,
        "CreationTime": datetime,
        "Options": ClientCreateTransitGatewayResponseTransitGatewayOptionsTypeDef,
        "Tags": List[ClientCreateTransitGatewayResponseTransitGatewayTagsTypeDef],
    },
    total=False,
)

ClientCreateTransitGatewayResponseTypeDef = TypedDict(
    "ClientCreateTransitGatewayResponseTypeDef",
    {"TransitGateway": ClientCreateTransitGatewayResponseTransitGatewayTypeDef},
    total=False,
)

ClientCreateTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef",
    {
        "ResourceId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
    },
    total=False,
)

ClientCreateTransitGatewayRouteResponseRouteTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteResponseRouteTypeDef",
    {
        "DestinationCidrBlock": str,
        "TransitGatewayAttachments": List[
            ClientCreateTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef
        ],
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
    },
    total=False,
)

ClientCreateTransitGatewayRouteResponseTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteResponseTypeDef",
    {"Route": ClientCreateTransitGatewayRouteResponseRouteTypeDef},
    total=False,
)

ClientCreateTransitGatewayRouteTableResponseTransitGatewayRouteTableTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteTableResponseTransitGatewayRouteTableTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayRouteTableResponseTransitGatewayRouteTableTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteTableResponseTransitGatewayRouteTableTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "DefaultAssociationRouteTable": bool,
        "DefaultPropagationRouteTable": bool,
        "CreationTime": datetime,
        "Tags": List[
            ClientCreateTransitGatewayRouteTableResponseTransitGatewayRouteTableTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateTransitGatewayRouteTableResponseTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteTableResponseTypeDef",
    {
        "TransitGatewayRouteTable": ClientCreateTransitGatewayRouteTableResponseTransitGatewayRouteTableTypeDef
    },
    total=False,
)

ClientCreateTransitGatewayRouteTableTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteTableTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayRouteTableTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTransitGatewayRouteTableTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTransitGatewayRouteTableTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTransitGatewayTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTransitGatewayTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTransitGatewayTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef,
        "Tags": List[
            ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentResponseTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentResponseTypeDef",
    {
        "TransitGatewayVpcAttachment": ClientCreateTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef
    },
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateTransitGatewayVpcAttachmentTagSpecificationsTypeDef = TypedDict(
    "ClientCreateTransitGatewayVpcAttachmentTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateTransitGatewayVpcAttachmentTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateVolumeResponseAttachmentsTypeDef = TypedDict(
    "ClientCreateVolumeResponseAttachmentsTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

ClientCreateVolumeResponseTagsTypeDef = TypedDict(
    "ClientCreateVolumeResponseTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateVolumeResponseTypeDef = TypedDict(
    "ClientCreateVolumeResponseTypeDef",
    {
        "Attachments": List[ClientCreateVolumeResponseAttachmentsTypeDef],
        "AvailabilityZone": str,
        "CreateTime": datetime,
        "Encrypted": bool,
        "KmsKeyId": str,
        "OutpostArn": str,
        "Size": int,
        "SnapshotId": str,
        "State": Literal["creating", "available", "in-use", "deleting", "deleted", "error"],
        "VolumeId": str,
        "Iops": int,
        "Tags": List[ClientCreateVolumeResponseTagsTypeDef],
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "FastRestored": bool,
    },
    total=False,
)

ClientCreateVolumeTagSpecificationsTagsTypeDef = TypedDict(
    "ClientCreateVolumeTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateVolumeTagSpecificationsTypeDef = TypedDict(
    "ClientCreateVolumeTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientCreateVolumeTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientCreateVpcEndpointConnectionNotificationResponseConnectionNotificationTypeDef = TypedDict(
    "ClientCreateVpcEndpointConnectionNotificationResponseConnectionNotificationTypeDef",
    {
        "ConnectionNotificationId": str,
        "ServiceId": str,
        "VpcEndpointId": str,
        "ConnectionNotificationType": str,
        "ConnectionNotificationArn": str,
        "ConnectionEvents": List[str],
        "ConnectionNotificationState": Literal["Enabled", "Disabled"],
    },
    total=False,
)

ClientCreateVpcEndpointConnectionNotificationResponseTypeDef = TypedDict(
    "ClientCreateVpcEndpointConnectionNotificationResponseTypeDef",
    {
        "ConnectionNotification": ClientCreateVpcEndpointConnectionNotificationResponseConnectionNotificationTypeDef,
        "ClientToken": str,
    },
    total=False,
)

ClientCreateVpcEndpointResponseVpcEndpointDnsEntriesTypeDef = TypedDict(
    "ClientCreateVpcEndpointResponseVpcEndpointDnsEntriesTypeDef",
    {"DnsName": str, "HostedZoneId": str},
    total=False,
)

ClientCreateVpcEndpointResponseVpcEndpointGroupsTypeDef = TypedDict(
    "ClientCreateVpcEndpointResponseVpcEndpointGroupsTypeDef",
    {"GroupId": str, "GroupName": str},
    total=False,
)

ClientCreateVpcEndpointResponseVpcEndpointTagsTypeDef = TypedDict(
    "ClientCreateVpcEndpointResponseVpcEndpointTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateVpcEndpointResponseVpcEndpointTypeDef = TypedDict(
    "ClientCreateVpcEndpointResponseVpcEndpointTypeDef",
    {
        "VpcEndpointId": str,
        "VpcEndpointType": Literal["Interface", "Gateway"],
        "VpcId": str,
        "ServiceName": str,
        "State": Literal[
            "PendingAcceptance",
            "Pending",
            "Available",
            "Deleting",
            "Deleted",
            "Rejected",
            "Failed",
            "Expired",
        ],
        "PolicyDocument": str,
        "RouteTableIds": List[str],
        "SubnetIds": List[str],
        "Groups": List[ClientCreateVpcEndpointResponseVpcEndpointGroupsTypeDef],
        "PrivateDnsEnabled": bool,
        "RequesterManaged": bool,
        "NetworkInterfaceIds": List[str],
        "DnsEntries": List[ClientCreateVpcEndpointResponseVpcEndpointDnsEntriesTypeDef],
        "CreationTimestamp": datetime,
        "Tags": List[ClientCreateVpcEndpointResponseVpcEndpointTagsTypeDef],
        "OwnerId": str,
    },
    total=False,
)

ClientCreateVpcEndpointResponseTypeDef = TypedDict(
    "ClientCreateVpcEndpointResponseTypeDef",
    {"VpcEndpoint": ClientCreateVpcEndpointResponseVpcEndpointTypeDef, "ClientToken": str},
    total=False,
)

ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationServiceTypeTypeDef = TypedDict(
    "ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationServiceTypeTypeDef",
    {"ServiceType": Literal["Interface", "Gateway"]},
    total=False,
)

ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationTagsTypeDef = TypedDict(
    "ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationTypeDef = TypedDict(
    "ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationTypeDef",
    {
        "ServiceType": List[
            ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationServiceTypeTypeDef
        ],
        "ServiceId": str,
        "ServiceName": str,
        "ServiceState": Literal["Pending", "Available", "Deleting", "Deleted", "Failed"],
        "AvailabilityZones": List[str],
        "AcceptanceRequired": bool,
        "ManagesVpcEndpoints": bool,
        "NetworkLoadBalancerArns": List[str],
        "BaseEndpointDnsNames": List[str],
        "PrivateDnsName": str,
        "Tags": List[
            ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationTagsTypeDef
        ],
    },
    total=False,
)

ClientCreateVpcEndpointServiceConfigurationResponseTypeDef = TypedDict(
    "ClientCreateVpcEndpointServiceConfigurationResponseTypeDef",
    {
        "ServiceConfiguration": ClientCreateVpcEndpointServiceConfigurationResponseServiceConfigurationTypeDef,
        "ClientToken": str,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionStatusTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionStatusTypeDef",
    {
        "Code": Literal[
            "initiating-request",
            "pending-acceptance",
            "active",
            "deleted",
            "rejected",
            "failed",
            "expired",
            "provisioning",
            "deleting",
        ],
        "Message": str,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionTagsTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionTypeDef",
    {
        "AccepterVpcInfo": ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionAccepterVpcInfoTypeDef,
        "ExpirationTime": datetime,
        "RequesterVpcInfo": ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionRequesterVpcInfoTypeDef,
        "Status": ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionStatusTypeDef,
        "Tags": List[ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionTagsTypeDef],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientCreateVpcPeeringConnectionResponseTypeDef = TypedDict(
    "ClientCreateVpcPeeringConnectionResponseTypeDef",
    {"VpcPeeringConnection": ClientCreateVpcPeeringConnectionResponseVpcPeeringConnectionTypeDef},
    total=False,
)

ClientCreateVpcResponseVpcCidrBlockAssociationSetCidrBlockStateTypeDef = TypedDict(
    "ClientCreateVpcResponseVpcCidrBlockAssociationSetCidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateVpcResponseVpcCidrBlockAssociationSetTypeDef = TypedDict(
    "ClientCreateVpcResponseVpcCidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "CidrBlock": str,
        "CidrBlockState": ClientCreateVpcResponseVpcCidrBlockAssociationSetCidrBlockStateTypeDef,
    },
    total=False,
)

ClientCreateVpcResponseVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientCreateVpcResponseVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientCreateVpcResponseVpcIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "ClientCreateVpcResponseVpcIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientCreateVpcResponseVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
        "NetworkBorderGroup": str,
    },
    total=False,
)

ClientCreateVpcResponseVpcTagsTypeDef = TypedDict(
    "ClientCreateVpcResponseVpcTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateVpcResponseVpcTypeDef = TypedDict(
    "ClientCreateVpcResponseVpcTypeDef",
    {
        "CidrBlock": str,
        "DhcpOptionsId": str,
        "State": Literal["pending", "available"],
        "VpcId": str,
        "OwnerId": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "Ipv6CidrBlockAssociationSet": List[
            ClientCreateVpcResponseVpcIpv6CidrBlockAssociationSetTypeDef
        ],
        "CidrBlockAssociationSet": List[ClientCreateVpcResponseVpcCidrBlockAssociationSetTypeDef],
        "IsDefault": bool,
        "Tags": List[ClientCreateVpcResponseVpcTagsTypeDef],
    },
    total=False,
)

ClientCreateVpcResponseTypeDef = TypedDict(
    "ClientCreateVpcResponseTypeDef", {"Vpc": ClientCreateVpcResponseVpcTypeDef}, total=False
)

ClientCreateVpnConnectionOptionsTunnelOptionsIKEVersionsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsIKEVersionsTypeDef", {"Value": str}, total=False
)

ClientCreateVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientCreateVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientCreateVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTunnelOptionsTypeDef",
    {
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DPDTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientCreateVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientCreateVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientCreateVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientCreateVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientCreateVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientCreateVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IKEVersions": List[ClientCreateVpnConnectionOptionsTunnelOptionsIKEVersionsTypeDef],
    },
    total=False,
)

ClientCreateVpnConnectionOptionsTypeDef = TypedDict(
    "ClientCreateVpnConnectionOptionsTypeDef",
    {
        "EnableAcceleration": bool,
        "StaticRoutesOnly": bool,
        "TunnelOptions": List[ClientCreateVpnConnectionOptionsTunnelOptionsTypeDef],
    },
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsTypeDef",
    {
        "OutsideIpAddress": str,
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DpdTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IkeVersions": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef
        ],
    },
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionOptionsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionOptionsTypeDef",
    {
        "EnableAcceleration": bool,
        "StaticRoutesOnly": bool,
        "TunnelOptions": List[
            ClientCreateVpnConnectionResponseVpnConnectionOptionsTunnelOptionsTypeDef
        ],
    },
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionRoutesTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "Source": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
    },
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionTagsTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionVgwTelemetryTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionVgwTelemetryTypeDef",
    {
        "AcceptedRouteCount": int,
        "LastStatusChange": datetime,
        "OutsideIpAddress": str,
        "Status": Literal["UP", "DOWN"],
        "StatusMessage": str,
        "CertificateArn": str,
    },
    total=False,
)

ClientCreateVpnConnectionResponseVpnConnectionTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseVpnConnectionTypeDef",
    {
        "CustomerGatewayConfiguration": str,
        "CustomerGatewayId": str,
        "Category": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpnConnectionId": str,
        "VpnGatewayId": str,
        "TransitGatewayId": str,
        "Options": ClientCreateVpnConnectionResponseVpnConnectionOptionsTypeDef,
        "Routes": List[ClientCreateVpnConnectionResponseVpnConnectionRoutesTypeDef],
        "Tags": List[ClientCreateVpnConnectionResponseVpnConnectionTagsTypeDef],
        "VgwTelemetry": List[ClientCreateVpnConnectionResponseVpnConnectionVgwTelemetryTypeDef],
    },
    total=False,
)

ClientCreateVpnConnectionResponseTypeDef = TypedDict(
    "ClientCreateVpnConnectionResponseTypeDef",
    {"VpnConnection": ClientCreateVpnConnectionResponseVpnConnectionTypeDef},
    total=False,
)

ClientCreateVpnGatewayResponseVpnGatewayTagsTypeDef = TypedDict(
    "ClientCreateVpnGatewayResponseVpnGatewayTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientCreateVpnGatewayResponseVpnGatewayVpcAttachmentsTypeDef = TypedDict(
    "ClientCreateVpnGatewayResponseVpnGatewayVpcAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientCreateVpnGatewayResponseVpnGatewayTypeDef = TypedDict(
    "ClientCreateVpnGatewayResponseVpnGatewayTypeDef",
    {
        "AvailabilityZone": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpcAttachments": List[ClientCreateVpnGatewayResponseVpnGatewayVpcAttachmentsTypeDef],
        "VpnGatewayId": str,
        "AmazonSideAsn": int,
        "Tags": List[ClientCreateVpnGatewayResponseVpnGatewayTagsTypeDef],
    },
    total=False,
)

ClientCreateVpnGatewayResponseTypeDef = TypedDict(
    "ClientCreateVpnGatewayResponseTypeDef",
    {"VpnGateway": ClientCreateVpnGatewayResponseVpnGatewayTypeDef},
    total=False,
)

ClientDeleteClientVpnEndpointResponseStatusTypeDef = TypedDict(
    "ClientDeleteClientVpnEndpointResponseStatusTypeDef",
    {"Code": Literal["pending-associate", "available", "deleting", "deleted"], "Message": str},
    total=False,
)

ClientDeleteClientVpnEndpointResponseTypeDef = TypedDict(
    "ClientDeleteClientVpnEndpointResponseTypeDef",
    {"Status": ClientDeleteClientVpnEndpointResponseStatusTypeDef},
    total=False,
)

ClientDeleteClientVpnRouteResponseStatusTypeDef = TypedDict(
    "ClientDeleteClientVpnRouteResponseStatusTypeDef",
    {"Code": Literal["creating", "active", "failed", "deleting"], "Message": str},
    total=False,
)

ClientDeleteClientVpnRouteResponseTypeDef = TypedDict(
    "ClientDeleteClientVpnRouteResponseTypeDef",
    {"Status": ClientDeleteClientVpnRouteResponseStatusTypeDef},
    total=False,
)

ClientDeleteEgressOnlyInternetGatewayResponseTypeDef = TypedDict(
    "ClientDeleteEgressOnlyInternetGatewayResponseTypeDef", {"ReturnCode": bool}, total=False
)

ClientDeleteFleetsResponseSuccessfulFleetDeletionsTypeDef = TypedDict(
    "ClientDeleteFleetsResponseSuccessfulFleetDeletionsTypeDef",
    {
        "CurrentFleetState": Literal[
            "submitted",
            "active",
            "deleted",
            "failed",
            "deleted_running",
            "deleted_terminating",
            "modifying",
        ],
        "PreviousFleetState": Literal[
            "submitted",
            "active",
            "deleted",
            "failed",
            "deleted_running",
            "deleted_terminating",
            "modifying",
        ],
        "FleetId": str,
    },
    total=False,
)

ClientDeleteFleetsResponseUnsuccessfulFleetDeletionsErrorTypeDef = TypedDict(
    "ClientDeleteFleetsResponseUnsuccessfulFleetDeletionsErrorTypeDef",
    {
        "Code": Literal[
            "fleetIdDoesNotExist", "fleetIdMalformed", "fleetNotInDeletableState", "unexpectedError"
        ],
        "Message": str,
    },
    total=False,
)

ClientDeleteFleetsResponseUnsuccessfulFleetDeletionsTypeDef = TypedDict(
    "ClientDeleteFleetsResponseUnsuccessfulFleetDeletionsTypeDef",
    {"Error": ClientDeleteFleetsResponseUnsuccessfulFleetDeletionsErrorTypeDef, "FleetId": str},
    total=False,
)

ClientDeleteFleetsResponseTypeDef = TypedDict(
    "ClientDeleteFleetsResponseTypeDef",
    {
        "SuccessfulFleetDeletions": List[ClientDeleteFleetsResponseSuccessfulFleetDeletionsTypeDef],
        "UnsuccessfulFleetDeletions": List[
            ClientDeleteFleetsResponseUnsuccessfulFleetDeletionsTypeDef
        ],
    },
    total=False,
)

ClientDeleteFlowLogsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientDeleteFlowLogsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDeleteFlowLogsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientDeleteFlowLogsResponseUnsuccessfulTypeDef",
    {"Error": ClientDeleteFlowLogsResponseUnsuccessfulErrorTypeDef, "ResourceId": str},
    total=False,
)

ClientDeleteFlowLogsResponseTypeDef = TypedDict(
    "ClientDeleteFlowLogsResponseTypeDef",
    {"Unsuccessful": List[ClientDeleteFlowLogsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientDeleteFpgaImageResponseTypeDef = TypedDict(
    "ClientDeleteFpgaImageResponseTypeDef", {"Return": bool}, total=False
)

ClientDeleteLaunchTemplateResponseLaunchTemplateTagsTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateResponseLaunchTemplateTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDeleteLaunchTemplateResponseLaunchTemplateTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateResponseLaunchTemplateTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersionNumber": int,
        "LatestVersionNumber": int,
        "Tags": List[ClientDeleteLaunchTemplateResponseLaunchTemplateTagsTypeDef],
    },
    total=False,
)

ClientDeleteLaunchTemplateResponseTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateResponseTypeDef",
    {"LaunchTemplate": ClientDeleteLaunchTemplateResponseLaunchTemplateTypeDef},
    total=False,
)

ClientDeleteLaunchTemplateVersionsResponseSuccessfullyDeletedLaunchTemplateVersionsTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateVersionsResponseSuccessfullyDeletedLaunchTemplateVersionsTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "VersionNumber": int},
    total=False,
)

ClientDeleteLaunchTemplateVersionsResponseUnsuccessfullyDeletedLaunchTemplateVersionsResponseErrorTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateVersionsResponseUnsuccessfullyDeletedLaunchTemplateVersionsResponseErrorTypeDef",
    {
        "Code": Literal[
            "launchTemplateIdDoesNotExist",
            "launchTemplateIdMalformed",
            "launchTemplateNameDoesNotExist",
            "launchTemplateNameMalformed",
            "launchTemplateVersionDoesNotExist",
            "unexpectedError",
        ],
        "Message": str,
    },
    total=False,
)

ClientDeleteLaunchTemplateVersionsResponseUnsuccessfullyDeletedLaunchTemplateVersionsTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateVersionsResponseUnsuccessfullyDeletedLaunchTemplateVersionsTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "VersionNumber": int,
        "ResponseError": ClientDeleteLaunchTemplateVersionsResponseUnsuccessfullyDeletedLaunchTemplateVersionsResponseErrorTypeDef,
    },
    total=False,
)

ClientDeleteLaunchTemplateVersionsResponseTypeDef = TypedDict(
    "ClientDeleteLaunchTemplateVersionsResponseTypeDef",
    {
        "SuccessfullyDeletedLaunchTemplateVersions": List[
            ClientDeleteLaunchTemplateVersionsResponseSuccessfullyDeletedLaunchTemplateVersionsTypeDef
        ],
        "UnsuccessfullyDeletedLaunchTemplateVersions": List[
            ClientDeleteLaunchTemplateVersionsResponseUnsuccessfullyDeletedLaunchTemplateVersionsTypeDef
        ],
    },
    total=False,
)

ClientDeleteLocalGatewayRouteResponseRouteTypeDef = TypedDict(
    "ClientDeleteLocalGatewayRouteResponseRouteTypeDef",
    {
        "DestinationCidrBlock": str,
        "LocalGatewayVirtualInterfaceGroupId": str,
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
        "LocalGatewayRouteTableId": str,
    },
    total=False,
)

ClientDeleteLocalGatewayRouteResponseTypeDef = TypedDict(
    "ClientDeleteLocalGatewayRouteResponseTypeDef",
    {"Route": ClientDeleteLocalGatewayRouteResponseRouteTypeDef},
    total=False,
)

ClientDeleteLocalGatewayRouteTableVpcAssociationResponseLocalGatewayRouteTableVpcAssociationTypeDef = TypedDict(
    "ClientDeleteLocalGatewayRouteTableVpcAssociationResponseLocalGatewayRouteTableVpcAssociationTypeDef",
    {
        "LocalGatewayRouteTableVpcAssociationId": str,
        "LocalGatewayRouteTableId": str,
        "LocalGatewayId": str,
        "VpcId": str,
        "State": str,
    },
    total=False,
)

ClientDeleteLocalGatewayRouteTableVpcAssociationResponseTypeDef = TypedDict(
    "ClientDeleteLocalGatewayRouteTableVpcAssociationResponseTypeDef",
    {
        "LocalGatewayRouteTableVpcAssociation": ClientDeleteLocalGatewayRouteTableVpcAssociationResponseLocalGatewayRouteTableVpcAssociationTypeDef
    },
    total=False,
)

ClientDeleteNatGatewayResponseTypeDef = TypedDict(
    "ClientDeleteNatGatewayResponseTypeDef", {"NatGatewayId": str}, total=False
)

ClientDeleteNetworkInterfacePermissionResponseTypeDef = TypedDict(
    "ClientDeleteNetworkInterfacePermissionResponseTypeDef", {"Return": bool}, total=False
)

ClientDeleteQueuedReservedInstancesResponseFailedQueuedPurchaseDeletionsErrorTypeDef = TypedDict(
    "ClientDeleteQueuedReservedInstancesResponseFailedQueuedPurchaseDeletionsErrorTypeDef",
    {
        "Code": Literal[
            "reserved-instances-id-invalid",
            "reserved-instances-not-in-queued-state",
            "unexpected-error",
        ],
        "Message": str,
    },
    total=False,
)

ClientDeleteQueuedReservedInstancesResponseFailedQueuedPurchaseDeletionsTypeDef = TypedDict(
    "ClientDeleteQueuedReservedInstancesResponseFailedQueuedPurchaseDeletionsTypeDef",
    {
        "Error": ClientDeleteQueuedReservedInstancesResponseFailedQueuedPurchaseDeletionsErrorTypeDef,
        "ReservedInstancesId": str,
    },
    total=False,
)

ClientDeleteQueuedReservedInstancesResponseSuccessfulQueuedPurchaseDeletionsTypeDef = TypedDict(
    "ClientDeleteQueuedReservedInstancesResponseSuccessfulQueuedPurchaseDeletionsTypeDef",
    {"ReservedInstancesId": str},
    total=False,
)

ClientDeleteQueuedReservedInstancesResponseTypeDef = TypedDict(
    "ClientDeleteQueuedReservedInstancesResponseTypeDef",
    {
        "SuccessfulQueuedPurchaseDeletions": List[
            ClientDeleteQueuedReservedInstancesResponseSuccessfulQueuedPurchaseDeletionsTypeDef
        ],
        "FailedQueuedPurchaseDeletions": List[
            ClientDeleteQueuedReservedInstancesResponseFailedQueuedPurchaseDeletionsTypeDef
        ],
    },
    total=False,
)

ClientDeleteTagsTagsTypeDef = TypedDict(
    "ClientDeleteTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDeleteTrafficMirrorFilterResponseTypeDef = TypedDict(
    "ClientDeleteTrafficMirrorFilterResponseTypeDef", {"TrafficMirrorFilterId": str}, total=False
)

ClientDeleteTrafficMirrorFilterRuleResponseTypeDef = TypedDict(
    "ClientDeleteTrafficMirrorFilterRuleResponseTypeDef",
    {"TrafficMirrorFilterRuleId": str},
    total=False,
)

ClientDeleteTrafficMirrorSessionResponseTypeDef = TypedDict(
    "ClientDeleteTrafficMirrorSessionResponseTypeDef", {"TrafficMirrorSessionId": str}, total=False
)

ClientDeleteTrafficMirrorTargetResponseTypeDef = TypedDict(
    "ClientDeleteTrafficMirrorTargetResponseTypeDef", {"TrafficMirrorTargetId": str}, total=False
)

ClientDeleteTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTagsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDeleteTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTypeDef = TypedDict(
    "ClientDeleteTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "CreationTime": datetime,
        "Tags": List[
            ClientDeleteTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTagsTypeDef
        ],
    },
    total=False,
)

ClientDeleteTransitGatewayMulticastDomainResponseTypeDef = TypedDict(
    "ClientDeleteTransitGatewayMulticastDomainResponseTypeDef",
    {
        "TransitGatewayMulticastDomain": ClientDeleteTransitGatewayMulticastDomainResponseTransitGatewayMulticastDomainTypeDef
    },
    total=False,
)

ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef = TypedDict(
    "ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef = TypedDict(
    "ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef = TypedDict(
    "ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef = TypedDict(
    "ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "RequesterTgwInfo": ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef,
        "AccepterTgwInfo": ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef,
        "Status": ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "CreationTime": datetime,
        "Tags": List[
            ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientDeleteTransitGatewayPeeringAttachmentResponseTypeDef = TypedDict(
    "ClientDeleteTransitGatewayPeeringAttachmentResponseTypeDef",
    {
        "TransitGatewayPeeringAttachment": ClientDeleteTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef
    },
    total=False,
)

ClientDeleteTransitGatewayResponseTransitGatewayOptionsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayResponseTransitGatewayOptionsTypeDef",
    {
        "AmazonSideAsn": int,
        "AutoAcceptSharedAttachments": Literal["enable", "disable"],
        "DefaultRouteTableAssociation": Literal["enable", "disable"],
        "AssociationDefaultRouteTableId": str,
        "DefaultRouteTablePropagation": Literal["enable", "disable"],
        "PropagationDefaultRouteTableId": str,
        "VpnEcmpSupport": Literal["enable", "disable"],
        "DnsSupport": Literal["enable", "disable"],
        "MulticastSupport": Literal["enable", "disable"],
    },
    total=False,
)

ClientDeleteTransitGatewayResponseTransitGatewayTagsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayResponseTransitGatewayTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDeleteTransitGatewayResponseTransitGatewayTypeDef = TypedDict(
    "ClientDeleteTransitGatewayResponseTransitGatewayTypeDef",
    {
        "TransitGatewayId": str,
        "TransitGatewayArn": str,
        "State": Literal["pending", "available", "modifying", "deleting", "deleted"],
        "OwnerId": str,
        "Description": str,
        "CreationTime": datetime,
        "Options": ClientDeleteTransitGatewayResponseTransitGatewayOptionsTypeDef,
        "Tags": List[ClientDeleteTransitGatewayResponseTransitGatewayTagsTypeDef],
    },
    total=False,
)

ClientDeleteTransitGatewayResponseTypeDef = TypedDict(
    "ClientDeleteTransitGatewayResponseTypeDef",
    {"TransitGateway": ClientDeleteTransitGatewayResponseTransitGatewayTypeDef},
    total=False,
)

ClientDeleteTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef",
    {
        "ResourceId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
    },
    total=False,
)

ClientDeleteTransitGatewayRouteResponseRouteTypeDef = TypedDict(
    "ClientDeleteTransitGatewayRouteResponseRouteTypeDef",
    {
        "DestinationCidrBlock": str,
        "TransitGatewayAttachments": List[
            ClientDeleteTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef
        ],
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
    },
    total=False,
)

ClientDeleteTransitGatewayRouteResponseTypeDef = TypedDict(
    "ClientDeleteTransitGatewayRouteResponseTypeDef",
    {"Route": ClientDeleteTransitGatewayRouteResponseRouteTypeDef},
    total=False,
)

ClientDeleteTransitGatewayRouteTableResponseTransitGatewayRouteTableTagsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayRouteTableResponseTransitGatewayRouteTableTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDeleteTransitGatewayRouteTableResponseTransitGatewayRouteTableTypeDef = TypedDict(
    "ClientDeleteTransitGatewayRouteTableResponseTransitGatewayRouteTableTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "DefaultAssociationRouteTable": bool,
        "DefaultPropagationRouteTable": bool,
        "CreationTime": datetime,
        "Tags": List[
            ClientDeleteTransitGatewayRouteTableResponseTransitGatewayRouteTableTagsTypeDef
        ],
    },
    total=False,
)

ClientDeleteTransitGatewayRouteTableResponseTypeDef = TypedDict(
    "ClientDeleteTransitGatewayRouteTableResponseTypeDef",
    {
        "TransitGatewayRouteTable": ClientDeleteTransitGatewayRouteTableResponseTransitGatewayRouteTableTypeDef
    },
    total=False,
)

ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef = TypedDict(
    "ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef = TypedDict(
    "ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef,
        "Tags": List[
            ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientDeleteTransitGatewayVpcAttachmentResponseTypeDef = TypedDict(
    "ClientDeleteTransitGatewayVpcAttachmentResponseTypeDef",
    {
        "TransitGatewayVpcAttachment": ClientDeleteTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef
    },
    total=False,
)

ClientDeleteVpcEndpointConnectionNotificationsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientDeleteVpcEndpointConnectionNotificationsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDeleteVpcEndpointConnectionNotificationsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientDeleteVpcEndpointConnectionNotificationsResponseUnsuccessfulTypeDef",
    {
        "Error": ClientDeleteVpcEndpointConnectionNotificationsResponseUnsuccessfulErrorTypeDef,
        "ResourceId": str,
    },
    total=False,
)

ClientDeleteVpcEndpointConnectionNotificationsResponseTypeDef = TypedDict(
    "ClientDeleteVpcEndpointConnectionNotificationsResponseTypeDef",
    {
        "Unsuccessful": List[
            ClientDeleteVpcEndpointConnectionNotificationsResponseUnsuccessfulTypeDef
        ]
    },
    total=False,
)

ClientDeleteVpcEndpointServiceConfigurationsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientDeleteVpcEndpointServiceConfigurationsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDeleteVpcEndpointServiceConfigurationsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientDeleteVpcEndpointServiceConfigurationsResponseUnsuccessfulTypeDef",
    {
        "Error": ClientDeleteVpcEndpointServiceConfigurationsResponseUnsuccessfulErrorTypeDef,
        "ResourceId": str,
    },
    total=False,
)

ClientDeleteVpcEndpointServiceConfigurationsResponseTypeDef = TypedDict(
    "ClientDeleteVpcEndpointServiceConfigurationsResponseTypeDef",
    {"Unsuccessful": List[ClientDeleteVpcEndpointServiceConfigurationsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientDeleteVpcEndpointsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientDeleteVpcEndpointsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDeleteVpcEndpointsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientDeleteVpcEndpointsResponseUnsuccessfulTypeDef",
    {"Error": ClientDeleteVpcEndpointsResponseUnsuccessfulErrorTypeDef, "ResourceId": str},
    total=False,
)

ClientDeleteVpcEndpointsResponseTypeDef = TypedDict(
    "ClientDeleteVpcEndpointsResponseTypeDef",
    {"Unsuccessful": List[ClientDeleteVpcEndpointsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientDeleteVpcPeeringConnectionResponseTypeDef = TypedDict(
    "ClientDeleteVpcPeeringConnectionResponseTypeDef", {"Return": bool}, total=False
)

ClientDeprovisionByoipCidrResponseByoipCidrTypeDef = TypedDict(
    "ClientDeprovisionByoipCidrResponseByoipCidrTypeDef",
    {
        "Cidr": str,
        "Description": str,
        "StatusMessage": str,
        "State": Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
        ],
    },
    total=False,
)

ClientDeprovisionByoipCidrResponseTypeDef = TypedDict(
    "ClientDeprovisionByoipCidrResponseTypeDef",
    {"ByoipCidr": ClientDeprovisionByoipCidrResponseByoipCidrTypeDef},
    total=False,
)

ClientDeregisterTransitGatewayMulticastGroupMembersResponseDeregisteredMulticastGroupMembersTypeDef = TypedDict(
    "ClientDeregisterTransitGatewayMulticastGroupMembersResponseDeregisteredMulticastGroupMembersTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "DeregisteredNetworkInterfaceIds": List[str],
        "GroupIpAddress": str,
    },
    total=False,
)

ClientDeregisterTransitGatewayMulticastGroupMembersResponseTypeDef = TypedDict(
    "ClientDeregisterTransitGatewayMulticastGroupMembersResponseTypeDef",
    {
        "DeregisteredMulticastGroupMembers": ClientDeregisterTransitGatewayMulticastGroupMembersResponseDeregisteredMulticastGroupMembersTypeDef
    },
    total=False,
)

ClientDeregisterTransitGatewayMulticastGroupSourcesResponseDeregisteredMulticastGroupSourcesTypeDef = TypedDict(
    "ClientDeregisterTransitGatewayMulticastGroupSourcesResponseDeregisteredMulticastGroupSourcesTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "DeregisteredNetworkInterfaceIds": List[str],
        "GroupIpAddress": str,
    },
    total=False,
)

ClientDeregisterTransitGatewayMulticastGroupSourcesResponseTypeDef = TypedDict(
    "ClientDeregisterTransitGatewayMulticastGroupSourcesResponseTypeDef",
    {
        "DeregisteredMulticastGroupSources": ClientDeregisterTransitGatewayMulticastGroupSourcesResponseDeregisteredMulticastGroupSourcesTypeDef
    },
    total=False,
)

ClientDescribeAccountAttributesResponseAccountAttributesAttributeValuesTypeDef = TypedDict(
    "ClientDescribeAccountAttributesResponseAccountAttributesAttributeValuesTypeDef",
    {"AttributeValue": str},
    total=False,
)

ClientDescribeAccountAttributesResponseAccountAttributesTypeDef = TypedDict(
    "ClientDescribeAccountAttributesResponseAccountAttributesTypeDef",
    {
        "AttributeName": str,
        "AttributeValues": List[
            ClientDescribeAccountAttributesResponseAccountAttributesAttributeValuesTypeDef
        ],
    },
    total=False,
)

ClientDescribeAccountAttributesResponseTypeDef = TypedDict(
    "ClientDescribeAccountAttributesResponseTypeDef",
    {"AccountAttributes": List[ClientDescribeAccountAttributesResponseAccountAttributesTypeDef]},
    total=False,
)

ClientDescribeAddressesFiltersTypeDef = TypedDict(
    "ClientDescribeAddressesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeAddressesResponseAddressesTagsTypeDef = TypedDict(
    "ClientDescribeAddressesResponseAddressesTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeAddressesResponseAddressesTypeDef = TypedDict(
    "ClientDescribeAddressesResponseAddressesTypeDef",
    {
        "InstanceId": str,
        "PublicIp": str,
        "AllocationId": str,
        "AssociationId": str,
        "Domain": Literal["vpc", "standard"],
        "NetworkInterfaceId": str,
        "NetworkInterfaceOwnerId": str,
        "PrivateIpAddress": str,
        "Tags": List[ClientDescribeAddressesResponseAddressesTagsTypeDef],
        "PublicIpv4Pool": str,
        "NetworkBorderGroup": str,
        "CustomerOwnedIp": str,
        "CustomerOwnedIpv4Pool": str,
    },
    total=False,
)

ClientDescribeAddressesResponseTypeDef = TypedDict(
    "ClientDescribeAddressesResponseTypeDef",
    {"Addresses": List[ClientDescribeAddressesResponseAddressesTypeDef]},
    total=False,
)

ClientDescribeAggregateIdFormatResponseStatusesTypeDef = TypedDict(
    "ClientDescribeAggregateIdFormatResponseStatusesTypeDef",
    {"Deadline": datetime, "Resource": str, "UseLongIds": bool},
    total=False,
)

ClientDescribeAggregateIdFormatResponseTypeDef = TypedDict(
    "ClientDescribeAggregateIdFormatResponseTypeDef",
    {
        "UseLongIdsAggregated": bool,
        "Statuses": List[ClientDescribeAggregateIdFormatResponseStatusesTypeDef],
    },
    total=False,
)

ClientDescribeAvailabilityZonesFiltersTypeDef = TypedDict(
    "ClientDescribeAvailabilityZonesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeAvailabilityZonesResponseAvailabilityZonesMessagesTypeDef = TypedDict(
    "ClientDescribeAvailabilityZonesResponseAvailabilityZonesMessagesTypeDef",
    {"Message": str},
    total=False,
)

ClientDescribeAvailabilityZonesResponseAvailabilityZonesTypeDef = TypedDict(
    "ClientDescribeAvailabilityZonesResponseAvailabilityZonesTypeDef",
    {
        "State": Literal["available", "information", "impaired", "unavailable"],
        "OptInStatus": Literal["opt-in-not-required", "opted-in", "not-opted-in"],
        "Messages": List[ClientDescribeAvailabilityZonesResponseAvailabilityZonesMessagesTypeDef],
        "RegionName": str,
        "ZoneName": str,
        "ZoneId": str,
        "GroupName": str,
        "NetworkBorderGroup": str,
    },
    total=False,
)

ClientDescribeAvailabilityZonesResponseTypeDef = TypedDict(
    "ClientDescribeAvailabilityZonesResponseTypeDef",
    {"AvailabilityZones": List[ClientDescribeAvailabilityZonesResponseAvailabilityZonesTypeDef]},
    total=False,
)

ClientDescribeBundleTasksFiltersTypeDef = TypedDict(
    "ClientDescribeBundleTasksFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeBundleTasksResponseBundleTasksBundleTaskErrorTypeDef = TypedDict(
    "ClientDescribeBundleTasksResponseBundleTasksBundleTaskErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDescribeBundleTasksResponseBundleTasksStorageS3TypeDef = TypedDict(
    "ClientDescribeBundleTasksResponseBundleTasksStorageS3TypeDef",
    {
        "AWSAccessKeyId": str,
        "Bucket": str,
        "Prefix": str,
        "UploadPolicy": bytes,
        "UploadPolicySignature": str,
    },
    total=False,
)

ClientDescribeBundleTasksResponseBundleTasksStorageTypeDef = TypedDict(
    "ClientDescribeBundleTasksResponseBundleTasksStorageTypeDef",
    {"S3": ClientDescribeBundleTasksResponseBundleTasksStorageS3TypeDef},
    total=False,
)

ClientDescribeBundleTasksResponseBundleTasksTypeDef = TypedDict(
    "ClientDescribeBundleTasksResponseBundleTasksTypeDef",
    {
        "BundleId": str,
        "BundleTaskError": ClientDescribeBundleTasksResponseBundleTasksBundleTaskErrorTypeDef,
        "InstanceId": str,
        "Progress": str,
        "StartTime": datetime,
        "State": Literal[
            "pending",
            "waiting-for-shutdown",
            "bundling",
            "storing",
            "cancelling",
            "complete",
            "failed",
        ],
        "Storage": ClientDescribeBundleTasksResponseBundleTasksStorageTypeDef,
        "UpdateTime": datetime,
    },
    total=False,
)

ClientDescribeBundleTasksResponseTypeDef = TypedDict(
    "ClientDescribeBundleTasksResponseTypeDef",
    {"BundleTasks": List[ClientDescribeBundleTasksResponseBundleTasksTypeDef]},
    total=False,
)

ClientDescribeByoipCidrsResponseByoipCidrsTypeDef = TypedDict(
    "ClientDescribeByoipCidrsResponseByoipCidrsTypeDef",
    {
        "Cidr": str,
        "Description": str,
        "StatusMessage": str,
        "State": Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
        ],
    },
    total=False,
)

ClientDescribeByoipCidrsResponseTypeDef = TypedDict(
    "ClientDescribeByoipCidrsResponseTypeDef",
    {"ByoipCidrs": List[ClientDescribeByoipCidrsResponseByoipCidrsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeCapacityReservationsFiltersTypeDef = TypedDict(
    "ClientDescribeCapacityReservationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeCapacityReservationsResponseCapacityReservationsTagsTypeDef = TypedDict(
    "ClientDescribeCapacityReservationsResponseCapacityReservationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeCapacityReservationsResponseCapacityReservationsTypeDef = TypedDict(
    "ClientDescribeCapacityReservationsResponseCapacityReservationsTypeDef",
    {
        "CapacityReservationId": str,
        "OwnerId": str,
        "CapacityReservationArn": str,
        "AvailabilityZoneId": str,
        "InstanceType": str,
        "InstancePlatform": Literal[
            "Linux/UNIX",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux with SQL Server Enterprise",
        ],
        "AvailabilityZone": str,
        "Tenancy": Literal["default", "dedicated"],
        "TotalInstanceCount": int,
        "AvailableInstanceCount": int,
        "EbsOptimized": bool,
        "EphemeralStorage": bool,
        "State": Literal["active", "expired", "cancelled", "pending", "failed"],
        "EndDate": datetime,
        "EndDateType": Literal["unlimited", "limited"],
        "InstanceMatchCriteria": Literal["open", "targeted"],
        "CreateDate": datetime,
        "Tags": List[ClientDescribeCapacityReservationsResponseCapacityReservationsTagsTypeDef],
    },
    total=False,
)

ClientDescribeCapacityReservationsResponseTypeDef = TypedDict(
    "ClientDescribeCapacityReservationsResponseTypeDef",
    {
        "NextToken": str,
        "CapacityReservations": List[
            ClientDescribeCapacityReservationsResponseCapacityReservationsTypeDef
        ],
    },
    total=False,
)

ClientDescribeClassicLinkInstancesFiltersTypeDef = TypedDict(
    "ClientDescribeClassicLinkInstancesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeClassicLinkInstancesResponseInstancesGroupsTypeDef = TypedDict(
    "ClientDescribeClassicLinkInstancesResponseInstancesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeClassicLinkInstancesResponseInstancesTagsTypeDef = TypedDict(
    "ClientDescribeClassicLinkInstancesResponseInstancesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeClassicLinkInstancesResponseInstancesTypeDef = TypedDict(
    "ClientDescribeClassicLinkInstancesResponseInstancesTypeDef",
    {
        "Groups": List[ClientDescribeClassicLinkInstancesResponseInstancesGroupsTypeDef],
        "InstanceId": str,
        "Tags": List[ClientDescribeClassicLinkInstancesResponseInstancesTagsTypeDef],
        "VpcId": str,
    },
    total=False,
)

ClientDescribeClassicLinkInstancesResponseTypeDef = TypedDict(
    "ClientDescribeClassicLinkInstancesResponseTypeDef",
    {
        "Instances": List[ClientDescribeClassicLinkInstancesResponseInstancesTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeClientVpnAuthorizationRulesFiltersTypeDef = TypedDict(
    "ClientDescribeClientVpnAuthorizationRulesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeClientVpnAuthorizationRulesResponseAuthorizationRulesStatusTypeDef = TypedDict(
    "ClientDescribeClientVpnAuthorizationRulesResponseAuthorizationRulesStatusTypeDef",
    {"Code": Literal["authorizing", "active", "failed", "revoking"], "Message": str},
    total=False,
)

ClientDescribeClientVpnAuthorizationRulesResponseAuthorizationRulesTypeDef = TypedDict(
    "ClientDescribeClientVpnAuthorizationRulesResponseAuthorizationRulesTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Description": str,
        "GroupId": str,
        "AccessAll": bool,
        "DestinationCidr": str,
        "Status": ClientDescribeClientVpnAuthorizationRulesResponseAuthorizationRulesStatusTypeDef,
    },
    total=False,
)

ClientDescribeClientVpnAuthorizationRulesResponseTypeDef = TypedDict(
    "ClientDescribeClientVpnAuthorizationRulesResponseTypeDef",
    {
        "AuthorizationRules": List[
            ClientDescribeClientVpnAuthorizationRulesResponseAuthorizationRulesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeClientVpnConnectionsFiltersTypeDef = TypedDict(
    "ClientDescribeClientVpnConnectionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeClientVpnConnectionsResponseConnectionsStatusTypeDef = TypedDict(
    "ClientDescribeClientVpnConnectionsResponseConnectionsStatusTypeDef",
    {"Code": Literal["active", "failed-to-terminate", "terminating", "terminated"], "Message": str},
    total=False,
)

ClientDescribeClientVpnConnectionsResponseConnectionsTypeDef = TypedDict(
    "ClientDescribeClientVpnConnectionsResponseConnectionsTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Timestamp": str,
        "ConnectionId": str,
        "Username": str,
        "ConnectionEstablishedTime": str,
        "IngressBytes": str,
        "EgressBytes": str,
        "IngressPackets": str,
        "EgressPackets": str,
        "ClientIp": str,
        "CommonName": str,
        "Status": ClientDescribeClientVpnConnectionsResponseConnectionsStatusTypeDef,
        "ConnectionEndTime": str,
    },
    total=False,
)

ClientDescribeClientVpnConnectionsResponseTypeDef = TypedDict(
    "ClientDescribeClientVpnConnectionsResponseTypeDef",
    {
        "Connections": List[ClientDescribeClientVpnConnectionsResponseConnectionsTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeClientVpnEndpointsFiltersTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAssociatedTargetNetworksTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAssociatedTargetNetworksTypeDef",
    {"NetworkId": str, "NetworkType": str},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsActiveDirectoryTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsActiveDirectoryTypeDef",
    {"DirectoryId": str},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsMutualAuthenticationTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsMutualAuthenticationTypeDef",
    {"ClientRootCertificateChain": str},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsTypeDef",
    {
        "Type": Literal["certificate-authentication", "directory-service-authentication"],
        "ActiveDirectory": ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsActiveDirectoryTypeDef,
        "MutualAuthentication": ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsMutualAuthenticationTypeDef,
    },
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsConnectionLogOptionsTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsConnectionLogOptionsTypeDef",
    {"Enabled": bool, "CloudwatchLogGroup": str, "CloudwatchLogStream": str},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsStatusTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsStatusTypeDef",
    {"Code": Literal["pending-associate", "available", "deleting", "deleted"], "Message": str},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsTagsTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Description": str,
        "Status": ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsStatusTypeDef,
        "CreationTime": str,
        "DeletionTime": str,
        "DnsName": str,
        "ClientCidrBlock": str,
        "DnsServers": List[str],
        "SplitTunnel": bool,
        "VpnProtocol": str,
        "TransportProtocol": Literal["tcp", "udp"],
        "AssociatedTargetNetworks": List[
            ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAssociatedTargetNetworksTypeDef
        ],
        "ServerCertificateArn": str,
        "AuthenticationOptions": List[
            ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsAuthenticationOptionsTypeDef
        ],
        "ConnectionLogOptions": ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsConnectionLogOptionsTypeDef,
        "Tags": List[ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsTagsTypeDef],
    },
    total=False,
)

ClientDescribeClientVpnEndpointsResponseTypeDef = TypedDict(
    "ClientDescribeClientVpnEndpointsResponseTypeDef",
    {
        "ClientVpnEndpoints": List[
            ClientDescribeClientVpnEndpointsResponseClientVpnEndpointsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeClientVpnRoutesFiltersTypeDef = TypedDict(
    "ClientDescribeClientVpnRoutesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeClientVpnRoutesResponseRoutesStatusTypeDef = TypedDict(
    "ClientDescribeClientVpnRoutesResponseRoutesStatusTypeDef",
    {"Code": Literal["creating", "active", "failed", "deleting"], "Message": str},
    total=False,
)

ClientDescribeClientVpnRoutesResponseRoutesTypeDef = TypedDict(
    "ClientDescribeClientVpnRoutesResponseRoutesTypeDef",
    {
        "ClientVpnEndpointId": str,
        "DestinationCidr": str,
        "TargetSubnet": str,
        "Type": str,
        "Origin": str,
        "Status": ClientDescribeClientVpnRoutesResponseRoutesStatusTypeDef,
        "Description": str,
    },
    total=False,
)

ClientDescribeClientVpnRoutesResponseTypeDef = TypedDict(
    "ClientDescribeClientVpnRoutesResponseTypeDef",
    {"Routes": List[ClientDescribeClientVpnRoutesResponseRoutesTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeClientVpnTargetNetworksFiltersTypeDef = TypedDict(
    "ClientDescribeClientVpnTargetNetworksFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeClientVpnTargetNetworksResponseClientVpnTargetNetworksStatusTypeDef = TypedDict(
    "ClientDescribeClientVpnTargetNetworksResponseClientVpnTargetNetworksStatusTypeDef",
    {
        "Code": Literal[
            "associating", "associated", "association-failed", "disassociating", "disassociated"
        ],
        "Message": str,
    },
    total=False,
)

ClientDescribeClientVpnTargetNetworksResponseClientVpnTargetNetworksTypeDef = TypedDict(
    "ClientDescribeClientVpnTargetNetworksResponseClientVpnTargetNetworksTypeDef",
    {
        "AssociationId": str,
        "VpcId": str,
        "TargetNetworkId": str,
        "ClientVpnEndpointId": str,
        "Status": ClientDescribeClientVpnTargetNetworksResponseClientVpnTargetNetworksStatusTypeDef,
        "SecurityGroups": List[str],
    },
    total=False,
)

ClientDescribeClientVpnTargetNetworksResponseTypeDef = TypedDict(
    "ClientDescribeClientVpnTargetNetworksResponseTypeDef",
    {
        "ClientVpnTargetNetworks": List[
            ClientDescribeClientVpnTargetNetworksResponseClientVpnTargetNetworksTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeCoipPoolsFiltersTypeDef = TypedDict(
    "ClientDescribeCoipPoolsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeCoipPoolsResponseCoipPoolsTagsTypeDef = TypedDict(
    "ClientDescribeCoipPoolsResponseCoipPoolsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeCoipPoolsResponseCoipPoolsTypeDef = TypedDict(
    "ClientDescribeCoipPoolsResponseCoipPoolsTypeDef",
    {
        "PoolId": str,
        "PoolCidrs": List[str],
        "LocalGatewayRouteTableId": str,
        "Tags": List[ClientDescribeCoipPoolsResponseCoipPoolsTagsTypeDef],
    },
    total=False,
)

ClientDescribeCoipPoolsResponseTypeDef = TypedDict(
    "ClientDescribeCoipPoolsResponseTypeDef",
    {"CoipPools": List[ClientDescribeCoipPoolsResponseCoipPoolsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesImageTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesImageTypeDef",
    {
        "Checksum": str,
        "Format": Literal["VMDK", "RAW", "VHD"],
        "ImportManifestUrl": str,
        "Size": int,
    },
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesVolumeTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesVolumeTypeDef",
    {"Id": str, "Size": int},
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesTypeDef",
    {
        "AvailabilityZone": str,
        "BytesConverted": int,
        "Description": str,
        "Image": ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesImageTypeDef,
        "Status": str,
        "StatusMessage": str,
        "Volume": ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesVolumeTypeDef,
    },
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportInstanceTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportInstanceTypeDef",
    {
        "Description": str,
        "InstanceId": str,
        "Platform": str,
        "Volumes": List[
            ClientDescribeConversionTasksResponseConversionTasksImportInstanceVolumesTypeDef
        ],
    },
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportVolumeImageTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportVolumeImageTypeDef",
    {
        "Checksum": str,
        "Format": Literal["VMDK", "RAW", "VHD"],
        "ImportManifestUrl": str,
        "Size": int,
    },
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportVolumeVolumeTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportVolumeVolumeTypeDef",
    {"Id": str, "Size": int},
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksImportVolumeTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksImportVolumeTypeDef",
    {
        "AvailabilityZone": str,
        "BytesConverted": int,
        "Description": str,
        "Image": ClientDescribeConversionTasksResponseConversionTasksImportVolumeImageTypeDef,
        "Volume": ClientDescribeConversionTasksResponseConversionTasksImportVolumeVolumeTypeDef,
    },
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksTagsTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeConversionTasksResponseConversionTasksTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseConversionTasksTypeDef",
    {
        "ConversionTaskId": str,
        "ExpirationTime": str,
        "ImportInstance": ClientDescribeConversionTasksResponseConversionTasksImportInstanceTypeDef,
        "ImportVolume": ClientDescribeConversionTasksResponseConversionTasksImportVolumeTypeDef,
        "State": Literal["active", "cancelling", "cancelled", "completed"],
        "StatusMessage": str,
        "Tags": List[ClientDescribeConversionTasksResponseConversionTasksTagsTypeDef],
    },
    total=False,
)

ClientDescribeConversionTasksResponseTypeDef = TypedDict(
    "ClientDescribeConversionTasksResponseTypeDef",
    {"ConversionTasks": List[ClientDescribeConversionTasksResponseConversionTasksTypeDef]},
    total=False,
)

ClientDescribeCustomerGatewaysFiltersTypeDef = TypedDict(
    "ClientDescribeCustomerGatewaysFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeCustomerGatewaysResponseCustomerGatewaysTagsTypeDef = TypedDict(
    "ClientDescribeCustomerGatewaysResponseCustomerGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeCustomerGatewaysResponseCustomerGatewaysTypeDef = TypedDict(
    "ClientDescribeCustomerGatewaysResponseCustomerGatewaysTypeDef",
    {
        "BgpAsn": str,
        "CustomerGatewayId": str,
        "IpAddress": str,
        "CertificateArn": str,
        "State": str,
        "Type": str,
        "DeviceName": str,
        "Tags": List[ClientDescribeCustomerGatewaysResponseCustomerGatewaysTagsTypeDef],
    },
    total=False,
)

ClientDescribeCustomerGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeCustomerGatewaysResponseTypeDef",
    {"CustomerGateways": List[ClientDescribeCustomerGatewaysResponseCustomerGatewaysTypeDef]},
    total=False,
)

ClientDescribeDhcpOptionsFiltersTypeDef = TypedDict(
    "ClientDescribeDhcpOptionsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeDhcpOptionsResponseDhcpOptionsDhcpConfigurationsValuesTypeDef = TypedDict(
    "ClientDescribeDhcpOptionsResponseDhcpOptionsDhcpConfigurationsValuesTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeDhcpOptionsResponseDhcpOptionsDhcpConfigurationsTypeDef = TypedDict(
    "ClientDescribeDhcpOptionsResponseDhcpOptionsDhcpConfigurationsTypeDef",
    {
        "Key": str,
        "Values": List[ClientDescribeDhcpOptionsResponseDhcpOptionsDhcpConfigurationsValuesTypeDef],
    },
    total=False,
)

ClientDescribeDhcpOptionsResponseDhcpOptionsTagsTypeDef = TypedDict(
    "ClientDescribeDhcpOptionsResponseDhcpOptionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeDhcpOptionsResponseDhcpOptionsTypeDef = TypedDict(
    "ClientDescribeDhcpOptionsResponseDhcpOptionsTypeDef",
    {
        "DhcpConfigurations": List[
            ClientDescribeDhcpOptionsResponseDhcpOptionsDhcpConfigurationsTypeDef
        ],
        "DhcpOptionsId": str,
        "OwnerId": str,
        "Tags": List[ClientDescribeDhcpOptionsResponseDhcpOptionsTagsTypeDef],
    },
    total=False,
)

ClientDescribeDhcpOptionsResponseTypeDef = TypedDict(
    "ClientDescribeDhcpOptionsResponseTypeDef",
    {"DhcpOptions": List[ClientDescribeDhcpOptionsResponseDhcpOptionsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeEgressOnlyInternetGatewaysResponseEgressOnlyInternetGatewaysAttachmentsTypeDef = TypedDict(
    "ClientDescribeEgressOnlyInternetGatewaysResponseEgressOnlyInternetGatewaysAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientDescribeEgressOnlyInternetGatewaysResponseEgressOnlyInternetGatewaysTypeDef = TypedDict(
    "ClientDescribeEgressOnlyInternetGatewaysResponseEgressOnlyInternetGatewaysTypeDef",
    {
        "Attachments": List[
            ClientDescribeEgressOnlyInternetGatewaysResponseEgressOnlyInternetGatewaysAttachmentsTypeDef
        ],
        "EgressOnlyInternetGatewayId": str,
    },
    total=False,
)

ClientDescribeEgressOnlyInternetGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeEgressOnlyInternetGatewaysResponseTypeDef",
    {
        "EgressOnlyInternetGateways": List[
            ClientDescribeEgressOnlyInternetGatewaysResponseEgressOnlyInternetGatewaysTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeElasticGpusFiltersTypeDef = TypedDict(
    "ClientDescribeElasticGpusFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeElasticGpusResponseElasticGpuSetElasticGpuHealthTypeDef = TypedDict(
    "ClientDescribeElasticGpusResponseElasticGpuSetElasticGpuHealthTypeDef",
    {"Status": Literal["OK", "IMPAIRED"]},
    total=False,
)

ClientDescribeElasticGpusResponseElasticGpuSetTypeDef = TypedDict(
    "ClientDescribeElasticGpusResponseElasticGpuSetTypeDef",
    {
        "ElasticGpuId": str,
        "AvailabilityZone": str,
        "ElasticGpuType": str,
        "ElasticGpuHealth": ClientDescribeElasticGpusResponseElasticGpuSetElasticGpuHealthTypeDef,
        "ElasticGpuState": str,
        "InstanceId": str,
    },
    total=False,
)

ClientDescribeElasticGpusResponseTypeDef = TypedDict(
    "ClientDescribeElasticGpusResponseTypeDef",
    {
        "ElasticGpuSet": List[ClientDescribeElasticGpusResponseElasticGpuSetTypeDef],
        "MaxResults": int,
        "NextToken": str,
    },
    total=False,
)

ClientDescribeExportImageTasksFiltersTypeDef = TypedDict(
    "ClientDescribeExportImageTasksFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeExportImageTasksResponseExportImageTasksS3ExportLocationTypeDef = TypedDict(
    "ClientDescribeExportImageTasksResponseExportImageTasksS3ExportLocationTypeDef",
    {"S3Bucket": str, "S3Prefix": str},
    total=False,
)

ClientDescribeExportImageTasksResponseExportImageTasksTypeDef = TypedDict(
    "ClientDescribeExportImageTasksResponseExportImageTasksTypeDef",
    {
        "Description": str,
        "ExportImageTaskId": str,
        "ImageId": str,
        "Progress": str,
        "S3ExportLocation": ClientDescribeExportImageTasksResponseExportImageTasksS3ExportLocationTypeDef,
        "Status": str,
        "StatusMessage": str,
    },
    total=False,
)

ClientDescribeExportImageTasksResponseTypeDef = TypedDict(
    "ClientDescribeExportImageTasksResponseTypeDef",
    {
        "ExportImageTasks": List[ClientDescribeExportImageTasksResponseExportImageTasksTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeExportTasksResponseExportTasksExportToS3TaskTypeDef = TypedDict(
    "ClientDescribeExportTasksResponseExportTasksExportToS3TaskTypeDef",
    {
        "ContainerFormat": str,
        "DiskImageFormat": Literal["VMDK", "RAW", "VHD"],
        "S3Bucket": str,
        "S3Key": str,
    },
    total=False,
)

ClientDescribeExportTasksResponseExportTasksInstanceExportDetailsTypeDef = TypedDict(
    "ClientDescribeExportTasksResponseExportTasksInstanceExportDetailsTypeDef",
    {"InstanceId": str, "TargetEnvironment": Literal["citrix", "vmware", "microsoft"]},
    total=False,
)

ClientDescribeExportTasksResponseExportTasksTypeDef = TypedDict(
    "ClientDescribeExportTasksResponseExportTasksTypeDef",
    {
        "Description": str,
        "ExportTaskId": str,
        "ExportToS3Task": ClientDescribeExportTasksResponseExportTasksExportToS3TaskTypeDef,
        "InstanceExportDetails": ClientDescribeExportTasksResponseExportTasksInstanceExportDetailsTypeDef,
        "State": Literal["active", "cancelling", "cancelled", "completed"],
        "StatusMessage": str,
    },
    total=False,
)

ClientDescribeExportTasksResponseTypeDef = TypedDict(
    "ClientDescribeExportTasksResponseTypeDef",
    {"ExportTasks": List[ClientDescribeExportTasksResponseExportTasksTypeDef]},
    total=False,
)

ClientDescribeFastSnapshotRestoresFiltersTypeDef = TypedDict(
    "ClientDescribeFastSnapshotRestoresFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeFastSnapshotRestoresResponseFastSnapshotRestoresTypeDef = TypedDict(
    "ClientDescribeFastSnapshotRestoresResponseFastSnapshotRestoresTypeDef",
    {
        "SnapshotId": str,
        "AvailabilityZone": str,
        "State": Literal["enabling", "optimizing", "enabled", "disabling", "disabled"],
        "StateTransitionReason": str,
        "OwnerId": str,
        "OwnerAlias": str,
        "EnablingTime": datetime,
        "OptimizingTime": datetime,
        "EnabledTime": datetime,
        "DisablingTime": datetime,
        "DisabledTime": datetime,
    },
    total=False,
)

ClientDescribeFastSnapshotRestoresResponseTypeDef = TypedDict(
    "ClientDescribeFastSnapshotRestoresResponseTypeDef",
    {
        "FastSnapshotRestores": List[
            ClientDescribeFastSnapshotRestoresResponseFastSnapshotRestoresTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeFleetHistoryResponseHistoryRecordsEventInformationTypeDef = TypedDict(
    "ClientDescribeFleetHistoryResponseHistoryRecordsEventInformationTypeDef",
    {"EventDescription": str, "EventSubType": str, "InstanceId": str},
    total=False,
)

ClientDescribeFleetHistoryResponseHistoryRecordsTypeDef = TypedDict(
    "ClientDescribeFleetHistoryResponseHistoryRecordsTypeDef",
    {
        "EventInformation": ClientDescribeFleetHistoryResponseHistoryRecordsEventInformationTypeDef,
        "EventType": Literal["instance-change", "fleet-change", "service-error"],
        "Timestamp": datetime,
    },
    total=False,
)

ClientDescribeFleetHistoryResponseTypeDef = TypedDict(
    "ClientDescribeFleetHistoryResponseTypeDef",
    {
        "HistoryRecords": List[ClientDescribeFleetHistoryResponseHistoryRecordsTypeDef],
        "LastEvaluatedTime": datetime,
        "NextToken": str,
        "FleetId": str,
        "StartTime": datetime,
    },
    total=False,
)

ClientDescribeFleetInstancesFiltersTypeDef = TypedDict(
    "ClientDescribeFleetInstancesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeFleetInstancesResponseActiveInstancesTypeDef = TypedDict(
    "ClientDescribeFleetInstancesResponseActiveInstancesTypeDef",
    {
        "InstanceId": str,
        "InstanceType": str,
        "SpotInstanceRequestId": str,
        "InstanceHealth": Literal["healthy", "unhealthy"],
    },
    total=False,
)

ClientDescribeFleetInstancesResponseTypeDef = TypedDict(
    "ClientDescribeFleetInstancesResponseTypeDef",
    {
        "ActiveInstances": List[ClientDescribeFleetInstancesResponseActiveInstancesTypeDef],
        "NextToken": str,
        "FleetId": str,
    },
    total=False,
)

ClientDescribeFleetsFiltersTypeDef = TypedDict(
    "ClientDescribeFleetsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesOverridesTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesTypeDef",
    {
        "LaunchTemplateSpecification": ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef,
        "Overrides": ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesOverridesTypeDef,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsErrorsTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsErrorsTypeDef",
    {
        "LaunchTemplateAndOverrides": ClientDescribeFleetsResponseFleetsErrorsLaunchTemplateAndOverridesTypeDef,
        "Lifecycle": Literal["spot", "on-demand"],
        "ErrorCode": str,
        "ErrorMessage": str,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesOverridesTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesTypeDef",
    {
        "LaunchTemplateSpecification": ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef,
        "Overrides": ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesOverridesTypeDef,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsInstancesTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsInstancesTypeDef",
    {
        "LaunchTemplateAndOverrides": ClientDescribeFleetsResponseFleetsInstancesLaunchTemplateAndOverridesTypeDef,
        "Lifecycle": Literal["spot", "on-demand"],
        "InstanceIds": List[str],
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Platform": str,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsOverridesPlacementTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsOverridesTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsOverridesPlacementTypeDef,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsTypeDef",
    {
        "LaunchTemplateSpecification": ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef,
        "Overrides": List[ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsOverridesTypeDef],
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsOnDemandOptionsTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsOnDemandOptionsTypeDef",
    {
        "AllocationStrategy": Literal["lowest-price", "prioritized"],
        "SingleInstanceType": bool,
        "SingleAvailabilityZone": bool,
        "MinTargetCapacity": int,
        "MaxTotalPrice": str,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsSpotOptionsTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsSpotOptionsTypeDef",
    {
        "AllocationStrategy": Literal["lowest-price", "diversified", "capacity-optimized"],
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
        "InstancePoolsToUseCount": int,
        "SingleInstanceType": bool,
        "SingleAvailabilityZone": bool,
        "MinTargetCapacity": int,
        "MaxTotalPrice": str,
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsTagsTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeFleetsResponseFleetsTargetCapacitySpecificationTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsTargetCapacitySpecificationTypeDef",
    {
        "TotalTargetCapacity": int,
        "OnDemandTargetCapacity": int,
        "SpotTargetCapacity": int,
        "DefaultTargetCapacityType": Literal["spot", "on-demand"],
    },
    total=False,
)

ClientDescribeFleetsResponseFleetsTypeDef = TypedDict(
    "ClientDescribeFleetsResponseFleetsTypeDef",
    {
        "ActivityStatus": Literal[
            "error", "pending_fulfillment", "pending_termination", "fulfilled"
        ],
        "CreateTime": datetime,
        "FleetId": str,
        "FleetState": Literal[
            "submitted",
            "active",
            "deleted",
            "failed",
            "deleted_running",
            "deleted_terminating",
            "modifying",
        ],
        "ClientToken": str,
        "ExcessCapacityTerminationPolicy": Literal["no-termination", "termination"],
        "FulfilledCapacity": float,
        "FulfilledOnDemandCapacity": float,
        "LaunchTemplateConfigs": List[
            ClientDescribeFleetsResponseFleetsLaunchTemplateConfigsTypeDef
        ],
        "TargetCapacitySpecification": ClientDescribeFleetsResponseFleetsTargetCapacitySpecificationTypeDef,
        "TerminateInstancesWithExpiration": bool,
        "Type": Literal["request", "maintain", "instant"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "ReplaceUnhealthyInstances": bool,
        "SpotOptions": ClientDescribeFleetsResponseFleetsSpotOptionsTypeDef,
        "OnDemandOptions": ClientDescribeFleetsResponseFleetsOnDemandOptionsTypeDef,
        "Tags": List[ClientDescribeFleetsResponseFleetsTagsTypeDef],
        "Errors": List[ClientDescribeFleetsResponseFleetsErrorsTypeDef],
        "Instances": List[ClientDescribeFleetsResponseFleetsInstancesTypeDef],
    },
    total=False,
)

ClientDescribeFleetsResponseTypeDef = TypedDict(
    "ClientDescribeFleetsResponseTypeDef",
    {"NextToken": str, "Fleets": List[ClientDescribeFleetsResponseFleetsTypeDef]},
    total=False,
)

ClientDescribeFlowLogsFiltersTypeDef = TypedDict(
    "ClientDescribeFlowLogsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeFlowLogsResponseFlowLogsTypeDef = TypedDict(
    "ClientDescribeFlowLogsResponseFlowLogsTypeDef",
    {
        "CreationTime": datetime,
        "DeliverLogsErrorMessage": str,
        "DeliverLogsPermissionArn": str,
        "DeliverLogsStatus": str,
        "FlowLogId": str,
        "FlowLogStatus": str,
        "LogGroupName": str,
        "ResourceId": str,
        "TrafficType": Literal["ACCEPT", "REJECT", "ALL"],
        "LogDestinationType": Literal["cloud-watch-logs", "s3"],
        "LogDestination": str,
        "LogFormat": str,
    },
    total=False,
)

ClientDescribeFlowLogsResponseTypeDef = TypedDict(
    "ClientDescribeFlowLogsResponseTypeDef",
    {"FlowLogs": List[ClientDescribeFlowLogsResponseFlowLogsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeLoadPermissionsTypeDef = TypedDict(
    "ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeLoadPermissionsTypeDef",
    {"UserId": str, "Group": str},
    total=False,
)

ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeProductCodesTypeDef = TypedDict(
    "ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeTypeDef = TypedDict(
    "ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeTypeDef",
    {
        "FpgaImageId": str,
        "Name": str,
        "Description": str,
        "LoadPermissions": List[
            ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeLoadPermissionsTypeDef
        ],
        "ProductCodes": List[
            ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeProductCodesTypeDef
        ],
    },
    total=False,
)

ClientDescribeFpgaImageAttributeResponseTypeDef = TypedDict(
    "ClientDescribeFpgaImageAttributeResponseTypeDef",
    {"FpgaImageAttribute": ClientDescribeFpgaImageAttributeResponseFpgaImageAttributeTypeDef},
    total=False,
)

ClientDescribeFpgaImagesFiltersTypeDef = TypedDict(
    "ClientDescribeFpgaImagesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeFpgaImagesResponseFpgaImagesPciIdTypeDef = TypedDict(
    "ClientDescribeFpgaImagesResponseFpgaImagesPciIdTypeDef",
    {"DeviceId": str, "VendorId": str, "SubsystemId": str, "SubsystemVendorId": str},
    total=False,
)

ClientDescribeFpgaImagesResponseFpgaImagesProductCodesTypeDef = TypedDict(
    "ClientDescribeFpgaImagesResponseFpgaImagesProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeFpgaImagesResponseFpgaImagesStateTypeDef = TypedDict(
    "ClientDescribeFpgaImagesResponseFpgaImagesStateTypeDef",
    {"Code": Literal["pending", "failed", "available", "unavailable"], "Message": str},
    total=False,
)

ClientDescribeFpgaImagesResponseFpgaImagesTagsTypeDef = TypedDict(
    "ClientDescribeFpgaImagesResponseFpgaImagesTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeFpgaImagesResponseFpgaImagesTypeDef = TypedDict(
    "ClientDescribeFpgaImagesResponseFpgaImagesTypeDef",
    {
        "FpgaImageId": str,
        "FpgaImageGlobalId": str,
        "Name": str,
        "Description": str,
        "ShellVersion": str,
        "PciId": ClientDescribeFpgaImagesResponseFpgaImagesPciIdTypeDef,
        "State": ClientDescribeFpgaImagesResponseFpgaImagesStateTypeDef,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "OwnerId": str,
        "OwnerAlias": str,
        "ProductCodes": List[ClientDescribeFpgaImagesResponseFpgaImagesProductCodesTypeDef],
        "Tags": List[ClientDescribeFpgaImagesResponseFpgaImagesTagsTypeDef],
        "Public": bool,
        "DataRetentionSupport": bool,
    },
    total=False,
)

ClientDescribeFpgaImagesResponseTypeDef = TypedDict(
    "ClientDescribeFpgaImagesResponseTypeDef",
    {"FpgaImages": List[ClientDescribeFpgaImagesResponseFpgaImagesTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeHostReservationOfferingsFiltersTypeDef = TypedDict(
    "ClientDescribeHostReservationOfferingsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeHostReservationOfferingsResponseOfferingSetTypeDef = TypedDict(
    "ClientDescribeHostReservationOfferingsResponseOfferingSetTypeDef",
    {
        "CurrencyCode": str,
        "Duration": int,
        "HourlyPrice": str,
        "InstanceFamily": str,
        "OfferingId": str,
        "PaymentOption": Literal["AllUpfront", "PartialUpfront", "NoUpfront"],
        "UpfrontPrice": str,
    },
    total=False,
)

ClientDescribeHostReservationOfferingsResponseTypeDef = TypedDict(
    "ClientDescribeHostReservationOfferingsResponseTypeDef",
    {
        "NextToken": str,
        "OfferingSet": List[ClientDescribeHostReservationOfferingsResponseOfferingSetTypeDef],
    },
    total=False,
)

ClientDescribeHostReservationsFiltersTypeDef = TypedDict(
    "ClientDescribeHostReservationsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeHostReservationsResponseHostReservationSetTagsTypeDef = TypedDict(
    "ClientDescribeHostReservationsResponseHostReservationSetTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeHostReservationsResponseHostReservationSetTypeDef = TypedDict(
    "ClientDescribeHostReservationsResponseHostReservationSetTypeDef",
    {
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "End": datetime,
        "HostIdSet": List[str],
        "HostReservationId": str,
        "HourlyPrice": str,
        "InstanceFamily": str,
        "OfferingId": str,
        "PaymentOption": Literal["AllUpfront", "PartialUpfront", "NoUpfront"],
        "Start": datetime,
        "State": Literal["payment-pending", "payment-failed", "active", "retired"],
        "UpfrontPrice": str,
        "Tags": List[ClientDescribeHostReservationsResponseHostReservationSetTagsTypeDef],
    },
    total=False,
)

ClientDescribeHostReservationsResponseTypeDef = TypedDict(
    "ClientDescribeHostReservationsResponseTypeDef",
    {
        "HostReservationSet": List[ClientDescribeHostReservationsResponseHostReservationSetTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeHostsFiltersTypeDef = TypedDict(
    "ClientDescribeHostsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeHostsResponseHostsAvailableCapacityAvailableInstanceCapacityTypeDef = TypedDict(
    "ClientDescribeHostsResponseHostsAvailableCapacityAvailableInstanceCapacityTypeDef",
    {"AvailableCapacity": int, "InstanceType": str, "TotalCapacity": int},
    total=False,
)

ClientDescribeHostsResponseHostsAvailableCapacityTypeDef = TypedDict(
    "ClientDescribeHostsResponseHostsAvailableCapacityTypeDef",
    {
        "AvailableInstanceCapacity": List[
            ClientDescribeHostsResponseHostsAvailableCapacityAvailableInstanceCapacityTypeDef
        ],
        "AvailableVCpus": int,
    },
    total=False,
)

ClientDescribeHostsResponseHostsHostPropertiesTypeDef = TypedDict(
    "ClientDescribeHostsResponseHostsHostPropertiesTypeDef",
    {"Cores": int, "InstanceType": str, "InstanceFamily": str, "Sockets": int, "TotalVCpus": int},
    total=False,
)

ClientDescribeHostsResponseHostsInstancesTypeDef = TypedDict(
    "ClientDescribeHostsResponseHostsInstancesTypeDef",
    {"InstanceId": str, "InstanceType": str, "OwnerId": str},
    total=False,
)

ClientDescribeHostsResponseHostsTagsTypeDef = TypedDict(
    "ClientDescribeHostsResponseHostsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeHostsResponseHostsTypeDef = TypedDict(
    "ClientDescribeHostsResponseHostsTypeDef",
    {
        "AutoPlacement": Literal["on", "off"],
        "AvailabilityZone": str,
        "AvailableCapacity": ClientDescribeHostsResponseHostsAvailableCapacityTypeDef,
        "ClientToken": str,
        "HostId": str,
        "HostProperties": ClientDescribeHostsResponseHostsHostPropertiesTypeDef,
        "HostReservationId": str,
        "Instances": List[ClientDescribeHostsResponseHostsInstancesTypeDef],
        "State": Literal[
            "available",
            "under-assessment",
            "permanent-failure",
            "released",
            "released-permanent-failure",
            "pending",
        ],
        "AllocationTime": datetime,
        "ReleaseTime": datetime,
        "Tags": List[ClientDescribeHostsResponseHostsTagsTypeDef],
        "HostRecovery": Literal["on", "off"],
        "AllowsMultipleInstanceTypes": Literal["on", "off"],
        "OwnerId": str,
        "AvailabilityZoneId": str,
        "MemberOfServiceLinkedResourceGroup": bool,
    },
    total=False,
)

ClientDescribeHostsResponseTypeDef = TypedDict(
    "ClientDescribeHostsResponseTypeDef",
    {"Hosts": List[ClientDescribeHostsResponseHostsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeIamInstanceProfileAssociationsFiltersTypeDef = TypedDict(
    "ClientDescribeIamInstanceProfileAssociationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeIamInstanceProfileAssociationsResponseIamInstanceProfileAssociationsIamInstanceProfileTypeDef = TypedDict(
    "ClientDescribeIamInstanceProfileAssociationsResponseIamInstanceProfileAssociationsIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

ClientDescribeIamInstanceProfileAssociationsResponseIamInstanceProfileAssociationsTypeDef = TypedDict(
    "ClientDescribeIamInstanceProfileAssociationsResponseIamInstanceProfileAssociationsTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "IamInstanceProfile": ClientDescribeIamInstanceProfileAssociationsResponseIamInstanceProfileAssociationsIamInstanceProfileTypeDef,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
        "Timestamp": datetime,
    },
    total=False,
)

ClientDescribeIamInstanceProfileAssociationsResponseTypeDef = TypedDict(
    "ClientDescribeIamInstanceProfileAssociationsResponseTypeDef",
    {
        "IamInstanceProfileAssociations": List[
            ClientDescribeIamInstanceProfileAssociationsResponseIamInstanceProfileAssociationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeIdFormatResponseStatusesTypeDef = TypedDict(
    "ClientDescribeIdFormatResponseStatusesTypeDef",
    {"Deadline": datetime, "Resource": str, "UseLongIds": bool},
    total=False,
)

ClientDescribeIdFormatResponseTypeDef = TypedDict(
    "ClientDescribeIdFormatResponseTypeDef",
    {"Statuses": List[ClientDescribeIdFormatResponseStatusesTypeDef]},
    total=False,
)

ClientDescribeIdentityIdFormatResponseStatusesTypeDef = TypedDict(
    "ClientDescribeIdentityIdFormatResponseStatusesTypeDef",
    {"Deadline": datetime, "Resource": str, "UseLongIds": bool},
    total=False,
)

ClientDescribeIdentityIdFormatResponseTypeDef = TypedDict(
    "ClientDescribeIdentityIdFormatResponseTypeDef",
    {"Statuses": List[ClientDescribeIdentityIdFormatResponseStatusesTypeDef]},
    total=False,
)

ClientDescribeImageAttributeResponseBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientDescribeImageAttributeResponseBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientDescribeImageAttributeResponseBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientDescribeImageAttributeResponseDescriptionTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseDescriptionTypeDef", {"Value": str}, total=False
)

ClientDescribeImageAttributeResponseKernelIdTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseKernelIdTypeDef", {"Value": str}, total=False
)

ClientDescribeImageAttributeResponseLaunchPermissionsTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseLaunchPermissionsTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientDescribeImageAttributeResponseProductCodesTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeImageAttributeResponseRamdiskIdTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseRamdiskIdTypeDef", {"Value": str}, total=False
)

ClientDescribeImageAttributeResponseSriovNetSupportTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseSriovNetSupportTypeDef", {"Value": str}, total=False
)

ClientDescribeImageAttributeResponseTypeDef = TypedDict(
    "ClientDescribeImageAttributeResponseTypeDef",
    {
        "BlockDeviceMappings": List[ClientDescribeImageAttributeResponseBlockDeviceMappingsTypeDef],
        "ImageId": str,
        "LaunchPermissions": List[ClientDescribeImageAttributeResponseLaunchPermissionsTypeDef],
        "ProductCodes": List[ClientDescribeImageAttributeResponseProductCodesTypeDef],
        "Description": ClientDescribeImageAttributeResponseDescriptionTypeDef,
        "KernelId": ClientDescribeImageAttributeResponseKernelIdTypeDef,
        "RamdiskId": ClientDescribeImageAttributeResponseRamdiskIdTypeDef,
        "SriovNetSupport": ClientDescribeImageAttributeResponseSriovNetSupportTypeDef,
    },
    total=False,
)

ClientDescribeImagesFiltersTypeDef = TypedDict(
    "ClientDescribeImagesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeImagesResponseImagesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeImagesResponseImagesBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientDescribeImagesResponseImagesBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeImagesResponseImagesBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientDescribeImagesResponseImagesBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientDescribeImagesResponseImagesProductCodesTypeDef = TypedDict(
    "ClientDescribeImagesResponseImagesProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeImagesResponseImagesStateReasonTypeDef = TypedDict(
    "ClientDescribeImagesResponseImagesStateReasonTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDescribeImagesResponseImagesTagsTypeDef = TypedDict(
    "ClientDescribeImagesResponseImagesTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeImagesResponseImagesTypeDef = TypedDict(
    "ClientDescribeImagesResponseImagesTypeDef",
    {
        "Architecture": Literal["i386", "x86_64", "arm64"],
        "CreationDate": str,
        "ImageId": str,
        "ImageLocation": str,
        "ImageType": Literal["machine", "kernel", "ramdisk"],
        "Public": bool,
        "KernelId": str,
        "OwnerId": str,
        "Platform": str,
        "ProductCodes": List[ClientDescribeImagesResponseImagesProductCodesTypeDef],
        "RamdiskId": str,
        "State": Literal[
            "pending", "available", "invalid", "deregistered", "transient", "failed", "error"
        ],
        "BlockDeviceMappings": List[ClientDescribeImagesResponseImagesBlockDeviceMappingsTypeDef],
        "Description": str,
        "EnaSupport": bool,
        "Hypervisor": Literal["ovm", "xen"],
        "ImageOwnerAlias": str,
        "Name": str,
        "RootDeviceName": str,
        "RootDeviceType": Literal["ebs", "instance-store"],
        "SriovNetSupport": str,
        "StateReason": ClientDescribeImagesResponseImagesStateReasonTypeDef,
        "Tags": List[ClientDescribeImagesResponseImagesTagsTypeDef],
        "VirtualizationType": Literal["hvm", "paravirtual"],
    },
    total=False,
)

ClientDescribeImagesResponseTypeDef = TypedDict(
    "ClientDescribeImagesResponseTypeDef",
    {"Images": List[ClientDescribeImagesResponseImagesTypeDef]},
    total=False,
)

ClientDescribeImportImageTasksFiltersTypeDef = TypedDict(
    "ClientDescribeImportImageTasksFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeImportImageTasksResponseImportImageTasksLicenseSpecificationsTypeDef = TypedDict(
    "ClientDescribeImportImageTasksResponseImportImageTasksLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientDescribeImportImageTasksResponseImportImageTasksSnapshotDetailsUserBucketTypeDef = TypedDict(
    "ClientDescribeImportImageTasksResponseImportImageTasksSnapshotDetailsUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

ClientDescribeImportImageTasksResponseImportImageTasksSnapshotDetailsTypeDef = TypedDict(
    "ClientDescribeImportImageTasksResponseImportImageTasksSnapshotDetailsTypeDef",
    {
        "Description": str,
        "DeviceName": str,
        "DiskImageSize": float,
        "Format": str,
        "Progress": str,
        "SnapshotId": str,
        "Status": str,
        "StatusMessage": str,
        "Url": str,
        "UserBucket": ClientDescribeImportImageTasksResponseImportImageTasksSnapshotDetailsUserBucketTypeDef,
    },
    total=False,
)

ClientDescribeImportImageTasksResponseImportImageTasksTypeDef = TypedDict(
    "ClientDescribeImportImageTasksResponseImportImageTasksTypeDef",
    {
        "Architecture": str,
        "Description": str,
        "Encrypted": bool,
        "Hypervisor": str,
        "ImageId": str,
        "ImportTaskId": str,
        "KmsKeyId": str,
        "LicenseType": str,
        "Platform": str,
        "Progress": str,
        "SnapshotDetails": List[
            ClientDescribeImportImageTasksResponseImportImageTasksSnapshotDetailsTypeDef
        ],
        "Status": str,
        "StatusMessage": str,
        "LicenseSpecifications": List[
            ClientDescribeImportImageTasksResponseImportImageTasksLicenseSpecificationsTypeDef
        ],
    },
    total=False,
)

ClientDescribeImportImageTasksResponseTypeDef = TypedDict(
    "ClientDescribeImportImageTasksResponseTypeDef",
    {
        "ImportImageTasks": List[ClientDescribeImportImageTasksResponseImportImageTasksTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeImportSnapshotTasksFiltersTypeDef = TypedDict(
    "ClientDescribeImportSnapshotTasksFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksSnapshotTaskDetailUserBucketTypeDef = TypedDict(
    "ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksSnapshotTaskDetailUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksSnapshotTaskDetailTypeDef = TypedDict(
    "ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksSnapshotTaskDetailTypeDef",
    {
        "Description": str,
        "DiskImageSize": float,
        "Encrypted": bool,
        "Format": str,
        "KmsKeyId": str,
        "Progress": str,
        "SnapshotId": str,
        "Status": str,
        "StatusMessage": str,
        "Url": str,
        "UserBucket": ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksSnapshotTaskDetailUserBucketTypeDef,
    },
    total=False,
)

ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksTypeDef = TypedDict(
    "ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksTypeDef",
    {
        "Description": str,
        "ImportTaskId": str,
        "SnapshotTaskDetail": ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksSnapshotTaskDetailTypeDef,
    },
    total=False,
)

ClientDescribeImportSnapshotTasksResponseTypeDef = TypedDict(
    "ClientDescribeImportSnapshotTasksResponseTypeDef",
    {
        "ImportSnapshotTasks": List[
            ClientDescribeImportSnapshotTasksResponseImportSnapshotTasksTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeInstanceAttributeResponseBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseBlockDeviceMappingsEbsTypeDef",
    {
        "AttachTime": datetime,
        "DeleteOnTermination": bool,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
        "VolumeId": str,
    },
    total=False,
)

ClientDescribeInstanceAttributeResponseBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "Ebs": ClientDescribeInstanceAttributeResponseBlockDeviceMappingsEbsTypeDef,
    },
    total=False,
)

ClientDescribeInstanceAttributeResponseDisableApiTerminationTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseDisableApiTerminationTypeDef",
    {"Value": bool},
    total=False,
)

ClientDescribeInstanceAttributeResponseEbsOptimizedTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseEbsOptimizedTypeDef", {"Value": bool}, total=False
)

ClientDescribeInstanceAttributeResponseEnaSupportTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseEnaSupportTypeDef", {"Value": bool}, total=False
)

ClientDescribeInstanceAttributeResponseGroupsTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeInstanceAttributeResponseInstanceInitiatedShutdownBehaviorTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseInstanceInitiatedShutdownBehaviorTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeInstanceAttributeResponseInstanceTypeTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseInstanceTypeTypeDef", {"Value": str}, total=False
)

ClientDescribeInstanceAttributeResponseKernelIdTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseKernelIdTypeDef", {"Value": str}, total=False
)

ClientDescribeInstanceAttributeResponseProductCodesTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeInstanceAttributeResponseRamdiskIdTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseRamdiskIdTypeDef", {"Value": str}, total=False
)

ClientDescribeInstanceAttributeResponseRootDeviceNameTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseRootDeviceNameTypeDef", {"Value": str}, total=False
)

ClientDescribeInstanceAttributeResponseSourceDestCheckTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseSourceDestCheckTypeDef", {"Value": bool}, total=False
)

ClientDescribeInstanceAttributeResponseSriovNetSupportTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseSriovNetSupportTypeDef", {"Value": str}, total=False
)

ClientDescribeInstanceAttributeResponseUserDataTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseUserDataTypeDef", {"Value": str}, total=False
)

ClientDescribeInstanceAttributeResponseTypeDef = TypedDict(
    "ClientDescribeInstanceAttributeResponseTypeDef",
    {
        "Groups": List[ClientDescribeInstanceAttributeResponseGroupsTypeDef],
        "BlockDeviceMappings": List[
            ClientDescribeInstanceAttributeResponseBlockDeviceMappingsTypeDef
        ],
        "DisableApiTermination": ClientDescribeInstanceAttributeResponseDisableApiTerminationTypeDef,
        "EnaSupport": ClientDescribeInstanceAttributeResponseEnaSupportTypeDef,
        "EbsOptimized": ClientDescribeInstanceAttributeResponseEbsOptimizedTypeDef,
        "InstanceId": str,
        "InstanceInitiatedShutdownBehavior": ClientDescribeInstanceAttributeResponseInstanceInitiatedShutdownBehaviorTypeDef,
        "InstanceType": ClientDescribeInstanceAttributeResponseInstanceTypeTypeDef,
        "KernelId": ClientDescribeInstanceAttributeResponseKernelIdTypeDef,
        "ProductCodes": List[ClientDescribeInstanceAttributeResponseProductCodesTypeDef],
        "RamdiskId": ClientDescribeInstanceAttributeResponseRamdiskIdTypeDef,
        "RootDeviceName": ClientDescribeInstanceAttributeResponseRootDeviceNameTypeDef,
        "SourceDestCheck": ClientDescribeInstanceAttributeResponseSourceDestCheckTypeDef,
        "SriovNetSupport": ClientDescribeInstanceAttributeResponseSriovNetSupportTypeDef,
        "UserData": ClientDescribeInstanceAttributeResponseUserDataTypeDef,
    },
    total=False,
)

ClientDescribeInstanceCreditSpecificationsFiltersTypeDef = TypedDict(
    "ClientDescribeInstanceCreditSpecificationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeInstanceCreditSpecificationsResponseInstanceCreditSpecificationsTypeDef = TypedDict(
    "ClientDescribeInstanceCreditSpecificationsResponseInstanceCreditSpecificationsTypeDef",
    {"InstanceId": str, "CpuCredits": str},
    total=False,
)

ClientDescribeInstanceCreditSpecificationsResponseTypeDef = TypedDict(
    "ClientDescribeInstanceCreditSpecificationsResponseTypeDef",
    {
        "InstanceCreditSpecifications": List[
            ClientDescribeInstanceCreditSpecificationsResponseInstanceCreditSpecificationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeInstanceStatusFiltersTypeDef = TypedDict(
    "ClientDescribeInstanceStatusFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeInstanceStatusResponseInstanceStatusesEventsTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesEventsTypeDef",
    {
        "InstanceEventId": str,
        "Code": Literal[
            "instance-reboot",
            "system-reboot",
            "system-maintenance",
            "instance-retirement",
            "instance-stop",
        ],
        "Description": str,
        "NotAfter": datetime,
        "NotBefore": datetime,
        "NotBeforeDeadline": datetime,
    },
    total=False,
)

ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStateTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStatusDetailsTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStatusDetailsTypeDef",
    {
        "ImpairedSince": datetime,
        "Name": str,
        "Status": Literal["passed", "failed", "insufficient-data", "initializing"],
    },
    total=False,
)

ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStatusTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStatusTypeDef",
    {
        "Details": List[
            ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStatusDetailsTypeDef
        ],
        "Status": Literal["ok", "impaired", "insufficient-data", "not-applicable", "initializing"],
    },
    total=False,
)

ClientDescribeInstanceStatusResponseInstanceStatusesSystemStatusDetailsTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesSystemStatusDetailsTypeDef",
    {
        "ImpairedSince": datetime,
        "Name": str,
        "Status": Literal["passed", "failed", "insufficient-data", "initializing"],
    },
    total=False,
)

ClientDescribeInstanceStatusResponseInstanceStatusesSystemStatusTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesSystemStatusTypeDef",
    {
        "Details": List[
            ClientDescribeInstanceStatusResponseInstanceStatusesSystemStatusDetailsTypeDef
        ],
        "Status": Literal["ok", "impaired", "insufficient-data", "not-applicable", "initializing"],
    },
    total=False,
)

ClientDescribeInstanceStatusResponseInstanceStatusesTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseInstanceStatusesTypeDef",
    {
        "AvailabilityZone": str,
        "OutpostArn": str,
        "Events": List[ClientDescribeInstanceStatusResponseInstanceStatusesEventsTypeDef],
        "InstanceId": str,
        "InstanceState": ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStateTypeDef,
        "InstanceStatus": ClientDescribeInstanceStatusResponseInstanceStatusesInstanceStatusTypeDef,
        "SystemStatus": ClientDescribeInstanceStatusResponseInstanceStatusesSystemStatusTypeDef,
    },
    total=False,
)

ClientDescribeInstanceStatusResponseTypeDef = TypedDict(
    "ClientDescribeInstanceStatusResponseTypeDef",
    {
        "InstanceStatuses": List[ClientDescribeInstanceStatusResponseInstanceStatusesTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeInstanceTypeOfferingsFiltersTypeDef = TypedDict(
    "ClientDescribeInstanceTypeOfferingsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeInstanceTypeOfferingsResponseInstanceTypeOfferingsTypeDef = TypedDict(
    "ClientDescribeInstanceTypeOfferingsResponseInstanceTypeOfferingsTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "LocationType": Literal["region", "availability-zone", "availability-zone-id"],
        "Location": str,
    },
    total=False,
)

ClientDescribeInstanceTypeOfferingsResponseTypeDef = TypedDict(
    "ClientDescribeInstanceTypeOfferingsResponseTypeDef",
    {
        "InstanceTypeOfferings": List[
            ClientDescribeInstanceTypeOfferingsResponseInstanceTypeOfferingsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeInstanceTypesFiltersTypeDef = TypedDict(
    "ClientDescribeInstanceTypesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeInstanceTypesResponseInstanceTypesEbsInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesEbsInfoTypeDef",
    {
        "EbsOptimizedSupport": Literal["unsupported", "supported", "default"],
        "EncryptionSupport": Literal["unsupported", "supported"],
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoFpgasMemoryInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoFpgasMemoryInfoTypeDef",
    {"SizeInMiB": int},
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoFpgasTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoFpgasTypeDef",
    {
        "Name": str,
        "Manufacturer": str,
        "Count": int,
        "MemoryInfo": ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoFpgasMemoryInfoTypeDef,
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoTypeDef",
    {
        "Fpgas": List[ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoFpgasTypeDef],
        "TotalFpgaMemoryInMiB": int,
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoGpusMemoryInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoGpusMemoryInfoTypeDef",
    {"SizeInMiB": int},
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoGpusTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoGpusTypeDef",
    {
        "Name": str,
        "Manufacturer": str,
        "Count": int,
        "MemoryInfo": ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoGpusMemoryInfoTypeDef,
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoTypeDef",
    {
        "Gpus": List[ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoGpusTypeDef],
        "TotalGpuMemoryInMiB": int,
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesInferenceAcceleratorInfoAcceleratorsTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesInferenceAcceleratorInfoAcceleratorsTypeDef",
    {"Count": int, "Name": str, "Manufacturer": str},
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesInferenceAcceleratorInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesInferenceAcceleratorInfoTypeDef",
    {
        "Accelerators": List[
            ClientDescribeInstanceTypesResponseInstanceTypesInferenceAcceleratorInfoAcceleratorsTypeDef
        ]
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesInstanceStorageInfoDisksTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesInstanceStorageInfoDisksTypeDef",
    {"SizeInGB": int, "Count": int, "Type": Literal["hdd", "ssd"]},
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesInstanceStorageInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesInstanceStorageInfoTypeDef",
    {
        "TotalSizeInGB": int,
        "Disks": List[
            ClientDescribeInstanceTypesResponseInstanceTypesInstanceStorageInfoDisksTypeDef
        ],
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesMemoryInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesMemoryInfoTypeDef",
    {"SizeInMiB": int},
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesNetworkInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesNetworkInfoTypeDef",
    {
        "NetworkPerformance": str,
        "MaximumNetworkInterfaces": int,
        "Ipv4AddressesPerInterface": int,
        "Ipv6AddressesPerInterface": int,
        "Ipv6Supported": bool,
        "EnaSupport": Literal["unsupported", "supported", "required"],
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesPlacementGroupInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesPlacementGroupInfoTypeDef",
    {"SupportedStrategies": List[Literal["cluster", "partition", "spread"]]},
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesProcessorInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesProcessorInfoTypeDef",
    {
        "SupportedArchitectures": List[Literal["i386", "x86_64", "arm64"]],
        "SustainedClockSpeedInGhz": float,
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesVCpuInfoTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesVCpuInfoTypeDef",
    {
        "DefaultVCpus": int,
        "DefaultCores": int,
        "DefaultThreadsPerCore": int,
        "ValidCores": List[int],
        "ValidThreadsPerCore": List[int],
    },
    total=False,
)

ClientDescribeInstanceTypesResponseInstanceTypesTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseInstanceTypesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "CurrentGeneration": bool,
        "FreeTierEligible": bool,
        "SupportedUsageClasses": List[Literal["spot", "on-demand"]],
        "SupportedRootDevices": List[Literal["ebs", "instance-store"]],
        "BareMetal": bool,
        "Hypervisor": Literal["nitro", "xen"],
        "ProcessorInfo": ClientDescribeInstanceTypesResponseInstanceTypesProcessorInfoTypeDef,
        "VCpuInfo": ClientDescribeInstanceTypesResponseInstanceTypesVCpuInfoTypeDef,
        "MemoryInfo": ClientDescribeInstanceTypesResponseInstanceTypesMemoryInfoTypeDef,
        "InstanceStorageSupported": bool,
        "InstanceStorageInfo": ClientDescribeInstanceTypesResponseInstanceTypesInstanceStorageInfoTypeDef,
        "EbsInfo": ClientDescribeInstanceTypesResponseInstanceTypesEbsInfoTypeDef,
        "NetworkInfo": ClientDescribeInstanceTypesResponseInstanceTypesNetworkInfoTypeDef,
        "GpuInfo": ClientDescribeInstanceTypesResponseInstanceTypesGpuInfoTypeDef,
        "FpgaInfo": ClientDescribeInstanceTypesResponseInstanceTypesFpgaInfoTypeDef,
        "PlacementGroupInfo": ClientDescribeInstanceTypesResponseInstanceTypesPlacementGroupInfoTypeDef,
        "InferenceAcceleratorInfo": ClientDescribeInstanceTypesResponseInstanceTypesInferenceAcceleratorInfoTypeDef,
        "HibernationSupported": bool,
        "BurstablePerformanceSupported": bool,
        "DedicatedHostsSupported": bool,
        "AutoRecoverySupported": bool,
    },
    total=False,
)

ClientDescribeInstanceTypesResponseTypeDef = TypedDict(
    "ClientDescribeInstanceTypesResponseTypeDef",
    {
        "InstanceTypes": List[ClientDescribeInstanceTypesResponseInstanceTypesTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeInstancesFiltersTypeDef = TypedDict(
    "ClientDescribeInstancesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeInstancesResponseReservationsGroupsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesBlockDeviceMappingsEbsTypeDef",
    {
        "AttachTime": datetime,
        "DeleteOnTermination": bool,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
        "VolumeId": str,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "Ebs": ClientDescribeInstancesResponseReservationsInstancesBlockDeviceMappingsEbsTypeDef,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientDescribeInstancesResponseReservationsInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesCpuOptionsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesElasticGpuAssociationsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesElasticGpuAssociationsTypeDef",
    {
        "ElasticGpuId": str,
        "ElasticGpuAssociationId": str,
        "ElasticGpuAssociationState": str,
        "ElasticGpuAssociationTime": str,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesElasticInferenceAcceleratorAssociationsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesElasticInferenceAcceleratorAssociationsTypeDef",
    {
        "ElasticInferenceAcceleratorArn": str,
        "ElasticInferenceAcceleratorAssociationId": str,
        "ElasticInferenceAcceleratorAssociationState": str,
        "ElasticInferenceAcceleratorAssociationTime": datetime,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesHibernationOptionsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesIamInstanceProfileTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesLicensesTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesLicensesTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesMetadataOptionsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesMetadataOptionsTypeDef",
    {
        "State": Literal["pending", "applied"],
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesMonitoringTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesAssociationTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesAssociationTypeDef",
    {"IpOwnerId": str, "PublicDnsName": str, "PublicIp": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesAttachmentTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesGroupsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef",
    {"IpOwnerId": str, "PublicDnsName": str, "PublicIp": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesTypeDef",
    {
        "Association": ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef,
        "Primary": bool,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesTypeDef",
    {
        "Association": ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesAssociationTypeDef,
        "Attachment": ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesAttachmentTypeDef,
        "Description": str,
        "Groups": List[
            ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesGroupsTypeDef
        ],
        "Ipv6Addresses": List[
            ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesIpv6AddressesTypeDef
        ],
        "MacAddress": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SourceDestCheck": bool,
        "Status": Literal["available", "associated", "attaching", "in-use", "detaching"],
        "SubnetId": str,
        "VpcId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesPlacementTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesProductCodesTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesSecurityGroupsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesStateReasonTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesStateReasonTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesStateTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesTagsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeInstancesResponseReservationsInstancesTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsInstancesTypeDef",
    {
        "AmiLaunchIndex": int,
        "ImageId": str,
        "InstanceId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "LaunchTime": datetime,
        "Monitoring": ClientDescribeInstancesResponseReservationsInstancesMonitoringTypeDef,
        "Placement": ClientDescribeInstancesResponseReservationsInstancesPlacementTypeDef,
        "Platform": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "ProductCodes": List[
            ClientDescribeInstancesResponseReservationsInstancesProductCodesTypeDef
        ],
        "PublicDnsName": str,
        "PublicIpAddress": str,
        "RamdiskId": str,
        "State": ClientDescribeInstancesResponseReservationsInstancesStateTypeDef,
        "StateTransitionReason": str,
        "SubnetId": str,
        "VpcId": str,
        "Architecture": Literal["i386", "x86_64", "arm64"],
        "BlockDeviceMappings": List[
            ClientDescribeInstancesResponseReservationsInstancesBlockDeviceMappingsTypeDef
        ],
        "ClientToken": str,
        "EbsOptimized": bool,
        "EnaSupport": bool,
        "Hypervisor": Literal["ovm", "xen"],
        "IamInstanceProfile": ClientDescribeInstancesResponseReservationsInstancesIamInstanceProfileTypeDef,
        "InstanceLifecycle": Literal["spot", "scheduled"],
        "ElasticGpuAssociations": List[
            ClientDescribeInstancesResponseReservationsInstancesElasticGpuAssociationsTypeDef
        ],
        "ElasticInferenceAcceleratorAssociations": List[
            ClientDescribeInstancesResponseReservationsInstancesElasticInferenceAcceleratorAssociationsTypeDef
        ],
        "NetworkInterfaces": List[
            ClientDescribeInstancesResponseReservationsInstancesNetworkInterfacesTypeDef
        ],
        "OutpostArn": str,
        "RootDeviceName": str,
        "RootDeviceType": Literal["ebs", "instance-store"],
        "SecurityGroups": List[
            ClientDescribeInstancesResponseReservationsInstancesSecurityGroupsTypeDef
        ],
        "SourceDestCheck": bool,
        "SpotInstanceRequestId": str,
        "SriovNetSupport": str,
        "StateReason": ClientDescribeInstancesResponseReservationsInstancesStateReasonTypeDef,
        "Tags": List[ClientDescribeInstancesResponseReservationsInstancesTagsTypeDef],
        "VirtualizationType": Literal["hvm", "paravirtual"],
        "CpuOptions": ClientDescribeInstancesResponseReservationsInstancesCpuOptionsTypeDef,
        "CapacityReservationId": str,
        "CapacityReservationSpecification": ClientDescribeInstancesResponseReservationsInstancesCapacityReservationSpecificationTypeDef,
        "HibernationOptions": ClientDescribeInstancesResponseReservationsInstancesHibernationOptionsTypeDef,
        "Licenses": List[ClientDescribeInstancesResponseReservationsInstancesLicensesTypeDef],
        "MetadataOptions": ClientDescribeInstancesResponseReservationsInstancesMetadataOptionsTypeDef,
    },
    total=False,
)

ClientDescribeInstancesResponseReservationsTypeDef = TypedDict(
    "ClientDescribeInstancesResponseReservationsTypeDef",
    {
        "Groups": List[ClientDescribeInstancesResponseReservationsGroupsTypeDef],
        "Instances": List[ClientDescribeInstancesResponseReservationsInstancesTypeDef],
        "OwnerId": str,
        "RequesterId": str,
        "ReservationId": str,
    },
    total=False,
)

ClientDescribeInstancesResponseTypeDef = TypedDict(
    "ClientDescribeInstancesResponseTypeDef",
    {"Reservations": List[ClientDescribeInstancesResponseReservationsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeInternetGatewaysFiltersTypeDef = TypedDict(
    "ClientDescribeInternetGatewaysFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeInternetGatewaysResponseInternetGatewaysAttachmentsTypeDef = TypedDict(
    "ClientDescribeInternetGatewaysResponseInternetGatewaysAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientDescribeInternetGatewaysResponseInternetGatewaysTagsTypeDef = TypedDict(
    "ClientDescribeInternetGatewaysResponseInternetGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeInternetGatewaysResponseInternetGatewaysTypeDef = TypedDict(
    "ClientDescribeInternetGatewaysResponseInternetGatewaysTypeDef",
    {
        "Attachments": List[
            ClientDescribeInternetGatewaysResponseInternetGatewaysAttachmentsTypeDef
        ],
        "InternetGatewayId": str,
        "OwnerId": str,
        "Tags": List[ClientDescribeInternetGatewaysResponseInternetGatewaysTagsTypeDef],
    },
    total=False,
)

ClientDescribeInternetGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeInternetGatewaysResponseTypeDef",
    {
        "InternetGateways": List[ClientDescribeInternetGatewaysResponseInternetGatewaysTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeKeyPairsFiltersTypeDef = TypedDict(
    "ClientDescribeKeyPairsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeKeyPairsResponseKeyPairsTypeDef = TypedDict(
    "ClientDescribeKeyPairsResponseKeyPairsTypeDef",
    {"KeyFingerprint": str, "KeyName": str},
    total=False,
)

ClientDescribeKeyPairsResponseTypeDef = TypedDict(
    "ClientDescribeKeyPairsResponseTypeDef",
    {"KeyPairs": List[ClientDescribeKeyPairsResponseKeyPairsTypeDef]},
    total=False,
)

ClientDescribeLaunchTemplateVersionsFiltersTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsEbsTypeDef",
    {
        "Encrypted": bool,
        "DeleteOnTermination": bool,
        "Iops": int,
        "KmsKeyId": str,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCpuOptionsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCreditSpecificationTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCreditSpecificationTypeDef",
    {"CpuCredits": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataElasticGpuSpecificationsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataElasticGpuSpecificationsTypeDef",
    {"Type": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataElasticInferenceAcceleratorsTypeDef",
    {"Type": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataHibernationOptionsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataIamInstanceProfileTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataLicenseSpecificationsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataMonitoringTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "InterfaceType": str,
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataPlacementTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTagsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTypeDef",
    {
        "KernelId": str,
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataIamInstanceProfileTypeDef,
        "BlockDeviceMappings": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsTypeDef
        ],
        "NetworkInterfaces": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesTypeDef
        ],
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KeyName": str,
        "Monitoring": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataMonitoringTypeDef,
        "Placement": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataPlacementTypeDef,
        "RamDiskId": str,
        "DisableApiTermination": bool,
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "UserData": str,
        "TagSpecifications": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTypeDef
        ],
        "ElasticGpuSpecifications": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataElasticGpuSpecificationsTypeDef
        ],
        "ElasticInferenceAccelerators": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataElasticInferenceAcceleratorsTypeDef
        ],
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "InstanceMarketOptions": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsTypeDef,
        "CreditSpecification": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCreditSpecificationTypeDef,
        "CpuOptions": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCpuOptionsTypeDef,
        "CapacityReservationSpecification": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationTypeDef,
        "LicenseSpecifications": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataLicenseSpecificationsTypeDef
        ],
        "HibernationOptions": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataHibernationOptionsTypeDef,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "VersionNumber": int,
        "VersionDescription": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersion": bool,
        "LaunchTemplateData": ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsLaunchTemplateDataTypeDef,
    },
    total=False,
)

ClientDescribeLaunchTemplateVersionsResponseTypeDef = TypedDict(
    "ClientDescribeLaunchTemplateVersionsResponseTypeDef",
    {
        "LaunchTemplateVersions": List[
            ClientDescribeLaunchTemplateVersionsResponseLaunchTemplateVersionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLaunchTemplatesFiltersTypeDef = TypedDict(
    "ClientDescribeLaunchTemplatesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeLaunchTemplatesResponseLaunchTemplatesTagsTypeDef = TypedDict(
    "ClientDescribeLaunchTemplatesResponseLaunchTemplatesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeLaunchTemplatesResponseLaunchTemplatesTypeDef = TypedDict(
    "ClientDescribeLaunchTemplatesResponseLaunchTemplatesTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersionNumber": int,
        "LatestVersionNumber": int,
        "Tags": List[ClientDescribeLaunchTemplatesResponseLaunchTemplatesTagsTypeDef],
    },
    total=False,
)

ClientDescribeLaunchTemplatesResponseTypeDef = TypedDict(
    "ClientDescribeLaunchTemplatesResponseTypeDef",
    {
        "LaunchTemplates": List[ClientDescribeLaunchTemplatesResponseLaunchTemplatesTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFiltersTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseLocalGatewayRouteTableVirtualInterfaceGroupAssociationsTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseLocalGatewayRouteTableVirtualInterfaceGroupAssociationsTypeDef",
    {
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId": str,
        "LocalGatewayVirtualInterfaceGroupId": str,
        "LocalGatewayId": str,
        "LocalGatewayRouteTableId": str,
        "State": str,
    },
    total=False,
)

ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseTypeDef",
    {
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociations": List[
            ClientDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseLocalGatewayRouteTableVirtualInterfaceGroupAssociationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLocalGatewayRouteTableVpcAssociationsFiltersTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTableVpcAssociationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeLocalGatewayRouteTableVpcAssociationsResponseLocalGatewayRouteTableVpcAssociationsTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTableVpcAssociationsResponseLocalGatewayRouteTableVpcAssociationsTypeDef",
    {
        "LocalGatewayRouteTableVpcAssociationId": str,
        "LocalGatewayRouteTableId": str,
        "LocalGatewayId": str,
        "VpcId": str,
        "State": str,
    },
    total=False,
)

ClientDescribeLocalGatewayRouteTableVpcAssociationsResponseTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTableVpcAssociationsResponseTypeDef",
    {
        "LocalGatewayRouteTableVpcAssociations": List[
            ClientDescribeLocalGatewayRouteTableVpcAssociationsResponseLocalGatewayRouteTableVpcAssociationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLocalGatewayRouteTablesFiltersTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTablesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeLocalGatewayRouteTablesResponseLocalGatewayRouteTablesTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTablesResponseLocalGatewayRouteTablesTypeDef",
    {"LocalGatewayRouteTableId": str, "LocalGatewayId": str, "OutpostArn": str, "State": str},
    total=False,
)

ClientDescribeLocalGatewayRouteTablesResponseTypeDef = TypedDict(
    "ClientDescribeLocalGatewayRouteTablesResponseTypeDef",
    {
        "LocalGatewayRouteTables": List[
            ClientDescribeLocalGatewayRouteTablesResponseLocalGatewayRouteTablesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLocalGatewayVirtualInterfaceGroupsFiltersTypeDef = TypedDict(
    "ClientDescribeLocalGatewayVirtualInterfaceGroupsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeLocalGatewayVirtualInterfaceGroupsResponseLocalGatewayVirtualInterfaceGroupsTypeDef = TypedDict(
    "ClientDescribeLocalGatewayVirtualInterfaceGroupsResponseLocalGatewayVirtualInterfaceGroupsTypeDef",
    {
        "LocalGatewayVirtualInterfaceGroupId": str,
        "LocalGatewayVirtualInterfaceIds": List[str],
        "LocalGatewayId": str,
    },
    total=False,
)

ClientDescribeLocalGatewayVirtualInterfaceGroupsResponseTypeDef = TypedDict(
    "ClientDescribeLocalGatewayVirtualInterfaceGroupsResponseTypeDef",
    {
        "LocalGatewayVirtualInterfaceGroups": List[
            ClientDescribeLocalGatewayVirtualInterfaceGroupsResponseLocalGatewayVirtualInterfaceGroupsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLocalGatewayVirtualInterfacesFiltersTypeDef = TypedDict(
    "ClientDescribeLocalGatewayVirtualInterfacesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeLocalGatewayVirtualInterfacesResponseLocalGatewayVirtualInterfacesTypeDef = TypedDict(
    "ClientDescribeLocalGatewayVirtualInterfacesResponseLocalGatewayVirtualInterfacesTypeDef",
    {
        "LocalGatewayVirtualInterfaceId": str,
        "LocalGatewayId": str,
        "Vlan": int,
        "LocalAddress": str,
        "PeerAddress": str,
        "LocalBgpAsn": int,
        "PeerBgpAsn": int,
    },
    total=False,
)

ClientDescribeLocalGatewayVirtualInterfacesResponseTypeDef = TypedDict(
    "ClientDescribeLocalGatewayVirtualInterfacesResponseTypeDef",
    {
        "LocalGatewayVirtualInterfaces": List[
            ClientDescribeLocalGatewayVirtualInterfacesResponseLocalGatewayVirtualInterfacesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeLocalGatewaysFiltersTypeDef = TypedDict(
    "ClientDescribeLocalGatewaysFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeLocalGatewaysResponseLocalGatewaysTypeDef = TypedDict(
    "ClientDescribeLocalGatewaysResponseLocalGatewaysTypeDef",
    {"LocalGatewayId": str, "OutpostArn": str, "OwnerId": str, "State": str},
    total=False,
)

ClientDescribeLocalGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeLocalGatewaysResponseTypeDef",
    {
        "LocalGateways": List[ClientDescribeLocalGatewaysResponseLocalGatewaysTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeMovingAddressesFiltersTypeDef = TypedDict(
    "ClientDescribeMovingAddressesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeMovingAddressesResponseMovingAddressStatusesTypeDef = TypedDict(
    "ClientDescribeMovingAddressesResponseMovingAddressStatusesTypeDef",
    {"MoveStatus": Literal["movingToVpc", "restoringToClassic"], "PublicIp": str},
    total=False,
)

ClientDescribeMovingAddressesResponseTypeDef = TypedDict(
    "ClientDescribeMovingAddressesResponseTypeDef",
    {
        "MovingAddressStatuses": List[
            ClientDescribeMovingAddressesResponseMovingAddressStatusesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeNatGatewaysFiltersTypeDef = TypedDict(
    "ClientDescribeNatGatewaysFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeNatGatewaysResponseNatGatewaysNatGatewayAddressesTypeDef = TypedDict(
    "ClientDescribeNatGatewaysResponseNatGatewaysNatGatewayAddressesTypeDef",
    {"AllocationId": str, "NetworkInterfaceId": str, "PrivateIp": str, "PublicIp": str},
    total=False,
)

ClientDescribeNatGatewaysResponseNatGatewaysProvisionedBandwidthTypeDef = TypedDict(
    "ClientDescribeNatGatewaysResponseNatGatewaysProvisionedBandwidthTypeDef",
    {
        "ProvisionTime": datetime,
        "Provisioned": str,
        "RequestTime": datetime,
        "Requested": str,
        "Status": str,
    },
    total=False,
)

ClientDescribeNatGatewaysResponseNatGatewaysTagsTypeDef = TypedDict(
    "ClientDescribeNatGatewaysResponseNatGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeNatGatewaysResponseNatGatewaysTypeDef = TypedDict(
    "ClientDescribeNatGatewaysResponseNatGatewaysTypeDef",
    {
        "CreateTime": datetime,
        "DeleteTime": datetime,
        "FailureCode": str,
        "FailureMessage": str,
        "NatGatewayAddresses": List[
            ClientDescribeNatGatewaysResponseNatGatewaysNatGatewayAddressesTypeDef
        ],
        "NatGatewayId": str,
        "ProvisionedBandwidth": ClientDescribeNatGatewaysResponseNatGatewaysProvisionedBandwidthTypeDef,
        "State": Literal["pending", "failed", "available", "deleting", "deleted"],
        "SubnetId": str,
        "VpcId": str,
        "Tags": List[ClientDescribeNatGatewaysResponseNatGatewaysTagsTypeDef],
    },
    total=False,
)

ClientDescribeNatGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeNatGatewaysResponseTypeDef",
    {"NatGateways": List[ClientDescribeNatGatewaysResponseNatGatewaysTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeNetworkAclsFiltersTypeDef = TypedDict(
    "ClientDescribeNetworkAclsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeNetworkAclsResponseNetworkAclsAssociationsTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseNetworkAclsAssociationsTypeDef",
    {"NetworkAclAssociationId": str, "NetworkAclId": str, "SubnetId": str},
    total=False,
)

ClientDescribeNetworkAclsResponseNetworkAclsEntriesIcmpTypeCodeTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseNetworkAclsEntriesIcmpTypeCodeTypeDef",
    {"Code": int, "Type": int},
    total=False,
)

ClientDescribeNetworkAclsResponseNetworkAclsEntriesPortRangeTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseNetworkAclsEntriesPortRangeTypeDef",
    {"From": int, "To": int},
    total=False,
)

ClientDescribeNetworkAclsResponseNetworkAclsEntriesTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseNetworkAclsEntriesTypeDef",
    {
        "CidrBlock": str,
        "Egress": bool,
        "IcmpTypeCode": ClientDescribeNetworkAclsResponseNetworkAclsEntriesIcmpTypeCodeTypeDef,
        "Ipv6CidrBlock": str,
        "PortRange": ClientDescribeNetworkAclsResponseNetworkAclsEntriesPortRangeTypeDef,
        "Protocol": str,
        "RuleAction": Literal["allow", "deny"],
        "RuleNumber": int,
    },
    total=False,
)

ClientDescribeNetworkAclsResponseNetworkAclsTagsTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseNetworkAclsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeNetworkAclsResponseNetworkAclsTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseNetworkAclsTypeDef",
    {
        "Associations": List[ClientDescribeNetworkAclsResponseNetworkAclsAssociationsTypeDef],
        "Entries": List[ClientDescribeNetworkAclsResponseNetworkAclsEntriesTypeDef],
        "IsDefault": bool,
        "NetworkAclId": str,
        "Tags": List[ClientDescribeNetworkAclsResponseNetworkAclsTagsTypeDef],
        "VpcId": str,
        "OwnerId": str,
    },
    total=False,
)

ClientDescribeNetworkAclsResponseTypeDef = TypedDict(
    "ClientDescribeNetworkAclsResponseTypeDef",
    {"NetworkAcls": List[ClientDescribeNetworkAclsResponseNetworkAclsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeNetworkInterfaceAttributeResponseAttachmentTypeDef = TypedDict(
    "ClientDescribeNetworkInterfaceAttributeResponseAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

ClientDescribeNetworkInterfaceAttributeResponseDescriptionTypeDef = TypedDict(
    "ClientDescribeNetworkInterfaceAttributeResponseDescriptionTypeDef", {"Value": str}, total=False
)

ClientDescribeNetworkInterfaceAttributeResponseGroupsTypeDef = TypedDict(
    "ClientDescribeNetworkInterfaceAttributeResponseGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeNetworkInterfaceAttributeResponseSourceDestCheckTypeDef = TypedDict(
    "ClientDescribeNetworkInterfaceAttributeResponseSourceDestCheckTypeDef",
    {"Value": bool},
    total=False,
)

ClientDescribeNetworkInterfaceAttributeResponseTypeDef = TypedDict(
    "ClientDescribeNetworkInterfaceAttributeResponseTypeDef",
    {
        "Attachment": ClientDescribeNetworkInterfaceAttributeResponseAttachmentTypeDef,
        "Description": ClientDescribeNetworkInterfaceAttributeResponseDescriptionTypeDef,
        "Groups": List[ClientDescribeNetworkInterfaceAttributeResponseGroupsTypeDef],
        "NetworkInterfaceId": str,
        "SourceDestCheck": ClientDescribeNetworkInterfaceAttributeResponseSourceDestCheckTypeDef,
    },
    total=False,
)

ClientDescribeNetworkInterfacePermissionsFiltersTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacePermissionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsPermissionStateTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsPermissionStateTypeDef",
    {"State": Literal["pending", "granted", "revoking", "revoked"], "StatusMessage": str},
    total=False,
)

ClientDescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsTypeDef",
    {
        "NetworkInterfacePermissionId": str,
        "NetworkInterfaceId": str,
        "AwsAccountId": str,
        "AwsService": str,
        "Permission": Literal["INSTANCE-ATTACH", "EIP-ASSOCIATE"],
        "PermissionState": ClientDescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsPermissionStateTypeDef,
    },
    total=False,
)

ClientDescribeNetworkInterfacePermissionsResponseTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacePermissionsResponseTypeDef",
    {
        "NetworkInterfacePermissions": List[
            ClientDescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeNetworkInterfacesFiltersTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesAssociationTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesAssociationTypeDef",
    {
        "AllocationId": str,
        "AssociationId": str,
        "IpOwnerId": str,
        "PublicDnsName": str,
        "PublicIp": str,
    },
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesAttachmentTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesGroupsTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesPrivateIpAddressesAssociationTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesPrivateIpAddressesAssociationTypeDef",
    {
        "AllocationId": str,
        "AssociationId": str,
        "IpOwnerId": str,
        "PublicDnsName": str,
        "PublicIp": str,
    },
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesPrivateIpAddressesTypeDef",
    {
        "Association": ClientDescribeNetworkInterfacesResponseNetworkInterfacesPrivateIpAddressesAssociationTypeDef,
        "Primary": bool,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
    },
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesTagSetTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesTagSetTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeNetworkInterfacesResponseNetworkInterfacesTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseNetworkInterfacesTypeDef",
    {
        "Association": ClientDescribeNetworkInterfacesResponseNetworkInterfacesAssociationTypeDef,
        "Attachment": ClientDescribeNetworkInterfacesResponseNetworkInterfacesAttachmentTypeDef,
        "AvailabilityZone": str,
        "Description": str,
        "Groups": List[ClientDescribeNetworkInterfacesResponseNetworkInterfacesGroupsTypeDef],
        "InterfaceType": Literal["interface", "natGateway", "efa"],
        "Ipv6Addresses": List[
            ClientDescribeNetworkInterfacesResponseNetworkInterfacesIpv6AddressesTypeDef
        ],
        "MacAddress": str,
        "NetworkInterfaceId": str,
        "OutpostArn": str,
        "OwnerId": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientDescribeNetworkInterfacesResponseNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "RequesterId": str,
        "RequesterManaged": bool,
        "SourceDestCheck": bool,
        "Status": Literal["available", "associated", "attaching", "in-use", "detaching"],
        "SubnetId": str,
        "TagSet": List[ClientDescribeNetworkInterfacesResponseNetworkInterfacesTagSetTypeDef],
        "VpcId": str,
    },
    total=False,
)

ClientDescribeNetworkInterfacesResponseTypeDef = TypedDict(
    "ClientDescribeNetworkInterfacesResponseTypeDef",
    {
        "NetworkInterfaces": List[ClientDescribeNetworkInterfacesResponseNetworkInterfacesTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribePlacementGroupsFiltersTypeDef = TypedDict(
    "ClientDescribePlacementGroupsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribePlacementGroupsResponsePlacementGroupsTypeDef = TypedDict(
    "ClientDescribePlacementGroupsResponsePlacementGroupsTypeDef",
    {
        "GroupName": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Strategy": Literal["cluster", "spread", "partition"],
        "PartitionCount": int,
    },
    total=False,
)

ClientDescribePlacementGroupsResponseTypeDef = TypedDict(
    "ClientDescribePlacementGroupsResponseTypeDef",
    {"PlacementGroups": List[ClientDescribePlacementGroupsResponsePlacementGroupsTypeDef]},
    total=False,
)

ClientDescribePrefixListsFiltersTypeDef = TypedDict(
    "ClientDescribePrefixListsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribePrefixListsResponsePrefixListsTypeDef = TypedDict(
    "ClientDescribePrefixListsResponsePrefixListsTypeDef",
    {"Cidrs": List[str], "PrefixListId": str, "PrefixListName": str},
    total=False,
)

ClientDescribePrefixListsResponseTypeDef = TypedDict(
    "ClientDescribePrefixListsResponseTypeDef",
    {"NextToken": str, "PrefixLists": List[ClientDescribePrefixListsResponsePrefixListsTypeDef]},
    total=False,
)

ClientDescribePrincipalIdFormatResponsePrincipalsStatusesTypeDef = TypedDict(
    "ClientDescribePrincipalIdFormatResponsePrincipalsStatusesTypeDef",
    {"Deadline": datetime, "Resource": str, "UseLongIds": bool},
    total=False,
)

ClientDescribePrincipalIdFormatResponsePrincipalsTypeDef = TypedDict(
    "ClientDescribePrincipalIdFormatResponsePrincipalsTypeDef",
    {
        "Arn": str,
        "Statuses": List[ClientDescribePrincipalIdFormatResponsePrincipalsStatusesTypeDef],
    },
    total=False,
)

ClientDescribePrincipalIdFormatResponseTypeDef = TypedDict(
    "ClientDescribePrincipalIdFormatResponseTypeDef",
    {
        "Principals": List[ClientDescribePrincipalIdFormatResponsePrincipalsTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribePublicIpv4PoolsResponsePublicIpv4PoolsPoolAddressRangesTypeDef = TypedDict(
    "ClientDescribePublicIpv4PoolsResponsePublicIpv4PoolsPoolAddressRangesTypeDef",
    {"FirstAddress": str, "LastAddress": str, "AddressCount": int, "AvailableAddressCount": int},
    total=False,
)

ClientDescribePublicIpv4PoolsResponsePublicIpv4PoolsTypeDef = TypedDict(
    "ClientDescribePublicIpv4PoolsResponsePublicIpv4PoolsTypeDef",
    {
        "PoolId": str,
        "Description": str,
        "PoolAddressRanges": List[
            ClientDescribePublicIpv4PoolsResponsePublicIpv4PoolsPoolAddressRangesTypeDef
        ],
        "TotalAddressCount": int,
        "TotalAvailableAddressCount": int,
    },
    total=False,
)

ClientDescribePublicIpv4PoolsResponseTypeDef = TypedDict(
    "ClientDescribePublicIpv4PoolsResponseTypeDef",
    {
        "PublicIpv4Pools": List[ClientDescribePublicIpv4PoolsResponsePublicIpv4PoolsTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeRegionsFiltersTypeDef = TypedDict(
    "ClientDescribeRegionsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeRegionsResponseRegionsTypeDef = TypedDict(
    "ClientDescribeRegionsResponseRegionsTypeDef",
    {"Endpoint": str, "RegionName": str, "OptInStatus": str},
    total=False,
)

ClientDescribeRegionsResponseTypeDef = TypedDict(
    "ClientDescribeRegionsResponseTypeDef",
    {"Regions": List[ClientDescribeRegionsResponseRegionsTypeDef]},
    total=False,
)

ClientDescribeReservedInstancesFiltersTypeDef = TypedDict(
    "ClientDescribeReservedInstancesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeReservedInstancesListingsFiltersTypeDef = TypedDict(
    "ClientDescribeReservedInstancesListingsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsInstanceCountsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsInstanceCountsTypeDef",
    {"InstanceCount": int, "State": Literal["available", "sold", "cancelled", "pending"]},
    total=False,
)

ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsPriceSchedulesTypeDef = TypedDict(
    "ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsPriceSchedulesTypeDef",
    {"Active": bool, "CurrencyCode": str, "Price": float, "Term": int},
    total=False,
)

ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsTagsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsTypeDef",
    {
        "ClientToken": str,
        "CreateDate": datetime,
        "InstanceCounts": List[
            ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsInstanceCountsTypeDef
        ],
        "PriceSchedules": List[
            ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsPriceSchedulesTypeDef
        ],
        "ReservedInstancesId": str,
        "ReservedInstancesListingId": str,
        "Status": Literal["active", "pending", "cancelled", "closed"],
        "StatusMessage": str,
        "Tags": List[
            ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsTagsTypeDef
        ],
        "UpdateDate": datetime,
    },
    total=False,
)

ClientDescribeReservedInstancesListingsResponseTypeDef = TypedDict(
    "ClientDescribeReservedInstancesListingsResponseTypeDef",
    {
        "ReservedInstancesListings": List[
            ClientDescribeReservedInstancesListingsResponseReservedInstancesListingsTypeDef
        ]
    },
    total=False,
)

ClientDescribeReservedInstancesModificationsFiltersTypeDef = TypedDict(
    "ClientDescribeReservedInstancesModificationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsModificationResultsTargetConfigurationTypeDef = TypedDict(
    "ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsModificationResultsTargetConfigurationTypeDef",
    {
        "AvailabilityZone": str,
        "InstanceCount": int,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Platform": str,
        "Scope": Literal["Availability Zone", "Region"],
    },
    total=False,
)

ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsModificationResultsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsModificationResultsTypeDef",
    {
        "ReservedInstancesId": str,
        "TargetConfiguration": ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsModificationResultsTargetConfigurationTypeDef,
    },
    total=False,
)

ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsReservedInstancesIdsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsReservedInstancesIdsTypeDef",
    {"ReservedInstancesId": str},
    total=False,
)

ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsTypeDef",
    {
        "ClientToken": str,
        "CreateDate": datetime,
        "EffectiveDate": datetime,
        "ModificationResults": List[
            ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsModificationResultsTypeDef
        ],
        "ReservedInstancesIds": List[
            ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsReservedInstancesIdsTypeDef
        ],
        "ReservedInstancesModificationId": str,
        "Status": str,
        "StatusMessage": str,
        "UpdateDate": datetime,
    },
    total=False,
)

ClientDescribeReservedInstancesModificationsResponseTypeDef = TypedDict(
    "ClientDescribeReservedInstancesModificationsResponseTypeDef",
    {
        "NextToken": str,
        "ReservedInstancesModifications": List[
            ClientDescribeReservedInstancesModificationsResponseReservedInstancesModificationsTypeDef
        ],
    },
    total=False,
)

ClientDescribeReservedInstancesOfferingsFiltersTypeDef = TypedDict(
    "ClientDescribeReservedInstancesOfferingsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsPricingDetailsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsPricingDetailsTypeDef",
    {"Count": int, "Price": float},
    total=False,
)

ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsRecurringChargesTypeDef = TypedDict(
    "ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsRecurringChargesTypeDef",
    {"Amount": float, "Frequency": str},
    total=False,
)

ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsTypeDef",
    {
        "AvailabilityZone": str,
        "Duration": int,
        "FixedPrice": Any,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "ReservedInstancesOfferingId": str,
        "UsagePrice": Any,
        "CurrencyCode": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "Marketplace": bool,
        "OfferingClass": Literal["standard", "convertible"],
        "OfferingType": Literal[
            "Heavy Utilization",
            "Medium Utilization",
            "Light Utilization",
            "No Upfront",
            "Partial Upfront",
            "All Upfront",
        ],
        "PricingDetails": List[
            ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsPricingDetailsTypeDef
        ],
        "RecurringCharges": List[
            ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsRecurringChargesTypeDef
        ],
        "Scope": Literal["Availability Zone", "Region"],
    },
    total=False,
)

ClientDescribeReservedInstancesOfferingsResponseTypeDef = TypedDict(
    "ClientDescribeReservedInstancesOfferingsResponseTypeDef",
    {
        "ReservedInstancesOfferings": List[
            ClientDescribeReservedInstancesOfferingsResponseReservedInstancesOfferingsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeReservedInstancesResponseReservedInstancesRecurringChargesTypeDef = TypedDict(
    "ClientDescribeReservedInstancesResponseReservedInstancesRecurringChargesTypeDef",
    {"Amount": float, "Frequency": str},
    total=False,
)

ClientDescribeReservedInstancesResponseReservedInstancesTagsTypeDef = TypedDict(
    "ClientDescribeReservedInstancesResponseReservedInstancesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeReservedInstancesResponseReservedInstancesTypeDef = TypedDict(
    "ClientDescribeReservedInstancesResponseReservedInstancesTypeDef",
    {
        "AvailabilityZone": str,
        "Duration": int,
        "End": datetime,
        "FixedPrice": Any,
        "InstanceCount": int,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "ReservedInstancesId": str,
        "Start": datetime,
        "State": Literal[
            "payment-pending", "active", "payment-failed", "retired", "queued", "queued-deleted"
        ],
        "UsagePrice": Any,
        "CurrencyCode": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "OfferingClass": Literal["standard", "convertible"],
        "OfferingType": Literal[
            "Heavy Utilization",
            "Medium Utilization",
            "Light Utilization",
            "No Upfront",
            "Partial Upfront",
            "All Upfront",
        ],
        "RecurringCharges": List[
            ClientDescribeReservedInstancesResponseReservedInstancesRecurringChargesTypeDef
        ],
        "Scope": Literal["Availability Zone", "Region"],
        "Tags": List[ClientDescribeReservedInstancesResponseReservedInstancesTagsTypeDef],
    },
    total=False,
)

ClientDescribeReservedInstancesResponseTypeDef = TypedDict(
    "ClientDescribeReservedInstancesResponseTypeDef",
    {"ReservedInstances": List[ClientDescribeReservedInstancesResponseReservedInstancesTypeDef]},
    total=False,
)

ClientDescribeRouteTablesFiltersTypeDef = TypedDict(
    "ClientDescribeRouteTablesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeRouteTablesResponseRouteTablesAssociationsAssociationStateTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseRouteTablesAssociationsAssociationStateTypeDef",
    {
        "State": Literal["associating", "associated", "disassociating", "disassociated", "failed"],
        "StatusMessage": str,
    },
    total=False,
)

ClientDescribeRouteTablesResponseRouteTablesAssociationsTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseRouteTablesAssociationsTypeDef",
    {
        "Main": bool,
        "RouteTableAssociationId": str,
        "RouteTableId": str,
        "SubnetId": str,
        "GatewayId": str,
        "AssociationState": ClientDescribeRouteTablesResponseRouteTablesAssociationsAssociationStateTypeDef,
    },
    total=False,
)

ClientDescribeRouteTablesResponseRouteTablesPropagatingVgwsTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseRouteTablesPropagatingVgwsTypeDef",
    {"GatewayId": str},
    total=False,
)

ClientDescribeRouteTablesResponseRouteTablesRoutesTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseRouteTablesRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "DestinationIpv6CidrBlock": str,
        "DestinationPrefixListId": str,
        "EgressOnlyInternetGatewayId": str,
        "GatewayId": str,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "NatGatewayId": str,
        "TransitGatewayId": str,
        "LocalGatewayId": str,
        "NetworkInterfaceId": str,
        "Origin": Literal["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"],
        "State": Literal["active", "blackhole"],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientDescribeRouteTablesResponseRouteTablesTagsTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseRouteTablesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeRouteTablesResponseRouteTablesTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseRouteTablesTypeDef",
    {
        "Associations": List[ClientDescribeRouteTablesResponseRouteTablesAssociationsTypeDef],
        "PropagatingVgws": List[ClientDescribeRouteTablesResponseRouteTablesPropagatingVgwsTypeDef],
        "RouteTableId": str,
        "Routes": List[ClientDescribeRouteTablesResponseRouteTablesRoutesTypeDef],
        "Tags": List[ClientDescribeRouteTablesResponseRouteTablesTagsTypeDef],
        "VpcId": str,
        "OwnerId": str,
    },
    total=False,
)

ClientDescribeRouteTablesResponseTypeDef = TypedDict(
    "ClientDescribeRouteTablesResponseTypeDef",
    {"RouteTables": List[ClientDescribeRouteTablesResponseRouteTablesTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeScheduledInstanceAvailabilityFiltersTypeDef = TypedDict(
    "ClientDescribeScheduledInstanceAvailabilityFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

_RequiredClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef = TypedDict(
    "_RequiredClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef",
    {"EarliestTime": datetime},
)
_OptionalClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef = TypedDict(
    "_OptionalClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef",
    {"LatestTime": datetime},
    total=False,
)


class ClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef(
    _RequiredClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef,
    _OptionalClientDescribeScheduledInstanceAvailabilityFirstSlotStartTimeRangeTypeDef,
):
    pass


ClientDescribeScheduledInstanceAvailabilityRecurrenceTypeDef = TypedDict(
    "ClientDescribeScheduledInstanceAvailabilityRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDays": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

ClientDescribeScheduledInstanceAvailabilityResponseScheduledInstanceAvailabilitySetRecurrenceTypeDef = TypedDict(
    "ClientDescribeScheduledInstanceAvailabilityResponseScheduledInstanceAvailabilitySetRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDaySet": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

ClientDescribeScheduledInstanceAvailabilityResponseScheduledInstanceAvailabilitySetTypeDef = TypedDict(
    "ClientDescribeScheduledInstanceAvailabilityResponseScheduledInstanceAvailabilitySetTypeDef",
    {
        "AvailabilityZone": str,
        "AvailableInstanceCount": int,
        "FirstSlotStartTime": datetime,
        "HourlyPrice": str,
        "InstanceType": str,
        "MaxTermDurationInDays": int,
        "MinTermDurationInDays": int,
        "NetworkPlatform": str,
        "Platform": str,
        "PurchaseToken": str,
        "Recurrence": ClientDescribeScheduledInstanceAvailabilityResponseScheduledInstanceAvailabilitySetRecurrenceTypeDef,
        "SlotDurationInHours": int,
        "TotalScheduledInstanceHours": int,
    },
    total=False,
)

ClientDescribeScheduledInstanceAvailabilityResponseTypeDef = TypedDict(
    "ClientDescribeScheduledInstanceAvailabilityResponseTypeDef",
    {
        "NextToken": str,
        "ScheduledInstanceAvailabilitySet": List[
            ClientDescribeScheduledInstanceAvailabilityResponseScheduledInstanceAvailabilitySetTypeDef
        ],
    },
    total=False,
)

ClientDescribeScheduledInstancesFiltersTypeDef = TypedDict(
    "ClientDescribeScheduledInstancesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeScheduledInstancesResponseScheduledInstanceSetRecurrenceTypeDef = TypedDict(
    "ClientDescribeScheduledInstancesResponseScheduledInstanceSetRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDaySet": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

ClientDescribeScheduledInstancesResponseScheduledInstanceSetTypeDef = TypedDict(
    "ClientDescribeScheduledInstancesResponseScheduledInstanceSetTypeDef",
    {
        "AvailabilityZone": str,
        "CreateDate": datetime,
        "HourlyPrice": str,
        "InstanceCount": int,
        "InstanceType": str,
        "NetworkPlatform": str,
        "NextSlotStartTime": datetime,
        "Platform": str,
        "PreviousSlotEndTime": datetime,
        "Recurrence": ClientDescribeScheduledInstancesResponseScheduledInstanceSetRecurrenceTypeDef,
        "ScheduledInstanceId": str,
        "SlotDurationInHours": int,
        "TermEndDate": datetime,
        "TermStartDate": datetime,
        "TotalScheduledInstanceHours": int,
    },
    total=False,
)

ClientDescribeScheduledInstancesResponseTypeDef = TypedDict(
    "ClientDescribeScheduledInstancesResponseTypeDef",
    {
        "NextToken": str,
        "ScheduledInstanceSet": List[
            ClientDescribeScheduledInstancesResponseScheduledInstanceSetTypeDef
        ],
    },
    total=False,
)

ClientDescribeScheduledInstancesSlotStartTimeRangeTypeDef = TypedDict(
    "ClientDescribeScheduledInstancesSlotStartTimeRangeTypeDef",
    {"EarliestTime": datetime, "LatestTime": datetime},
    total=False,
)

ClientDescribeSecurityGroupReferencesResponseSecurityGroupReferenceSetTypeDef = TypedDict(
    "ClientDescribeSecurityGroupReferencesResponseSecurityGroupReferenceSetTypeDef",
    {"GroupId": str, "ReferencingVpcId": str, "VpcPeeringConnectionId": str},
    total=False,
)

ClientDescribeSecurityGroupReferencesResponseTypeDef = TypedDict(
    "ClientDescribeSecurityGroupReferencesResponseTypeDef",
    {
        "SecurityGroupReferenceSet": List[
            ClientDescribeSecurityGroupReferencesResponseSecurityGroupReferenceSetTypeDef
        ]
    },
    total=False,
)

ClientDescribeSecurityGroupsFiltersTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressIpRangesTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressIpv6RangesTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressPrefixListIdsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressUserIdGroupPairsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressIpRangesTypeDef
        ],
        "Ipv6Ranges": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressIpv6RangesTypeDef
        ],
        "PrefixListIds": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressPrefixListIdsTypeDef
        ],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsIpRangesTypeDef
        ],
        "Ipv6Ranges": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsIpv6RangesTypeDef
        ],
        "PrefixListIds": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsPrefixListIdsTypeDef
        ],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsTagsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeSecurityGroupsResponseSecurityGroupsTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseSecurityGroupsTypeDef",
    {
        "Description": str,
        "GroupName": str,
        "IpPermissions": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsTypeDef
        ],
        "OwnerId": str,
        "GroupId": str,
        "IpPermissionsEgress": List[
            ClientDescribeSecurityGroupsResponseSecurityGroupsIpPermissionsEgressTypeDef
        ],
        "Tags": List[ClientDescribeSecurityGroupsResponseSecurityGroupsTagsTypeDef],
        "VpcId": str,
    },
    total=False,
)

ClientDescribeSecurityGroupsResponseTypeDef = TypedDict(
    "ClientDescribeSecurityGroupsResponseTypeDef",
    {
        "SecurityGroups": List[ClientDescribeSecurityGroupsResponseSecurityGroupsTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeSnapshotAttributeResponseCreateVolumePermissionsTypeDef = TypedDict(
    "ClientDescribeSnapshotAttributeResponseCreateVolumePermissionsTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientDescribeSnapshotAttributeResponseProductCodesTypeDef = TypedDict(
    "ClientDescribeSnapshotAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeSnapshotAttributeResponseTypeDef = TypedDict(
    "ClientDescribeSnapshotAttributeResponseTypeDef",
    {
        "CreateVolumePermissions": List[
            ClientDescribeSnapshotAttributeResponseCreateVolumePermissionsTypeDef
        ],
        "ProductCodes": List[ClientDescribeSnapshotAttributeResponseProductCodesTypeDef],
        "SnapshotId": str,
    },
    total=False,
)

ClientDescribeSnapshotsFiltersTypeDef = TypedDict(
    "ClientDescribeSnapshotsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeSnapshotsResponseSnapshotsTagsTypeDef = TypedDict(
    "ClientDescribeSnapshotsResponseSnapshotsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeSnapshotsResponseSnapshotsTypeDef = TypedDict(
    "ClientDescribeSnapshotsResponseSnapshotsTypeDef",
    {
        "DataEncryptionKeyId": str,
        "Description": str,
        "Encrypted": bool,
        "KmsKeyId": str,
        "OwnerId": str,
        "Progress": str,
        "SnapshotId": str,
        "StartTime": datetime,
        "State": Literal["pending", "completed", "error"],
        "StateMessage": str,
        "VolumeId": str,
        "VolumeSize": int,
        "OwnerAlias": str,
        "Tags": List[ClientDescribeSnapshotsResponseSnapshotsTagsTypeDef],
    },
    total=False,
)

ClientDescribeSnapshotsResponseTypeDef = TypedDict(
    "ClientDescribeSnapshotsResponseTypeDef",
    {"Snapshots": List[ClientDescribeSnapshotsResponseSnapshotsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionFaultTypeDef = TypedDict(
    "ClientDescribeSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionFaultTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDescribeSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionTypeDef = TypedDict(
    "ClientDescribeSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionTypeDef",
    {
        "Bucket": str,
        "Fault": ClientDescribeSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionFaultTypeDef,
        "OwnerId": str,
        "Prefix": str,
        "State": Literal["Active", "Inactive"],
    },
    total=False,
)

ClientDescribeSpotDatafeedSubscriptionResponseTypeDef = TypedDict(
    "ClientDescribeSpotDatafeedSubscriptionResponseTypeDef",
    {
        "SpotDatafeedSubscription": ClientDescribeSpotDatafeedSubscriptionResponseSpotDatafeedSubscriptionTypeDef
    },
    total=False,
)

ClientDescribeSpotFleetInstancesResponseActiveInstancesTypeDef = TypedDict(
    "ClientDescribeSpotFleetInstancesResponseActiveInstancesTypeDef",
    {
        "InstanceId": str,
        "InstanceType": str,
        "SpotInstanceRequestId": str,
        "InstanceHealth": Literal["healthy", "unhealthy"],
    },
    total=False,
)

ClientDescribeSpotFleetInstancesResponseTypeDef = TypedDict(
    "ClientDescribeSpotFleetInstancesResponseTypeDef",
    {
        "ActiveInstances": List[ClientDescribeSpotFleetInstancesResponseActiveInstancesTypeDef],
        "NextToken": str,
        "SpotFleetRequestId": str,
    },
    total=False,
)

ClientDescribeSpotFleetRequestHistoryResponseHistoryRecordsEventInformationTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestHistoryResponseHistoryRecordsEventInformationTypeDef",
    {"EventDescription": str, "EventSubType": str, "InstanceId": str},
    total=False,
)

ClientDescribeSpotFleetRequestHistoryResponseHistoryRecordsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestHistoryResponseHistoryRecordsTypeDef",
    {
        "EventInformation": ClientDescribeSpotFleetRequestHistoryResponseHistoryRecordsEventInformationTypeDef,
        "EventType": Literal["instanceChange", "fleetRequestChange", "error", "information"],
        "Timestamp": datetime,
    },
    total=False,
)

ClientDescribeSpotFleetRequestHistoryResponseTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestHistoryResponseTypeDef",
    {
        "HistoryRecords": List[ClientDescribeSpotFleetRequestHistoryResponseHistoryRecordsTypeDef],
        "LastEvaluatedTime": datetime,
        "NextToken": str,
        "SpotFleetRequestId": str,
        "StartTime": datetime,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTypeDef",
    {
        "SecurityGroups": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef
        ],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "Monitoring": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef,
        "NetworkInterfaces": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef
        ],
        "Placement": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef,
        "RamdiskId": str,
        "SpotPrice": str,
        "SubnetId": str,
        "UserData": str,
        "WeightedCapacity": float,
        "TagSpecifications": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef
        ],
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "SpotPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsTypeDef",
    {
        "LaunchTemplateSpecification": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef,
        "Overrides": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef
        ],
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef",
    {"Name": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef",
    {
        "ClassicLoadBalancers": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef
        ]
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef",
    {"Arn": str},
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef",
    {
        "TargetGroups": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef
        ]
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTypeDef",
    {
        "ClassicLoadBalancersConfig": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef,
        "TargetGroupsConfig": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigTypeDef",
    {
        "AllocationStrategy": Literal["lowestPrice", "diversified", "capacityOptimized"],
        "OnDemandAllocationStrategy": Literal["lowestPrice", "prioritized"],
        "ClientToken": str,
        "ExcessCapacityTerminationPolicy": Literal["noTermination", "default"],
        "FulfilledCapacity": float,
        "OnDemandFulfilledCapacity": float,
        "IamFleetRole": str,
        "LaunchSpecifications": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTypeDef
        ],
        "LaunchTemplateConfigs": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsTypeDef
        ],
        "SpotPrice": str,
        "TargetCapacity": int,
        "OnDemandTargetCapacity": int,
        "OnDemandMaxTotalPrice": str,
        "SpotMaxTotalPrice": str,
        "TerminateInstancesWithExpiration": bool,
        "Type": Literal["request", "maintain", "instant"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "ReplaceUnhealthyInstances": bool,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
        "LoadBalancersConfig": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTypeDef,
        "InstancePoolsToUseCount": int,
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsTypeDef",
    {
        "ActivityStatus": Literal[
            "error", "pending_fulfillment", "pending_termination", "fulfilled"
        ],
        "CreateTime": datetime,
        "SpotFleetRequestConfig": ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsSpotFleetRequestConfigTypeDef,
        "SpotFleetRequestId": str,
        "SpotFleetRequestState": Literal[
            "submitted",
            "active",
            "cancelled",
            "failed",
            "cancelled_running",
            "cancelled_terminating",
            "modifying",
        ],
    },
    total=False,
)

ClientDescribeSpotFleetRequestsResponseTypeDef = TypedDict(
    "ClientDescribeSpotFleetRequestsResponseTypeDef",
    {
        "NextToken": str,
        "SpotFleetRequestConfigs": List[
            ClientDescribeSpotFleetRequestsResponseSpotFleetRequestConfigsTypeDef
        ],
    },
    total=False,
)

ClientDescribeSpotInstanceRequestsFiltersTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsFaultTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsFaultTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationTypeDef",
    {
        "UserData": str,
        "SecurityGroups": List[
            ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef
        ],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "NetworkInterfaces": List[
            ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef
        ],
        "Placement": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef,
        "RamdiskId": str,
        "SubnetId": str,
        "Monitoring": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef,
    },
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsStatusTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsStatusTypeDef",
    {"Code": str, "Message": str, "UpdateTime": datetime},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsTagsTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsTypeDef",
    {
        "ActualBlockHourlyPrice": str,
        "AvailabilityZoneGroup": str,
        "BlockDurationMinutes": int,
        "CreateTime": datetime,
        "Fault": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsFaultTypeDef,
        "InstanceId": str,
        "LaunchGroup": str,
        "LaunchSpecification": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsLaunchSpecificationTypeDef,
        "LaunchedAvailabilityZone": str,
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "SpotInstanceRequestId": str,
        "SpotPrice": str,
        "State": Literal["open", "active", "closed", "cancelled", "failed"],
        "Status": ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsStatusTypeDef,
        "Tags": List[ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsTagsTypeDef],
        "Type": Literal["one-time", "persistent"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientDescribeSpotInstanceRequestsResponseTypeDef = TypedDict(
    "ClientDescribeSpotInstanceRequestsResponseTypeDef",
    {
        "SpotInstanceRequests": List[
            ClientDescribeSpotInstanceRequestsResponseSpotInstanceRequestsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeSpotPriceHistoryFiltersTypeDef = TypedDict(
    "ClientDescribeSpotPriceHistoryFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeSpotPriceHistoryResponseSpotPriceHistoryTypeDef = TypedDict(
    "ClientDescribeSpotPriceHistoryResponseSpotPriceHistoryTypeDef",
    {
        "AvailabilityZone": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "SpotPrice": str,
        "Timestamp": datetime,
    },
    total=False,
)

ClientDescribeSpotPriceHistoryResponseTypeDef = TypedDict(
    "ClientDescribeSpotPriceHistoryResponseTypeDef",
    {
        "NextToken": str,
        "SpotPriceHistory": List[ClientDescribeSpotPriceHistoryResponseSpotPriceHistoryTypeDef],
    },
    total=False,
)

ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsEgressUserIdGroupPairsTypeDef = TypedDict(
    "ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsEgressUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsEgressTypeDef = TypedDict(
    "ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsEgressTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[str],
        "PrefixListIds": List[str],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsEgressUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsTypeDef = TypedDict(
    "ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[str],
        "PrefixListIds": List[str],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetTypeDef = TypedDict(
    "ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "StaleIpPermissions": List[
            ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsTypeDef
        ],
        "StaleIpPermissionsEgress": List[
            ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetStaleIpPermissionsEgressTypeDef
        ],
        "VpcId": str,
    },
    total=False,
)

ClientDescribeStaleSecurityGroupsResponseTypeDef = TypedDict(
    "ClientDescribeStaleSecurityGroupsResponseTypeDef",
    {
        "NextToken": str,
        "StaleSecurityGroupSet": List[
            ClientDescribeStaleSecurityGroupsResponseStaleSecurityGroupSetTypeDef
        ],
    },
    total=False,
)

ClientDescribeSubnetsFiltersTypeDef = TypedDict(
    "ClientDescribeSubnetsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeSubnetsResponseSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientDescribeSubnetsResponseSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientDescribeSubnetsResponseSubnetsIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "ClientDescribeSubnetsResponseSubnetsIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientDescribeSubnetsResponseSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
    },
    total=False,
)

ClientDescribeSubnetsResponseSubnetsTagsTypeDef = TypedDict(
    "ClientDescribeSubnetsResponseSubnetsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeSubnetsResponseSubnetsTypeDef = TypedDict(
    "ClientDescribeSubnetsResponseSubnetsTypeDef",
    {
        "AvailabilityZone": str,
        "AvailabilityZoneId": str,
        "AvailableIpAddressCount": int,
        "CidrBlock": str,
        "DefaultForAz": bool,
        "MapPublicIpOnLaunch": bool,
        "State": Literal["pending", "available"],
        "SubnetId": str,
        "VpcId": str,
        "OwnerId": str,
        "AssignIpv6AddressOnCreation": bool,
        "Ipv6CidrBlockAssociationSet": List[
            ClientDescribeSubnetsResponseSubnetsIpv6CidrBlockAssociationSetTypeDef
        ],
        "Tags": List[ClientDescribeSubnetsResponseSubnetsTagsTypeDef],
        "SubnetArn": str,
        "OutpostArn": str,
    },
    total=False,
)

ClientDescribeSubnetsResponseTypeDef = TypedDict(
    "ClientDescribeSubnetsResponseTypeDef",
    {"Subnets": List[ClientDescribeSubnetsResponseSubnetsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeTagsFiltersTypeDef = TypedDict(
    "ClientDescribeTagsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeTagsResponseTagsTypeDef = TypedDict(
    "ClientDescribeTagsResponseTagsTypeDef",
    {
        "Key": str,
        "ResourceId": str,
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Value": str,
    },
    total=False,
)

ClientDescribeTagsResponseTypeDef = TypedDict(
    "ClientDescribeTagsResponseTypeDef",
    {"NextToken": str, "Tags": List[ClientDescribeTagsResponseTagsTypeDef]},
    total=False,
)

ClientDescribeTrafficMirrorFiltersFiltersTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersTagsTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersTypeDef",
    {
        "TrafficMirrorFilterId": str,
        "IngressFilterRules": List[
            ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersIngressFilterRulesTypeDef
        ],
        "EgressFilterRules": List[
            ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersEgressFilterRulesTypeDef
        ],
        "NetworkServices": List[str],
        "Description": str,
        "Tags": List[ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersTagsTypeDef],
    },
    total=False,
)

ClientDescribeTrafficMirrorFiltersResponseTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorFiltersResponseTypeDef",
    {
        "TrafficMirrorFilters": List[
            ClientDescribeTrafficMirrorFiltersResponseTrafficMirrorFiltersTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTrafficMirrorSessionsFiltersTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorSessionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTrafficMirrorSessionsResponseTrafficMirrorSessionsTagsTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorSessionsResponseTrafficMirrorSessionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTrafficMirrorSessionsResponseTrafficMirrorSessionsTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorSessionsResponseTrafficMirrorSessionsTypeDef",
    {
        "TrafficMirrorSessionId": str,
        "TrafficMirrorTargetId": str,
        "TrafficMirrorFilterId": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PacketLength": int,
        "SessionNumber": int,
        "VirtualNetworkId": int,
        "Description": str,
        "Tags": List[ClientDescribeTrafficMirrorSessionsResponseTrafficMirrorSessionsTagsTypeDef],
    },
    total=False,
)

ClientDescribeTrafficMirrorSessionsResponseTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorSessionsResponseTypeDef",
    {
        "TrafficMirrorSessions": List[
            ClientDescribeTrafficMirrorSessionsResponseTrafficMirrorSessionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTrafficMirrorTargetsFiltersTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorTargetsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTrafficMirrorTargetsResponseTrafficMirrorTargetsTagsTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorTargetsResponseTrafficMirrorTargetsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTrafficMirrorTargetsResponseTrafficMirrorTargetsTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorTargetsResponseTrafficMirrorTargetsTypeDef",
    {
        "TrafficMirrorTargetId": str,
        "NetworkInterfaceId": str,
        "NetworkLoadBalancerArn": str,
        "Type": Literal["network-interface", "network-load-balancer"],
        "Description": str,
        "OwnerId": str,
        "Tags": List[ClientDescribeTrafficMirrorTargetsResponseTrafficMirrorTargetsTagsTypeDef],
    },
    total=False,
)

ClientDescribeTrafficMirrorTargetsResponseTypeDef = TypedDict(
    "ClientDescribeTrafficMirrorTargetsResponseTypeDef",
    {
        "TrafficMirrorTargets": List[
            ClientDescribeTrafficMirrorTargetsResponseTrafficMirrorTargetsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTransitGatewayAttachmentsFiltersTypeDef = TypedDict(
    "ClientDescribeTransitGatewayAttachmentsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsAssociationTypeDef = TypedDict(
    "ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsAssociationTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsTagsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "TransitGatewayOwnerId": str,
        "ResourceOwnerId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "ResourceId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "Association": ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsAssociationTypeDef,
        "CreationTime": datetime,
        "Tags": List[
            ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeTransitGatewayAttachmentsResponseTypeDef = TypedDict(
    "ClientDescribeTransitGatewayAttachmentsResponseTypeDef",
    {
        "TransitGatewayAttachments": List[
            ClientDescribeTransitGatewayAttachmentsResponseTransitGatewayAttachmentsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTransitGatewayMulticastDomainsFiltersTypeDef = TypedDict(
    "ClientDescribeTransitGatewayMulticastDomainsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTransitGatewayMulticastDomainsResponseTransitGatewayMulticastDomainsTagsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayMulticastDomainsResponseTransitGatewayMulticastDomainsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTransitGatewayMulticastDomainsResponseTransitGatewayMulticastDomainsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayMulticastDomainsResponseTransitGatewayMulticastDomainsTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "CreationTime": datetime,
        "Tags": List[
            ClientDescribeTransitGatewayMulticastDomainsResponseTransitGatewayMulticastDomainsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeTransitGatewayMulticastDomainsResponseTypeDef = TypedDict(
    "ClientDescribeTransitGatewayMulticastDomainsResponseTypeDef",
    {
        "TransitGatewayMulticastDomains": List[
            ClientDescribeTransitGatewayMulticastDomainsResponseTransitGatewayMulticastDomainsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsFiltersTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsAccepterTgwInfoTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsAccepterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsRequesterTgwInfoTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsRequesterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsStatusTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsStatusTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsTagsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "RequesterTgwInfo": ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsRequesterTgwInfoTypeDef,
        "AccepterTgwInfo": ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsAccepterTgwInfoTypeDef,
        "Status": ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsStatusTypeDef,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "CreationTime": datetime,
        "Tags": List[
            ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeTransitGatewayPeeringAttachmentsResponseTypeDef = TypedDict(
    "ClientDescribeTransitGatewayPeeringAttachmentsResponseTypeDef",
    {
        "TransitGatewayPeeringAttachments": List[
            ClientDescribeTransitGatewayPeeringAttachmentsResponseTransitGatewayPeeringAttachmentsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTransitGatewayRouteTablesFiltersTypeDef = TypedDict(
    "ClientDescribeTransitGatewayRouteTablesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTransitGatewayRouteTablesResponseTransitGatewayRouteTablesTagsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayRouteTablesResponseTransitGatewayRouteTablesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTransitGatewayRouteTablesResponseTransitGatewayRouteTablesTypeDef = TypedDict(
    "ClientDescribeTransitGatewayRouteTablesResponseTransitGatewayRouteTablesTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "DefaultAssociationRouteTable": bool,
        "DefaultPropagationRouteTable": bool,
        "CreationTime": datetime,
        "Tags": List[
            ClientDescribeTransitGatewayRouteTablesResponseTransitGatewayRouteTablesTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeTransitGatewayRouteTablesResponseTypeDef = TypedDict(
    "ClientDescribeTransitGatewayRouteTablesResponseTypeDef",
    {
        "TransitGatewayRouteTables": List[
            ClientDescribeTransitGatewayRouteTablesResponseTransitGatewayRouteTablesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTransitGatewayVpcAttachmentsFiltersTypeDef = TypedDict(
    "ClientDescribeTransitGatewayVpcAttachmentsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsOptionsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsTagsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsTypeDef = TypedDict(
    "ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsOptionsTypeDef,
        "Tags": List[
            ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeTransitGatewayVpcAttachmentsResponseTypeDef = TypedDict(
    "ClientDescribeTransitGatewayVpcAttachmentsResponseTypeDef",
    {
        "TransitGatewayVpcAttachments": List[
            ClientDescribeTransitGatewayVpcAttachmentsResponseTransitGatewayVpcAttachmentsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeTransitGatewaysFiltersTypeDef = TypedDict(
    "ClientDescribeTransitGatewaysFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeTransitGatewaysResponseTransitGatewaysOptionsTypeDef = TypedDict(
    "ClientDescribeTransitGatewaysResponseTransitGatewaysOptionsTypeDef",
    {
        "AmazonSideAsn": int,
        "AutoAcceptSharedAttachments": Literal["enable", "disable"],
        "DefaultRouteTableAssociation": Literal["enable", "disable"],
        "AssociationDefaultRouteTableId": str,
        "DefaultRouteTablePropagation": Literal["enable", "disable"],
        "PropagationDefaultRouteTableId": str,
        "VpnEcmpSupport": Literal["enable", "disable"],
        "DnsSupport": Literal["enable", "disable"],
        "MulticastSupport": Literal["enable", "disable"],
    },
    total=False,
)

ClientDescribeTransitGatewaysResponseTransitGatewaysTagsTypeDef = TypedDict(
    "ClientDescribeTransitGatewaysResponseTransitGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeTransitGatewaysResponseTransitGatewaysTypeDef = TypedDict(
    "ClientDescribeTransitGatewaysResponseTransitGatewaysTypeDef",
    {
        "TransitGatewayId": str,
        "TransitGatewayArn": str,
        "State": Literal["pending", "available", "modifying", "deleting", "deleted"],
        "OwnerId": str,
        "Description": str,
        "CreationTime": datetime,
        "Options": ClientDescribeTransitGatewaysResponseTransitGatewaysOptionsTypeDef,
        "Tags": List[ClientDescribeTransitGatewaysResponseTransitGatewaysTagsTypeDef],
    },
    total=False,
)

ClientDescribeTransitGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeTransitGatewaysResponseTypeDef",
    {
        "TransitGateways": List[ClientDescribeTransitGatewaysResponseTransitGatewaysTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVolumeAttributeResponseAutoEnableIOTypeDef = TypedDict(
    "ClientDescribeVolumeAttributeResponseAutoEnableIOTypeDef", {"Value": bool}, total=False
)

ClientDescribeVolumeAttributeResponseProductCodesTypeDef = TypedDict(
    "ClientDescribeVolumeAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientDescribeVolumeAttributeResponseTypeDef = TypedDict(
    "ClientDescribeVolumeAttributeResponseTypeDef",
    {
        "AutoEnableIO": ClientDescribeVolumeAttributeResponseAutoEnableIOTypeDef,
        "ProductCodes": List[ClientDescribeVolumeAttributeResponseProductCodesTypeDef],
        "VolumeId": str,
    },
    total=False,
)

ClientDescribeVolumeStatusFiltersTypeDef = TypedDict(
    "ClientDescribeVolumeStatusFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVolumeStatusResponseVolumeStatusesActionsTypeDef = TypedDict(
    "ClientDescribeVolumeStatusResponseVolumeStatusesActionsTypeDef",
    {"Code": str, "Description": str, "EventId": str, "EventType": str},
    total=False,
)

ClientDescribeVolumeStatusResponseVolumeStatusesEventsTypeDef = TypedDict(
    "ClientDescribeVolumeStatusResponseVolumeStatusesEventsTypeDef",
    {
        "Description": str,
        "EventId": str,
        "EventType": str,
        "NotAfter": datetime,
        "NotBefore": datetime,
    },
    total=False,
)

ClientDescribeVolumeStatusResponseVolumeStatusesVolumeStatusDetailsTypeDef = TypedDict(
    "ClientDescribeVolumeStatusResponseVolumeStatusesVolumeStatusDetailsTypeDef",
    {"Name": Literal["io-enabled", "io-performance"], "Status": str},
    total=False,
)

ClientDescribeVolumeStatusResponseVolumeStatusesVolumeStatusTypeDef = TypedDict(
    "ClientDescribeVolumeStatusResponseVolumeStatusesVolumeStatusTypeDef",
    {
        "Details": List[ClientDescribeVolumeStatusResponseVolumeStatusesVolumeStatusDetailsTypeDef],
        "Status": Literal["ok", "impaired", "insufficient-data"],
    },
    total=False,
)

ClientDescribeVolumeStatusResponseVolumeStatusesTypeDef = TypedDict(
    "ClientDescribeVolumeStatusResponseVolumeStatusesTypeDef",
    {
        "Actions": List[ClientDescribeVolumeStatusResponseVolumeStatusesActionsTypeDef],
        "AvailabilityZone": str,
        "OutpostArn": str,
        "Events": List[ClientDescribeVolumeStatusResponseVolumeStatusesEventsTypeDef],
        "VolumeId": str,
        "VolumeStatus": ClientDescribeVolumeStatusResponseVolumeStatusesVolumeStatusTypeDef,
    },
    total=False,
)

ClientDescribeVolumeStatusResponseTypeDef = TypedDict(
    "ClientDescribeVolumeStatusResponseTypeDef",
    {
        "NextToken": str,
        "VolumeStatuses": List[ClientDescribeVolumeStatusResponseVolumeStatusesTypeDef],
    },
    total=False,
)

ClientDescribeVolumesFiltersTypeDef = TypedDict(
    "ClientDescribeVolumesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVolumesModificationsFiltersTypeDef = TypedDict(
    "ClientDescribeVolumesModificationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVolumesModificationsResponseVolumesModificationsTypeDef = TypedDict(
    "ClientDescribeVolumesModificationsResponseVolumesModificationsTypeDef",
    {
        "VolumeId": str,
        "ModificationState": Literal["modifying", "optimizing", "completed", "failed"],
        "StatusMessage": str,
        "TargetSize": int,
        "TargetIops": int,
        "TargetVolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "OriginalSize": int,
        "OriginalIops": int,
        "OriginalVolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Progress": int,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)

ClientDescribeVolumesModificationsResponseTypeDef = TypedDict(
    "ClientDescribeVolumesModificationsResponseTypeDef",
    {
        "VolumesModifications": List[
            ClientDescribeVolumesModificationsResponseVolumesModificationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVolumesResponseVolumesAttachmentsTypeDef = TypedDict(
    "ClientDescribeVolumesResponseVolumesAttachmentsTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

ClientDescribeVolumesResponseVolumesTagsTypeDef = TypedDict(
    "ClientDescribeVolumesResponseVolumesTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeVolumesResponseVolumesTypeDef = TypedDict(
    "ClientDescribeVolumesResponseVolumesTypeDef",
    {
        "Attachments": List[ClientDescribeVolumesResponseVolumesAttachmentsTypeDef],
        "AvailabilityZone": str,
        "CreateTime": datetime,
        "Encrypted": bool,
        "KmsKeyId": str,
        "OutpostArn": str,
        "Size": int,
        "SnapshotId": str,
        "State": Literal["creating", "available", "in-use", "deleting", "deleted", "error"],
        "VolumeId": str,
        "Iops": int,
        "Tags": List[ClientDescribeVolumesResponseVolumesTagsTypeDef],
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "FastRestored": bool,
    },
    total=False,
)

ClientDescribeVolumesResponseTypeDef = TypedDict(
    "ClientDescribeVolumesResponseTypeDef",
    {"Volumes": List[ClientDescribeVolumesResponseVolumesTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeVpcAttributeResponseEnableDnsHostnamesTypeDef = TypedDict(
    "ClientDescribeVpcAttributeResponseEnableDnsHostnamesTypeDef", {"Value": bool}, total=False
)

ClientDescribeVpcAttributeResponseEnableDnsSupportTypeDef = TypedDict(
    "ClientDescribeVpcAttributeResponseEnableDnsSupportTypeDef", {"Value": bool}, total=False
)

ClientDescribeVpcAttributeResponseTypeDef = TypedDict(
    "ClientDescribeVpcAttributeResponseTypeDef",
    {
        "VpcId": str,
        "EnableDnsHostnames": ClientDescribeVpcAttributeResponseEnableDnsHostnamesTypeDef,
        "EnableDnsSupport": ClientDescribeVpcAttributeResponseEnableDnsSupportTypeDef,
    },
    total=False,
)

ClientDescribeVpcClassicLinkDnsSupportResponseVpcsTypeDef = TypedDict(
    "ClientDescribeVpcClassicLinkDnsSupportResponseVpcsTypeDef",
    {"ClassicLinkDnsSupported": bool, "VpcId": str},
    total=False,
)

ClientDescribeVpcClassicLinkDnsSupportResponseTypeDef = TypedDict(
    "ClientDescribeVpcClassicLinkDnsSupportResponseTypeDef",
    {"NextToken": str, "Vpcs": List[ClientDescribeVpcClassicLinkDnsSupportResponseVpcsTypeDef]},
    total=False,
)

ClientDescribeVpcClassicLinkFiltersTypeDef = TypedDict(
    "ClientDescribeVpcClassicLinkFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVpcClassicLinkResponseVpcsTagsTypeDef = TypedDict(
    "ClientDescribeVpcClassicLinkResponseVpcsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeVpcClassicLinkResponseVpcsTypeDef = TypedDict(
    "ClientDescribeVpcClassicLinkResponseVpcsTypeDef",
    {
        "ClassicLinkEnabled": bool,
        "Tags": List[ClientDescribeVpcClassicLinkResponseVpcsTagsTypeDef],
        "VpcId": str,
    },
    total=False,
)

ClientDescribeVpcClassicLinkResponseTypeDef = TypedDict(
    "ClientDescribeVpcClassicLinkResponseTypeDef",
    {"Vpcs": List[ClientDescribeVpcClassicLinkResponseVpcsTypeDef]},
    total=False,
)

ClientDescribeVpcEndpointConnectionNotificationsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionNotificationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVpcEndpointConnectionNotificationsResponseConnectionNotificationSetTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionNotificationsResponseConnectionNotificationSetTypeDef",
    {
        "ConnectionNotificationId": str,
        "ServiceId": str,
        "VpcEndpointId": str,
        "ConnectionNotificationType": str,
        "ConnectionNotificationArn": str,
        "ConnectionEvents": List[str],
        "ConnectionNotificationState": Literal["Enabled", "Disabled"],
    },
    total=False,
)

ClientDescribeVpcEndpointConnectionNotificationsResponseTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionNotificationsResponseTypeDef",
    {
        "ConnectionNotificationSet": List[
            ClientDescribeVpcEndpointConnectionNotificationsResponseConnectionNotificationSetTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVpcEndpointConnectionsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVpcEndpointConnectionsResponseVpcEndpointConnectionsDnsEntriesTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionsResponseVpcEndpointConnectionsDnsEntriesTypeDef",
    {"DnsName": str, "HostedZoneId": str},
    total=False,
)

ClientDescribeVpcEndpointConnectionsResponseVpcEndpointConnectionsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionsResponseVpcEndpointConnectionsTypeDef",
    {
        "ServiceId": str,
        "VpcEndpointId": str,
        "VpcEndpointOwner": str,
        "VpcEndpointState": Literal[
            "PendingAcceptance",
            "Pending",
            "Available",
            "Deleting",
            "Deleted",
            "Rejected",
            "Failed",
            "Expired",
        ],
        "CreationTimestamp": datetime,
        "DnsEntries": List[
            ClientDescribeVpcEndpointConnectionsResponseVpcEndpointConnectionsDnsEntriesTypeDef
        ],
        "NetworkLoadBalancerArns": List[str],
    },
    total=False,
)

ClientDescribeVpcEndpointConnectionsResponseTypeDef = TypedDict(
    "ClientDescribeVpcEndpointConnectionsResponseTypeDef",
    {
        "VpcEndpointConnections": List[
            ClientDescribeVpcEndpointConnectionsResponseVpcEndpointConnectionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVpcEndpointServiceConfigurationsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServiceConfigurationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsServiceTypeTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsServiceTypeTypeDef",
    {"ServiceType": Literal["Interface", "Gateway"]},
    total=False,
)

ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsTagsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsTypeDef",
    {
        "ServiceType": List[
            ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsServiceTypeTypeDef
        ],
        "ServiceId": str,
        "ServiceName": str,
        "ServiceState": Literal["Pending", "Available", "Deleting", "Deleted", "Failed"],
        "AvailabilityZones": List[str],
        "AcceptanceRequired": bool,
        "ManagesVpcEndpoints": bool,
        "NetworkLoadBalancerArns": List[str],
        "BaseEndpointDnsNames": List[str],
        "PrivateDnsName": str,
        "Tags": List[
            ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsTagsTypeDef
        ],
    },
    total=False,
)

ClientDescribeVpcEndpointServiceConfigurationsResponseTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServiceConfigurationsResponseTypeDef",
    {
        "ServiceConfigurations": List[
            ClientDescribeVpcEndpointServiceConfigurationsResponseServiceConfigurationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVpcEndpointServicePermissionsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicePermissionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVpcEndpointServicePermissionsResponseAllowedPrincipalsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicePermissionsResponseAllowedPrincipalsTypeDef",
    {
        "PrincipalType": Literal["All", "Service", "OrganizationUnit", "Account", "User", "Role"],
        "Principal": str,
    },
    total=False,
)

ClientDescribeVpcEndpointServicePermissionsResponseTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicePermissionsResponseTypeDef",
    {
        "AllowedPrincipals": List[
            ClientDescribeVpcEndpointServicePermissionsResponseAllowedPrincipalsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVpcEndpointServicesFiltersTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVpcEndpointServicesResponseServiceDetailsServiceTypeTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicesResponseServiceDetailsServiceTypeTypeDef",
    {"ServiceType": Literal["Interface", "Gateway"]},
    total=False,
)

ClientDescribeVpcEndpointServicesResponseServiceDetailsTagsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicesResponseServiceDetailsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeVpcEndpointServicesResponseServiceDetailsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicesResponseServiceDetailsTypeDef",
    {
        "ServiceName": str,
        "ServiceId": str,
        "ServiceType": List[
            ClientDescribeVpcEndpointServicesResponseServiceDetailsServiceTypeTypeDef
        ],
        "AvailabilityZones": List[str],
        "Owner": str,
        "BaseEndpointDnsNames": List[str],
        "PrivateDnsName": str,
        "VpcEndpointPolicySupported": bool,
        "AcceptanceRequired": bool,
        "ManagesVpcEndpoints": bool,
        "Tags": List[ClientDescribeVpcEndpointServicesResponseServiceDetailsTagsTypeDef],
    },
    total=False,
)

ClientDescribeVpcEndpointServicesResponseTypeDef = TypedDict(
    "ClientDescribeVpcEndpointServicesResponseTypeDef",
    {
        "ServiceNames": List[str],
        "ServiceDetails": List[ClientDescribeVpcEndpointServicesResponseServiceDetailsTypeDef],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVpcEndpointsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcEndpointsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVpcEndpointsResponseVpcEndpointsDnsEntriesTypeDef = TypedDict(
    "ClientDescribeVpcEndpointsResponseVpcEndpointsDnsEntriesTypeDef",
    {"DnsName": str, "HostedZoneId": str},
    total=False,
)

ClientDescribeVpcEndpointsResponseVpcEndpointsGroupsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointsResponseVpcEndpointsGroupsTypeDef",
    {"GroupId": str, "GroupName": str},
    total=False,
)

ClientDescribeVpcEndpointsResponseVpcEndpointsTagsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointsResponseVpcEndpointsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeVpcEndpointsResponseVpcEndpointsTypeDef = TypedDict(
    "ClientDescribeVpcEndpointsResponseVpcEndpointsTypeDef",
    {
        "VpcEndpointId": str,
        "VpcEndpointType": Literal["Interface", "Gateway"],
        "VpcId": str,
        "ServiceName": str,
        "State": Literal[
            "PendingAcceptance",
            "Pending",
            "Available",
            "Deleting",
            "Deleted",
            "Rejected",
            "Failed",
            "Expired",
        ],
        "PolicyDocument": str,
        "RouteTableIds": List[str],
        "SubnetIds": List[str],
        "Groups": List[ClientDescribeVpcEndpointsResponseVpcEndpointsGroupsTypeDef],
        "PrivateDnsEnabled": bool,
        "RequesterManaged": bool,
        "NetworkInterfaceIds": List[str],
        "DnsEntries": List[ClientDescribeVpcEndpointsResponseVpcEndpointsDnsEntriesTypeDef],
        "CreationTimestamp": datetime,
        "Tags": List[ClientDescribeVpcEndpointsResponseVpcEndpointsTagsTypeDef],
        "OwnerId": str,
    },
    total=False,
)

ClientDescribeVpcEndpointsResponseTypeDef = TypedDict(
    "ClientDescribeVpcEndpointsResponseTypeDef",
    {"VpcEndpoints": List[ClientDescribeVpcEndpointsResponseVpcEndpointsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeVpcPeeringConnectionsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsStatusTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsStatusTypeDef",
    {
        "Code": Literal[
            "initiating-request",
            "pending-acceptance",
            "active",
            "deleted",
            "rejected",
            "failed",
            "expired",
            "provisioning",
            "deleting",
        ],
        "Message": str,
    },
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsTagsTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsTypeDef",
    {
        "AccepterVpcInfo": ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsAccepterVpcInfoTypeDef,
        "ExpirationTime": datetime,
        "RequesterVpcInfo": ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsRequesterVpcInfoTypeDef,
        "Status": ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsStatusTypeDef,
        "Tags": List[ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsTagsTypeDef],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientDescribeVpcPeeringConnectionsResponseTypeDef = TypedDict(
    "ClientDescribeVpcPeeringConnectionsResponseTypeDef",
    {
        "VpcPeeringConnections": List[
            ClientDescribeVpcPeeringConnectionsResponseVpcPeeringConnectionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientDescribeVpcsFiltersTypeDef = TypedDict(
    "ClientDescribeVpcsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVpcsResponseVpcsCidrBlockAssociationSetCidrBlockStateTypeDef = TypedDict(
    "ClientDescribeVpcsResponseVpcsCidrBlockAssociationSetCidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientDescribeVpcsResponseVpcsCidrBlockAssociationSetTypeDef = TypedDict(
    "ClientDescribeVpcsResponseVpcsCidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "CidrBlock": str,
        "CidrBlockState": ClientDescribeVpcsResponseVpcsCidrBlockAssociationSetCidrBlockStateTypeDef,
    },
    total=False,
)

ClientDescribeVpcsResponseVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientDescribeVpcsResponseVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientDescribeVpcsResponseVpcsIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "ClientDescribeVpcsResponseVpcsIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientDescribeVpcsResponseVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
        "NetworkBorderGroup": str,
    },
    total=False,
)

ClientDescribeVpcsResponseVpcsTagsTypeDef = TypedDict(
    "ClientDescribeVpcsResponseVpcsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientDescribeVpcsResponseVpcsTypeDef = TypedDict(
    "ClientDescribeVpcsResponseVpcsTypeDef",
    {
        "CidrBlock": str,
        "DhcpOptionsId": str,
        "State": Literal["pending", "available"],
        "VpcId": str,
        "OwnerId": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "Ipv6CidrBlockAssociationSet": List[
            ClientDescribeVpcsResponseVpcsIpv6CidrBlockAssociationSetTypeDef
        ],
        "CidrBlockAssociationSet": List[
            ClientDescribeVpcsResponseVpcsCidrBlockAssociationSetTypeDef
        ],
        "IsDefault": bool,
        "Tags": List[ClientDescribeVpcsResponseVpcsTagsTypeDef],
    },
    total=False,
)

ClientDescribeVpcsResponseTypeDef = TypedDict(
    "ClientDescribeVpcsResponseTypeDef",
    {"Vpcs": List[ClientDescribeVpcsResponseVpcsTypeDef], "NextToken": str},
    total=False,
)

ClientDescribeVpnConnectionsFiltersTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsIkeVersionsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsIkeVersionsTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsTypeDef",
    {
        "OutsideIpAddress": str,
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DpdTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IkeVersions": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsIkeVersionsTypeDef
        ],
    },
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTypeDef",
    {
        "EnableAcceleration": bool,
        "StaticRoutesOnly": bool,
        "TunnelOptions": List[
            ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTunnelOptionsTypeDef
        ],
    },
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsRoutesTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "Source": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
    },
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsTagsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsVgwTelemetryTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsVgwTelemetryTypeDef",
    {
        "AcceptedRouteCount": int,
        "LastStatusChange": datetime,
        "OutsideIpAddress": str,
        "Status": Literal["UP", "DOWN"],
        "StatusMessage": str,
        "CertificateArn": str,
    },
    total=False,
)

ClientDescribeVpnConnectionsResponseVpnConnectionsTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseVpnConnectionsTypeDef",
    {
        "CustomerGatewayConfiguration": str,
        "CustomerGatewayId": str,
        "Category": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpnConnectionId": str,
        "VpnGatewayId": str,
        "TransitGatewayId": str,
        "Options": ClientDescribeVpnConnectionsResponseVpnConnectionsOptionsTypeDef,
        "Routes": List[ClientDescribeVpnConnectionsResponseVpnConnectionsRoutesTypeDef],
        "Tags": List[ClientDescribeVpnConnectionsResponseVpnConnectionsTagsTypeDef],
        "VgwTelemetry": List[ClientDescribeVpnConnectionsResponseVpnConnectionsVgwTelemetryTypeDef],
    },
    total=False,
)

ClientDescribeVpnConnectionsResponseTypeDef = TypedDict(
    "ClientDescribeVpnConnectionsResponseTypeDef",
    {"VpnConnections": List[ClientDescribeVpnConnectionsResponseVpnConnectionsTypeDef]},
    total=False,
)

ClientDescribeVpnGatewaysFiltersTypeDef = TypedDict(
    "ClientDescribeVpnGatewaysFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientDescribeVpnGatewaysResponseVpnGatewaysTagsTypeDef = TypedDict(
    "ClientDescribeVpnGatewaysResponseVpnGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientDescribeVpnGatewaysResponseVpnGatewaysVpcAttachmentsTypeDef = TypedDict(
    "ClientDescribeVpnGatewaysResponseVpnGatewaysVpcAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

ClientDescribeVpnGatewaysResponseVpnGatewaysTypeDef = TypedDict(
    "ClientDescribeVpnGatewaysResponseVpnGatewaysTypeDef",
    {
        "AvailabilityZone": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpcAttachments": List[ClientDescribeVpnGatewaysResponseVpnGatewaysVpcAttachmentsTypeDef],
        "VpnGatewayId": str,
        "AmazonSideAsn": int,
        "Tags": List[ClientDescribeVpnGatewaysResponseVpnGatewaysTagsTypeDef],
    },
    total=False,
)

ClientDescribeVpnGatewaysResponseTypeDef = TypedDict(
    "ClientDescribeVpnGatewaysResponseTypeDef",
    {"VpnGateways": List[ClientDescribeVpnGatewaysResponseVpnGatewaysTypeDef]},
    total=False,
)

ClientDetachClassicLinkVpcResponseTypeDef = TypedDict(
    "ClientDetachClassicLinkVpcResponseTypeDef", {"Return": bool}, total=False
)

ClientDetachVolumeResponseTypeDef = TypedDict(
    "ClientDetachVolumeResponseTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

ClientDisableEbsEncryptionByDefaultResponseTypeDef = TypedDict(
    "ClientDisableEbsEncryptionByDefaultResponseTypeDef",
    {"EbsEncryptionByDefault": bool},
    total=False,
)

ClientDisableFastSnapshotRestoresResponseSuccessfulTypeDef = TypedDict(
    "ClientDisableFastSnapshotRestoresResponseSuccessfulTypeDef",
    {
        "SnapshotId": str,
        "AvailabilityZone": str,
        "State": Literal["enabling", "optimizing", "enabled", "disabling", "disabled"],
        "StateTransitionReason": str,
        "OwnerId": str,
        "OwnerAlias": str,
        "EnablingTime": datetime,
        "OptimizingTime": datetime,
        "EnabledTime": datetime,
        "DisablingTime": datetime,
        "DisabledTime": datetime,
    },
    total=False,
)

ClientDisableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsErrorTypeDef = TypedDict(
    "ClientDisableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientDisableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsTypeDef = TypedDict(
    "ClientDisableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsTypeDef",
    {
        "AvailabilityZone": str,
        "Error": ClientDisableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsErrorTypeDef,
    },
    total=False,
)

ClientDisableFastSnapshotRestoresResponseUnsuccessfulTypeDef = TypedDict(
    "ClientDisableFastSnapshotRestoresResponseUnsuccessfulTypeDef",
    {
        "SnapshotId": str,
        "FastSnapshotRestoreStateErrors": List[
            ClientDisableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsTypeDef
        ],
    },
    total=False,
)

ClientDisableFastSnapshotRestoresResponseTypeDef = TypedDict(
    "ClientDisableFastSnapshotRestoresResponseTypeDef",
    {
        "Successful": List[ClientDisableFastSnapshotRestoresResponseSuccessfulTypeDef],
        "Unsuccessful": List[ClientDisableFastSnapshotRestoresResponseUnsuccessfulTypeDef],
    },
    total=False,
)

ClientDisableTransitGatewayRouteTablePropagationResponsePropagationTypeDef = TypedDict(
    "ClientDisableTransitGatewayRouteTablePropagationResponsePropagationTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "TransitGatewayRouteTableId": str,
        "State": Literal["enabling", "enabled", "disabling", "disabled"],
    },
    total=False,
)

ClientDisableTransitGatewayRouteTablePropagationResponseTypeDef = TypedDict(
    "ClientDisableTransitGatewayRouteTablePropagationResponseTypeDef",
    {"Propagation": ClientDisableTransitGatewayRouteTablePropagationResponsePropagationTypeDef},
    total=False,
)

ClientDisableVpcClassicLinkDnsSupportResponseTypeDef = TypedDict(
    "ClientDisableVpcClassicLinkDnsSupportResponseTypeDef", {"Return": bool}, total=False
)

ClientDisableVpcClassicLinkResponseTypeDef = TypedDict(
    "ClientDisableVpcClassicLinkResponseTypeDef", {"Return": bool}, total=False
)

ClientDisassociateClientVpnTargetNetworkResponseStatusTypeDef = TypedDict(
    "ClientDisassociateClientVpnTargetNetworkResponseStatusTypeDef",
    {
        "Code": Literal[
            "associating", "associated", "association-failed", "disassociating", "disassociated"
        ],
        "Message": str,
    },
    total=False,
)

ClientDisassociateClientVpnTargetNetworkResponseTypeDef = TypedDict(
    "ClientDisassociateClientVpnTargetNetworkResponseTypeDef",
    {"AssociationId": str, "Status": ClientDisassociateClientVpnTargetNetworkResponseStatusTypeDef},
    total=False,
)

ClientDisassociateIamInstanceProfileResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef = TypedDict(
    "ClientDisassociateIamInstanceProfileResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

ClientDisassociateIamInstanceProfileResponseIamInstanceProfileAssociationTypeDef = TypedDict(
    "ClientDisassociateIamInstanceProfileResponseIamInstanceProfileAssociationTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "IamInstanceProfile": ClientDisassociateIamInstanceProfileResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
        "Timestamp": datetime,
    },
    total=False,
)

ClientDisassociateIamInstanceProfileResponseTypeDef = TypedDict(
    "ClientDisassociateIamInstanceProfileResponseTypeDef",
    {
        "IamInstanceProfileAssociation": ClientDisassociateIamInstanceProfileResponseIamInstanceProfileAssociationTypeDef
    },
    total=False,
)

ClientDisassociateSubnetCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientDisassociateSubnetCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientDisassociateSubnetCidrBlockResponseIpv6CidrBlockAssociationTypeDef = TypedDict(
    "ClientDisassociateSubnetCidrBlockResponseIpv6CidrBlockAssociationTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientDisassociateSubnetCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef,
    },
    total=False,
)

ClientDisassociateSubnetCidrBlockResponseTypeDef = TypedDict(
    "ClientDisassociateSubnetCidrBlockResponseTypeDef",
    {
        "Ipv6CidrBlockAssociation": ClientDisassociateSubnetCidrBlockResponseIpv6CidrBlockAssociationTypeDef,
        "SubnetId": str,
    },
    total=False,
)

ClientDisassociateTransitGatewayMulticastDomainResponseAssociationsSubnetsTypeDef = TypedDict(
    "ClientDisassociateTransitGatewayMulticastDomainResponseAssociationsSubnetsTypeDef",
    {
        "SubnetId": str,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientDisassociateTransitGatewayMulticastDomainResponseAssociationsTypeDef = TypedDict(
    "ClientDisassociateTransitGatewayMulticastDomainResponseAssociationsTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "Subnets": List[
            ClientDisassociateTransitGatewayMulticastDomainResponseAssociationsSubnetsTypeDef
        ],
    },
    total=False,
)

ClientDisassociateTransitGatewayMulticastDomainResponseTypeDef = TypedDict(
    "ClientDisassociateTransitGatewayMulticastDomainResponseTypeDef",
    {"Associations": ClientDisassociateTransitGatewayMulticastDomainResponseAssociationsTypeDef},
    total=False,
)

ClientDisassociateTransitGatewayRouteTableResponseAssociationTypeDef = TypedDict(
    "ClientDisassociateTransitGatewayRouteTableResponseAssociationTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientDisassociateTransitGatewayRouteTableResponseTypeDef = TypedDict(
    "ClientDisassociateTransitGatewayRouteTableResponseTypeDef",
    {"Association": ClientDisassociateTransitGatewayRouteTableResponseAssociationTypeDef},
    total=False,
)

ClientDisassociateVpcCidrBlockResponseCidrBlockAssociationCidrBlockStateTypeDef = TypedDict(
    "ClientDisassociateVpcCidrBlockResponseCidrBlockAssociationCidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientDisassociateVpcCidrBlockResponseCidrBlockAssociationTypeDef = TypedDict(
    "ClientDisassociateVpcCidrBlockResponseCidrBlockAssociationTypeDef",
    {
        "AssociationId": str,
        "CidrBlock": str,
        "CidrBlockState": ClientDisassociateVpcCidrBlockResponseCidrBlockAssociationCidrBlockStateTypeDef,
    },
    total=False,
)

ClientDisassociateVpcCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef = TypedDict(
    "ClientDisassociateVpcCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

ClientDisassociateVpcCidrBlockResponseIpv6CidrBlockAssociationTypeDef = TypedDict(
    "ClientDisassociateVpcCidrBlockResponseIpv6CidrBlockAssociationTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": ClientDisassociateVpcCidrBlockResponseIpv6CidrBlockAssociationIpv6CidrBlockStateTypeDef,
        "NetworkBorderGroup": str,
    },
    total=False,
)

ClientDisassociateVpcCidrBlockResponseTypeDef = TypedDict(
    "ClientDisassociateVpcCidrBlockResponseTypeDef",
    {
        "Ipv6CidrBlockAssociation": ClientDisassociateVpcCidrBlockResponseIpv6CidrBlockAssociationTypeDef,
        "CidrBlockAssociation": ClientDisassociateVpcCidrBlockResponseCidrBlockAssociationTypeDef,
        "VpcId": str,
    },
    total=False,
)

ClientEnableEbsEncryptionByDefaultResponseTypeDef = TypedDict(
    "ClientEnableEbsEncryptionByDefaultResponseTypeDef",
    {"EbsEncryptionByDefault": bool},
    total=False,
)

ClientEnableFastSnapshotRestoresResponseSuccessfulTypeDef = TypedDict(
    "ClientEnableFastSnapshotRestoresResponseSuccessfulTypeDef",
    {
        "SnapshotId": str,
        "AvailabilityZone": str,
        "State": Literal["enabling", "optimizing", "enabled", "disabling", "disabled"],
        "StateTransitionReason": str,
        "OwnerId": str,
        "OwnerAlias": str,
        "EnablingTime": datetime,
        "OptimizingTime": datetime,
        "EnabledTime": datetime,
        "DisablingTime": datetime,
        "DisabledTime": datetime,
    },
    total=False,
)

ClientEnableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsErrorTypeDef = TypedDict(
    "ClientEnableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientEnableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsTypeDef = TypedDict(
    "ClientEnableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsTypeDef",
    {
        "AvailabilityZone": str,
        "Error": ClientEnableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsErrorTypeDef,
    },
    total=False,
)

ClientEnableFastSnapshotRestoresResponseUnsuccessfulTypeDef = TypedDict(
    "ClientEnableFastSnapshotRestoresResponseUnsuccessfulTypeDef",
    {
        "SnapshotId": str,
        "FastSnapshotRestoreStateErrors": List[
            ClientEnableFastSnapshotRestoresResponseUnsuccessfulFastSnapshotRestoreStateErrorsTypeDef
        ],
    },
    total=False,
)

ClientEnableFastSnapshotRestoresResponseTypeDef = TypedDict(
    "ClientEnableFastSnapshotRestoresResponseTypeDef",
    {
        "Successful": List[ClientEnableFastSnapshotRestoresResponseSuccessfulTypeDef],
        "Unsuccessful": List[ClientEnableFastSnapshotRestoresResponseUnsuccessfulTypeDef],
    },
    total=False,
)

ClientEnableTransitGatewayRouteTablePropagationResponsePropagationTypeDef = TypedDict(
    "ClientEnableTransitGatewayRouteTablePropagationResponsePropagationTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "TransitGatewayRouteTableId": str,
        "State": Literal["enabling", "enabled", "disabling", "disabled"],
    },
    total=False,
)

ClientEnableTransitGatewayRouteTablePropagationResponseTypeDef = TypedDict(
    "ClientEnableTransitGatewayRouteTablePropagationResponseTypeDef",
    {"Propagation": ClientEnableTransitGatewayRouteTablePropagationResponsePropagationTypeDef},
    total=False,
)

ClientEnableVpcClassicLinkDnsSupportResponseTypeDef = TypedDict(
    "ClientEnableVpcClassicLinkDnsSupportResponseTypeDef", {"Return": bool}, total=False
)

ClientEnableVpcClassicLinkResponseTypeDef = TypedDict(
    "ClientEnableVpcClassicLinkResponseTypeDef", {"Return": bool}, total=False
)

ClientExportClientVpnClientCertificateRevocationListResponseStatusTypeDef = TypedDict(
    "ClientExportClientVpnClientCertificateRevocationListResponseStatusTypeDef",
    {"Code": Literal["pending", "active"], "Message": str},
    total=False,
)

ClientExportClientVpnClientCertificateRevocationListResponseTypeDef = TypedDict(
    "ClientExportClientVpnClientCertificateRevocationListResponseTypeDef",
    {
        "CertificateRevocationList": str,
        "Status": ClientExportClientVpnClientCertificateRevocationListResponseStatusTypeDef,
    },
    total=False,
)

ClientExportClientVpnClientConfigurationResponseTypeDef = TypedDict(
    "ClientExportClientVpnClientConfigurationResponseTypeDef",
    {"ClientConfiguration": str},
    total=False,
)

ClientExportImageResponseS3ExportLocationTypeDef = TypedDict(
    "ClientExportImageResponseS3ExportLocationTypeDef",
    {"S3Bucket": str, "S3Prefix": str},
    total=False,
)

ClientExportImageResponseTypeDef = TypedDict(
    "ClientExportImageResponseTypeDef",
    {
        "Description": str,
        "DiskImageFormat": Literal["VMDK", "RAW", "VHD"],
        "ExportImageTaskId": str,
        "ImageId": str,
        "RoleName": str,
        "Progress": str,
        "S3ExportLocation": ClientExportImageResponseS3ExportLocationTypeDef,
        "Status": str,
        "StatusMessage": str,
    },
    total=False,
)

_RequiredClientExportImageS3ExportLocationTypeDef = TypedDict(
    "_RequiredClientExportImageS3ExportLocationTypeDef", {"S3Bucket": str}
)
_OptionalClientExportImageS3ExportLocationTypeDef = TypedDict(
    "_OptionalClientExportImageS3ExportLocationTypeDef", {"S3Prefix": str}, total=False
)


class ClientExportImageS3ExportLocationTypeDef(
    _RequiredClientExportImageS3ExportLocationTypeDef,
    _OptionalClientExportImageS3ExportLocationTypeDef,
):
    pass


ClientExportTransitGatewayRoutesFiltersTypeDef = TypedDict(
    "ClientExportTransitGatewayRoutesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientExportTransitGatewayRoutesResponseTypeDef = TypedDict(
    "ClientExportTransitGatewayRoutesResponseTypeDef", {"S3Location": str}, total=False
)

ClientGetCapacityReservationUsageResponseInstanceUsagesTypeDef = TypedDict(
    "ClientGetCapacityReservationUsageResponseInstanceUsagesTypeDef",
    {"AccountId": str, "UsedInstanceCount": int},
    total=False,
)

ClientGetCapacityReservationUsageResponseTypeDef = TypedDict(
    "ClientGetCapacityReservationUsageResponseTypeDef",
    {
        "NextToken": str,
        "CapacityReservationId": str,
        "InstanceType": str,
        "TotalInstanceCount": int,
        "AvailableInstanceCount": int,
        "State": Literal["active", "expired", "cancelled", "pending", "failed"],
        "InstanceUsages": List[ClientGetCapacityReservationUsageResponseInstanceUsagesTypeDef],
    },
    total=False,
)

ClientGetCoipPoolUsageFiltersTypeDef = TypedDict(
    "ClientGetCoipPoolUsageFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientGetCoipPoolUsageResponseCoipAddressUsagesTypeDef = TypedDict(
    "ClientGetCoipPoolUsageResponseCoipAddressUsagesTypeDef",
    {"AllocationId": str, "AwsAccountId": str, "AwsService": str, "CoIp": str},
    total=False,
)

ClientGetCoipPoolUsageResponseTypeDef = TypedDict(
    "ClientGetCoipPoolUsageResponseTypeDef",
    {
        "CoipPoolId": str,
        "CoipAddressUsages": List[ClientGetCoipPoolUsageResponseCoipAddressUsagesTypeDef],
        "LocalGatewayRouteTableId": str,
    },
    total=False,
)

ClientGetConsoleOutputResponseTypeDef = TypedDict(
    "ClientGetConsoleOutputResponseTypeDef",
    {"InstanceId": str, "Output": str, "Timestamp": datetime},
    total=False,
)

ClientGetConsoleScreenshotResponseTypeDef = TypedDict(
    "ClientGetConsoleScreenshotResponseTypeDef", {"ImageData": str, "InstanceId": str}, total=False
)

ClientGetDefaultCreditSpecificationResponseInstanceFamilyCreditSpecificationTypeDef = TypedDict(
    "ClientGetDefaultCreditSpecificationResponseInstanceFamilyCreditSpecificationTypeDef",
    {"InstanceFamily": Literal["t2", "t3", "t3a"], "CpuCredits": str},
    total=False,
)

ClientGetDefaultCreditSpecificationResponseTypeDef = TypedDict(
    "ClientGetDefaultCreditSpecificationResponseTypeDef",
    {
        "InstanceFamilyCreditSpecification": ClientGetDefaultCreditSpecificationResponseInstanceFamilyCreditSpecificationTypeDef
    },
    total=False,
)

ClientGetEbsDefaultKmsKeyIdResponseTypeDef = TypedDict(
    "ClientGetEbsDefaultKmsKeyIdResponseTypeDef", {"KmsKeyId": str}, total=False
)

ClientGetEbsEncryptionByDefaultResponseTypeDef = TypedDict(
    "ClientGetEbsEncryptionByDefaultResponseTypeDef", {"EbsEncryptionByDefault": bool}, total=False
)

ClientGetHostReservationPurchasePreviewResponsePurchaseTypeDef = TypedDict(
    "ClientGetHostReservationPurchasePreviewResponsePurchaseTypeDef",
    {
        "CurrencyCode": str,
        "Duration": int,
        "HostIdSet": List[str],
        "HostReservationId": str,
        "HourlyPrice": str,
        "InstanceFamily": str,
        "PaymentOption": Literal["AllUpfront", "PartialUpfront", "NoUpfront"],
        "UpfrontPrice": str,
    },
    total=False,
)

ClientGetHostReservationPurchasePreviewResponseTypeDef = TypedDict(
    "ClientGetHostReservationPurchasePreviewResponseTypeDef",
    {
        "CurrencyCode": str,
        "Purchase": List[ClientGetHostReservationPurchasePreviewResponsePurchaseTypeDef],
        "TotalHourlyPrice": str,
        "TotalUpfrontPrice": str,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataBlockDeviceMappingsEbsTypeDef",
    {
        "Encrypted": bool,
        "DeleteOnTermination": bool,
        "Iops": int,
        "KmsKeyId": str,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataBlockDeviceMappingsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientGetLaunchTemplateDataResponseLaunchTemplateDataBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientGetLaunchTemplateDataResponseLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataCpuOptionsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataCreditSpecificationTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataCreditSpecificationTypeDef",
    {"CpuCredits": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataElasticGpuSpecificationsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataElasticGpuSpecificationsTypeDef",
    {"Type": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataElasticInferenceAcceleratorsTypeDef",
    {"Type": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataHibernationOptionsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataIamInstanceProfileTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataInstanceMarketOptionsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": ClientGetLaunchTemplateDataResponseLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataLicenseSpecificationsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataMonitoringTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "InterfaceType": str,
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataPlacementTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataTagSpecificationsTagsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataTagSpecificationsTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseLaunchTemplateDataTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseLaunchTemplateDataTypeDef",
    {
        "KernelId": str,
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientGetLaunchTemplateDataResponseLaunchTemplateDataIamInstanceProfileTypeDef,
        "BlockDeviceMappings": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataBlockDeviceMappingsTypeDef
        ],
        "NetworkInterfaces": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataNetworkInterfacesTypeDef
        ],
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KeyName": str,
        "Monitoring": ClientGetLaunchTemplateDataResponseLaunchTemplateDataMonitoringTypeDef,
        "Placement": ClientGetLaunchTemplateDataResponseLaunchTemplateDataPlacementTypeDef,
        "RamDiskId": str,
        "DisableApiTermination": bool,
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "UserData": str,
        "TagSpecifications": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataTagSpecificationsTypeDef
        ],
        "ElasticGpuSpecifications": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataElasticGpuSpecificationsTypeDef
        ],
        "ElasticInferenceAccelerators": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataElasticInferenceAcceleratorsTypeDef
        ],
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "InstanceMarketOptions": ClientGetLaunchTemplateDataResponseLaunchTemplateDataInstanceMarketOptionsTypeDef,
        "CreditSpecification": ClientGetLaunchTemplateDataResponseLaunchTemplateDataCreditSpecificationTypeDef,
        "CpuOptions": ClientGetLaunchTemplateDataResponseLaunchTemplateDataCpuOptionsTypeDef,
        "CapacityReservationSpecification": ClientGetLaunchTemplateDataResponseLaunchTemplateDataCapacityReservationSpecificationTypeDef,
        "LicenseSpecifications": List[
            ClientGetLaunchTemplateDataResponseLaunchTemplateDataLicenseSpecificationsTypeDef
        ],
        "HibernationOptions": ClientGetLaunchTemplateDataResponseLaunchTemplateDataHibernationOptionsTypeDef,
    },
    total=False,
)

ClientGetLaunchTemplateDataResponseTypeDef = TypedDict(
    "ClientGetLaunchTemplateDataResponseTypeDef",
    {"LaunchTemplateData": ClientGetLaunchTemplateDataResponseLaunchTemplateDataTypeDef},
    total=False,
)

ClientGetPasswordDataResponseTypeDef = TypedDict(
    "ClientGetPasswordDataResponseTypeDef",
    {"InstanceId": str, "PasswordData": str, "Timestamp": datetime},
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueRollupTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueRollupTypeDef",
    {"HourlyPrice": str, "RemainingTotalValue": str, "RemainingUpfrontValue": str},
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueSetReservationValueTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueSetReservationValueTypeDef",
    {"HourlyPrice": str, "RemainingTotalValue": str, "RemainingUpfrontValue": str},
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueSetTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueSetTypeDef",
    {
        "ReservationValue": ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueSetReservationValueTypeDef,
        "ReservedInstanceId": str,
    },
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueRollupTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueRollupTypeDef",
    {"HourlyPrice": str, "RemainingTotalValue": str, "RemainingUpfrontValue": str},
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetReservationValueTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetReservationValueTypeDef",
    {"HourlyPrice": str, "RemainingTotalValue": str, "RemainingUpfrontValue": str},
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetTargetConfigurationTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetTargetConfigurationTypeDef",
    {"InstanceCount": int, "OfferingId": str},
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetTypeDef",
    {
        "ReservationValue": ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetReservationValueTypeDef,
        "TargetConfiguration": ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetTargetConfigurationTypeDef,
    },
    total=False,
)

ClientGetReservedInstancesExchangeQuoteResponseTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteResponseTypeDef",
    {
        "CurrencyCode": str,
        "IsValidExchange": bool,
        "OutputReservedInstancesWillExpireAt": datetime,
        "PaymentDue": str,
        "ReservedInstanceValueRollup": ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueRollupTypeDef,
        "ReservedInstanceValueSet": List[
            ClientGetReservedInstancesExchangeQuoteResponseReservedInstanceValueSetTypeDef
        ],
        "TargetConfigurationValueRollup": ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueRollupTypeDef,
        "TargetConfigurationValueSet": List[
            ClientGetReservedInstancesExchangeQuoteResponseTargetConfigurationValueSetTypeDef
        ],
        "ValidationFailureReason": str,
    },
    total=False,
)

ClientGetReservedInstancesExchangeQuoteTargetConfigurationsTypeDef = TypedDict(
    "ClientGetReservedInstancesExchangeQuoteTargetConfigurationsTypeDef",
    {"InstanceCount": int, "OfferingId": str},
    total=False,
)

ClientGetTransitGatewayAttachmentPropagationsFiltersTypeDef = TypedDict(
    "ClientGetTransitGatewayAttachmentPropagationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientGetTransitGatewayAttachmentPropagationsResponseTransitGatewayAttachmentPropagationsTypeDef = TypedDict(
    "ClientGetTransitGatewayAttachmentPropagationsResponseTransitGatewayAttachmentPropagationsTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "State": Literal["enabling", "enabled", "disabling", "disabled"],
    },
    total=False,
)

ClientGetTransitGatewayAttachmentPropagationsResponseTypeDef = TypedDict(
    "ClientGetTransitGatewayAttachmentPropagationsResponseTypeDef",
    {
        "TransitGatewayAttachmentPropagations": List[
            ClientGetTransitGatewayAttachmentPropagationsResponseTransitGatewayAttachmentPropagationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientGetTransitGatewayMulticastDomainAssociationsFiltersTypeDef = TypedDict(
    "ClientGetTransitGatewayMulticastDomainAssociationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientGetTransitGatewayMulticastDomainAssociationsResponseMulticastDomainAssociationsSubnetTypeDef = TypedDict(
    "ClientGetTransitGatewayMulticastDomainAssociationsResponseMulticastDomainAssociationsSubnetTypeDef",
    {
        "SubnetId": str,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientGetTransitGatewayMulticastDomainAssociationsResponseMulticastDomainAssociationsTypeDef = TypedDict(
    "ClientGetTransitGatewayMulticastDomainAssociationsResponseMulticastDomainAssociationsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "Subnet": ClientGetTransitGatewayMulticastDomainAssociationsResponseMulticastDomainAssociationsSubnetTypeDef,
    },
    total=False,
)

ClientGetTransitGatewayMulticastDomainAssociationsResponseTypeDef = TypedDict(
    "ClientGetTransitGatewayMulticastDomainAssociationsResponseTypeDef",
    {
        "MulticastDomainAssociations": List[
            ClientGetTransitGatewayMulticastDomainAssociationsResponseMulticastDomainAssociationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientGetTransitGatewayRouteTableAssociationsFiltersTypeDef = TypedDict(
    "ClientGetTransitGatewayRouteTableAssociationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientGetTransitGatewayRouteTableAssociationsResponseAssociationsTypeDef = TypedDict(
    "ClientGetTransitGatewayRouteTableAssociationsResponseAssociationsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

ClientGetTransitGatewayRouteTableAssociationsResponseTypeDef = TypedDict(
    "ClientGetTransitGatewayRouteTableAssociationsResponseTypeDef",
    {
        "Associations": List[
            ClientGetTransitGatewayRouteTableAssociationsResponseAssociationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientGetTransitGatewayRouteTablePropagationsFiltersTypeDef = TypedDict(
    "ClientGetTransitGatewayRouteTablePropagationsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientGetTransitGatewayRouteTablePropagationsResponseTransitGatewayRouteTablePropagationsTypeDef = TypedDict(
    "ClientGetTransitGatewayRouteTablePropagationsResponseTransitGatewayRouteTablePropagationsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "State": Literal["enabling", "enabled", "disabling", "disabled"],
    },
    total=False,
)

ClientGetTransitGatewayRouteTablePropagationsResponseTypeDef = TypedDict(
    "ClientGetTransitGatewayRouteTablePropagationsResponseTypeDef",
    {
        "TransitGatewayRouteTablePropagations": List[
            ClientGetTransitGatewayRouteTablePropagationsResponseTransitGatewayRouteTablePropagationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientImportClientVpnClientCertificateRevocationListResponseTypeDef = TypedDict(
    "ClientImportClientVpnClientCertificateRevocationListResponseTypeDef",
    {"Return": bool},
    total=False,
)

ClientImportImageClientDataTypeDef = TypedDict(
    "ClientImportImageClientDataTypeDef",
    {"Comment": str, "UploadEnd": datetime, "UploadSize": float, "UploadStart": datetime},
    total=False,
)

ClientImportImageDiskContainersUserBucketTypeDef = TypedDict(
    "ClientImportImageDiskContainersUserBucketTypeDef", {"S3Bucket": str, "S3Key": str}, total=False
)

ClientImportImageDiskContainersTypeDef = TypedDict(
    "ClientImportImageDiskContainersTypeDef",
    {
        "Description": str,
        "DeviceName": str,
        "Format": str,
        "SnapshotId": str,
        "Url": str,
        "UserBucket": ClientImportImageDiskContainersUserBucketTypeDef,
    },
    total=False,
)

ClientImportImageLicenseSpecificationsTypeDef = TypedDict(
    "ClientImportImageLicenseSpecificationsTypeDef", {"LicenseConfigurationArn": str}, total=False
)

ClientImportImageResponseLicenseSpecificationsTypeDef = TypedDict(
    "ClientImportImageResponseLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientImportImageResponseSnapshotDetailsUserBucketTypeDef = TypedDict(
    "ClientImportImageResponseSnapshotDetailsUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

ClientImportImageResponseSnapshotDetailsTypeDef = TypedDict(
    "ClientImportImageResponseSnapshotDetailsTypeDef",
    {
        "Description": str,
        "DeviceName": str,
        "DiskImageSize": float,
        "Format": str,
        "Progress": str,
        "SnapshotId": str,
        "Status": str,
        "StatusMessage": str,
        "Url": str,
        "UserBucket": ClientImportImageResponseSnapshotDetailsUserBucketTypeDef,
    },
    total=False,
)

ClientImportImageResponseTypeDef = TypedDict(
    "ClientImportImageResponseTypeDef",
    {
        "Architecture": str,
        "Description": str,
        "Encrypted": bool,
        "Hypervisor": str,
        "ImageId": str,
        "ImportTaskId": str,
        "KmsKeyId": str,
        "LicenseType": str,
        "Platform": str,
        "Progress": str,
        "SnapshotDetails": List[ClientImportImageResponseSnapshotDetailsTypeDef],
        "Status": str,
        "StatusMessage": str,
        "LicenseSpecifications": List[ClientImportImageResponseLicenseSpecificationsTypeDef],
    },
    total=False,
)

ClientImportInstanceDiskImagesImageTypeDef = TypedDict(
    "ClientImportInstanceDiskImagesImageTypeDef",
    {"Bytes": int, "Format": Literal["VMDK", "RAW", "VHD"], "ImportManifestUrl": str},
    total=False,
)

ClientImportInstanceDiskImagesVolumeTypeDef = TypedDict(
    "ClientImportInstanceDiskImagesVolumeTypeDef", {"Size": int}, total=False
)

ClientImportInstanceDiskImagesTypeDef = TypedDict(
    "ClientImportInstanceDiskImagesTypeDef",
    {
        "Description": str,
        "Image": ClientImportInstanceDiskImagesImageTypeDef,
        "Volume": ClientImportInstanceDiskImagesVolumeTypeDef,
    },
    total=False,
)

ClientImportInstanceLaunchSpecificationPlacementTypeDef = TypedDict(
    "ClientImportInstanceLaunchSpecificationPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientImportInstanceLaunchSpecificationUserDataTypeDef = TypedDict(
    "ClientImportInstanceLaunchSpecificationUserDataTypeDef", {"Data": str}, total=False
)

ClientImportInstanceLaunchSpecificationTypeDef = TypedDict(
    "ClientImportInstanceLaunchSpecificationTypeDef",
    {
        "AdditionalInfo": str,
        "Architecture": Literal["i386", "x86_64", "arm64"],
        "GroupIds": List[str],
        "GroupNames": List[str],
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Monitoring": bool,
        "Placement": ClientImportInstanceLaunchSpecificationPlacementTypeDef,
        "PrivateIpAddress": str,
        "SubnetId": str,
        "UserData": ClientImportInstanceLaunchSpecificationUserDataTypeDef,
    },
    total=False,
)

ClientImportInstanceResponseConversionTaskImportInstanceVolumesImageTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportInstanceVolumesImageTypeDef",
    {
        "Checksum": str,
        "Format": Literal["VMDK", "RAW", "VHD"],
        "ImportManifestUrl": str,
        "Size": int,
    },
    total=False,
)

ClientImportInstanceResponseConversionTaskImportInstanceVolumesVolumeTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportInstanceVolumesVolumeTypeDef",
    {"Id": str, "Size": int},
    total=False,
)

ClientImportInstanceResponseConversionTaskImportInstanceVolumesTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportInstanceVolumesTypeDef",
    {
        "AvailabilityZone": str,
        "BytesConverted": int,
        "Description": str,
        "Image": ClientImportInstanceResponseConversionTaskImportInstanceVolumesImageTypeDef,
        "Status": str,
        "StatusMessage": str,
        "Volume": ClientImportInstanceResponseConversionTaskImportInstanceVolumesVolumeTypeDef,
    },
    total=False,
)

ClientImportInstanceResponseConversionTaskImportInstanceTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportInstanceTypeDef",
    {
        "Description": str,
        "InstanceId": str,
        "Platform": str,
        "Volumes": List[ClientImportInstanceResponseConversionTaskImportInstanceVolumesTypeDef],
    },
    total=False,
)

ClientImportInstanceResponseConversionTaskImportVolumeImageTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportVolumeImageTypeDef",
    {
        "Checksum": str,
        "Format": Literal["VMDK", "RAW", "VHD"],
        "ImportManifestUrl": str,
        "Size": int,
    },
    total=False,
)

ClientImportInstanceResponseConversionTaskImportVolumeVolumeTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportVolumeVolumeTypeDef",
    {"Id": str, "Size": int},
    total=False,
)

ClientImportInstanceResponseConversionTaskImportVolumeTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskImportVolumeTypeDef",
    {
        "AvailabilityZone": str,
        "BytesConverted": int,
        "Description": str,
        "Image": ClientImportInstanceResponseConversionTaskImportVolumeImageTypeDef,
        "Volume": ClientImportInstanceResponseConversionTaskImportVolumeVolumeTypeDef,
    },
    total=False,
)

ClientImportInstanceResponseConversionTaskTagsTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientImportInstanceResponseConversionTaskTypeDef = TypedDict(
    "ClientImportInstanceResponseConversionTaskTypeDef",
    {
        "ConversionTaskId": str,
        "ExpirationTime": str,
        "ImportInstance": ClientImportInstanceResponseConversionTaskImportInstanceTypeDef,
        "ImportVolume": ClientImportInstanceResponseConversionTaskImportVolumeTypeDef,
        "State": Literal["active", "cancelling", "cancelled", "completed"],
        "StatusMessage": str,
        "Tags": List[ClientImportInstanceResponseConversionTaskTagsTypeDef],
    },
    total=False,
)

ClientImportInstanceResponseTypeDef = TypedDict(
    "ClientImportInstanceResponseTypeDef",
    {"ConversionTask": ClientImportInstanceResponseConversionTaskTypeDef},
    total=False,
)

ClientImportKeyPairResponseTypeDef = TypedDict(
    "ClientImportKeyPairResponseTypeDef", {"KeyFingerprint": str, "KeyName": str}, total=False
)

ClientImportSnapshotClientDataTypeDef = TypedDict(
    "ClientImportSnapshotClientDataTypeDef",
    {"Comment": str, "UploadEnd": datetime, "UploadSize": float, "UploadStart": datetime},
    total=False,
)

ClientImportSnapshotDiskContainerUserBucketTypeDef = TypedDict(
    "ClientImportSnapshotDiskContainerUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

ClientImportSnapshotDiskContainerTypeDef = TypedDict(
    "ClientImportSnapshotDiskContainerTypeDef",
    {
        "Description": str,
        "Format": str,
        "Url": str,
        "UserBucket": ClientImportSnapshotDiskContainerUserBucketTypeDef,
    },
    total=False,
)

ClientImportSnapshotResponseSnapshotTaskDetailUserBucketTypeDef = TypedDict(
    "ClientImportSnapshotResponseSnapshotTaskDetailUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

ClientImportSnapshotResponseSnapshotTaskDetailTypeDef = TypedDict(
    "ClientImportSnapshotResponseSnapshotTaskDetailTypeDef",
    {
        "Description": str,
        "DiskImageSize": float,
        "Encrypted": bool,
        "Format": str,
        "KmsKeyId": str,
        "Progress": str,
        "SnapshotId": str,
        "Status": str,
        "StatusMessage": str,
        "Url": str,
        "UserBucket": ClientImportSnapshotResponseSnapshotTaskDetailUserBucketTypeDef,
    },
    total=False,
)

ClientImportSnapshotResponseTypeDef = TypedDict(
    "ClientImportSnapshotResponseTypeDef",
    {
        "Description": str,
        "ImportTaskId": str,
        "SnapshotTaskDetail": ClientImportSnapshotResponseSnapshotTaskDetailTypeDef,
    },
    total=False,
)

_RequiredClientImportVolumeImageTypeDef = TypedDict(
    "_RequiredClientImportVolumeImageTypeDef", {"Bytes": int}
)
_OptionalClientImportVolumeImageTypeDef = TypedDict(
    "_OptionalClientImportVolumeImageTypeDef",
    {"Format": Literal["VMDK", "RAW", "VHD"], "ImportManifestUrl": str},
    total=False,
)


class ClientImportVolumeImageTypeDef(
    _RequiredClientImportVolumeImageTypeDef, _OptionalClientImportVolumeImageTypeDef
):
    pass


ClientImportVolumeResponseConversionTaskImportInstanceVolumesImageTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportInstanceVolumesImageTypeDef",
    {
        "Checksum": str,
        "Format": Literal["VMDK", "RAW", "VHD"],
        "ImportManifestUrl": str,
        "Size": int,
    },
    total=False,
)

ClientImportVolumeResponseConversionTaskImportInstanceVolumesVolumeTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportInstanceVolumesVolumeTypeDef",
    {"Id": str, "Size": int},
    total=False,
)

ClientImportVolumeResponseConversionTaskImportInstanceVolumesTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportInstanceVolumesTypeDef",
    {
        "AvailabilityZone": str,
        "BytesConverted": int,
        "Description": str,
        "Image": ClientImportVolumeResponseConversionTaskImportInstanceVolumesImageTypeDef,
        "Status": str,
        "StatusMessage": str,
        "Volume": ClientImportVolumeResponseConversionTaskImportInstanceVolumesVolumeTypeDef,
    },
    total=False,
)

ClientImportVolumeResponseConversionTaskImportInstanceTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportInstanceTypeDef",
    {
        "Description": str,
        "InstanceId": str,
        "Platform": str,
        "Volumes": List[ClientImportVolumeResponseConversionTaskImportInstanceVolumesTypeDef],
    },
    total=False,
)

ClientImportVolumeResponseConversionTaskImportVolumeImageTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportVolumeImageTypeDef",
    {
        "Checksum": str,
        "Format": Literal["VMDK", "RAW", "VHD"],
        "ImportManifestUrl": str,
        "Size": int,
    },
    total=False,
)

ClientImportVolumeResponseConversionTaskImportVolumeVolumeTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportVolumeVolumeTypeDef",
    {"Id": str, "Size": int},
    total=False,
)

ClientImportVolumeResponseConversionTaskImportVolumeTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskImportVolumeTypeDef",
    {
        "AvailabilityZone": str,
        "BytesConverted": int,
        "Description": str,
        "Image": ClientImportVolumeResponseConversionTaskImportVolumeImageTypeDef,
        "Volume": ClientImportVolumeResponseConversionTaskImportVolumeVolumeTypeDef,
    },
    total=False,
)

ClientImportVolumeResponseConversionTaskTagsTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientImportVolumeResponseConversionTaskTypeDef = TypedDict(
    "ClientImportVolumeResponseConversionTaskTypeDef",
    {
        "ConversionTaskId": str,
        "ExpirationTime": str,
        "ImportInstance": ClientImportVolumeResponseConversionTaskImportInstanceTypeDef,
        "ImportVolume": ClientImportVolumeResponseConversionTaskImportVolumeTypeDef,
        "State": Literal["active", "cancelling", "cancelled", "completed"],
        "StatusMessage": str,
        "Tags": List[ClientImportVolumeResponseConversionTaskTagsTypeDef],
    },
    total=False,
)

ClientImportVolumeResponseTypeDef = TypedDict(
    "ClientImportVolumeResponseTypeDef",
    {"ConversionTask": ClientImportVolumeResponseConversionTaskTypeDef},
    total=False,
)

ClientImportVolumeVolumeTypeDef = TypedDict("ClientImportVolumeVolumeTypeDef", {"Size": int})

ClientModifyCapacityReservationResponseTypeDef = TypedDict(
    "ClientModifyCapacityReservationResponseTypeDef", {"Return": bool}, total=False
)

ClientModifyClientVpnEndpointConnectionLogOptionsTypeDef = TypedDict(
    "ClientModifyClientVpnEndpointConnectionLogOptionsTypeDef",
    {"Enabled": bool, "CloudwatchLogGroup": str, "CloudwatchLogStream": str},
    total=False,
)

ClientModifyClientVpnEndpointDnsServersTypeDef = TypedDict(
    "ClientModifyClientVpnEndpointDnsServersTypeDef",
    {"CustomDnsServers": List[str], "Enabled": bool},
    total=False,
)

ClientModifyClientVpnEndpointResponseTypeDef = TypedDict(
    "ClientModifyClientVpnEndpointResponseTypeDef", {"Return": bool}, total=False
)

ClientModifyDefaultCreditSpecificationResponseInstanceFamilyCreditSpecificationTypeDef = TypedDict(
    "ClientModifyDefaultCreditSpecificationResponseInstanceFamilyCreditSpecificationTypeDef",
    {"InstanceFamily": Literal["t2", "t3", "t3a"], "CpuCredits": str},
    total=False,
)

ClientModifyDefaultCreditSpecificationResponseTypeDef = TypedDict(
    "ClientModifyDefaultCreditSpecificationResponseTypeDef",
    {
        "InstanceFamilyCreditSpecification": ClientModifyDefaultCreditSpecificationResponseInstanceFamilyCreditSpecificationTypeDef
    },
    total=False,
)

ClientModifyEbsDefaultKmsKeyIdResponseTypeDef = TypedDict(
    "ClientModifyEbsDefaultKmsKeyIdResponseTypeDef", {"KmsKeyId": str}, total=False
)

ClientModifyFleetResponseTypeDef = TypedDict(
    "ClientModifyFleetResponseTypeDef", {"Return": bool}, total=False
)

_RequiredClientModifyFleetTargetCapacitySpecificationTypeDef = TypedDict(
    "_RequiredClientModifyFleetTargetCapacitySpecificationTypeDef", {"TotalTargetCapacity": int}
)
_OptionalClientModifyFleetTargetCapacitySpecificationTypeDef = TypedDict(
    "_OptionalClientModifyFleetTargetCapacitySpecificationTypeDef",
    {
        "OnDemandTargetCapacity": int,
        "SpotTargetCapacity": int,
        "DefaultTargetCapacityType": Literal["spot", "on-demand"],
    },
    total=False,
)


class ClientModifyFleetTargetCapacitySpecificationTypeDef(
    _RequiredClientModifyFleetTargetCapacitySpecificationTypeDef,
    _OptionalClientModifyFleetTargetCapacitySpecificationTypeDef,
):
    pass


ClientModifyFpgaImageAttributeLoadPermissionAddTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeLoadPermissionAddTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientModifyFpgaImageAttributeLoadPermissionRemoveTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeLoadPermissionRemoveTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientModifyFpgaImageAttributeLoadPermissionTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeLoadPermissionTypeDef",
    {
        "Add": List[ClientModifyFpgaImageAttributeLoadPermissionAddTypeDef],
        "Remove": List[ClientModifyFpgaImageAttributeLoadPermissionRemoveTypeDef],
    },
    total=False,
)

ClientModifyFpgaImageAttributeResponseFpgaImageAttributeLoadPermissionsTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeResponseFpgaImageAttributeLoadPermissionsTypeDef",
    {"UserId": str, "Group": str},
    total=False,
)

ClientModifyFpgaImageAttributeResponseFpgaImageAttributeProductCodesTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeResponseFpgaImageAttributeProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientModifyFpgaImageAttributeResponseFpgaImageAttributeTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeResponseFpgaImageAttributeTypeDef",
    {
        "FpgaImageId": str,
        "Name": str,
        "Description": str,
        "LoadPermissions": List[
            ClientModifyFpgaImageAttributeResponseFpgaImageAttributeLoadPermissionsTypeDef
        ],
        "ProductCodes": List[
            ClientModifyFpgaImageAttributeResponseFpgaImageAttributeProductCodesTypeDef
        ],
    },
    total=False,
)

ClientModifyFpgaImageAttributeResponseTypeDef = TypedDict(
    "ClientModifyFpgaImageAttributeResponseTypeDef",
    {"FpgaImageAttribute": ClientModifyFpgaImageAttributeResponseFpgaImageAttributeTypeDef},
    total=False,
)

ClientModifyHostsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientModifyHostsResponseUnsuccessfulErrorTypeDef", {"Code": str, "Message": str}, total=False
)

ClientModifyHostsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientModifyHostsResponseUnsuccessfulTypeDef",
    {"Error": ClientModifyHostsResponseUnsuccessfulErrorTypeDef, "ResourceId": str},
    total=False,
)

ClientModifyHostsResponseTypeDef = TypedDict(
    "ClientModifyHostsResponseTypeDef",
    {"Successful": List[str], "Unsuccessful": List[ClientModifyHostsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientModifyImageAttributeDescriptionTypeDef = TypedDict(
    "ClientModifyImageAttributeDescriptionTypeDef", {"Value": str}, total=False
)

ClientModifyImageAttributeLaunchPermissionAddTypeDef = TypedDict(
    "ClientModifyImageAttributeLaunchPermissionAddTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientModifyImageAttributeLaunchPermissionRemoveTypeDef = TypedDict(
    "ClientModifyImageAttributeLaunchPermissionRemoveTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientModifyImageAttributeLaunchPermissionTypeDef = TypedDict(
    "ClientModifyImageAttributeLaunchPermissionTypeDef",
    {
        "Add": List[ClientModifyImageAttributeLaunchPermissionAddTypeDef],
        "Remove": List[ClientModifyImageAttributeLaunchPermissionRemoveTypeDef],
    },
    total=False,
)

ClientModifyInstanceAttributeBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientModifyInstanceAttributeBlockDeviceMappingsEbsTypeDef",
    {"DeleteOnTermination": bool, "VolumeId": str},
    total=False,
)

ClientModifyInstanceAttributeBlockDeviceMappingsTypeDef = TypedDict(
    "ClientModifyInstanceAttributeBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "Ebs": ClientModifyInstanceAttributeBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
        "VirtualName": str,
    },
    total=False,
)

ClientModifyInstanceAttributeDisableApiTerminationTypeDef = TypedDict(
    "ClientModifyInstanceAttributeDisableApiTerminationTypeDef", {"Value": bool}, total=False
)

ClientModifyInstanceAttributeEbsOptimizedTypeDef = TypedDict(
    "ClientModifyInstanceAttributeEbsOptimizedTypeDef", {"Value": bool}, total=False
)

ClientModifyInstanceAttributeEnaSupportTypeDef = TypedDict(
    "ClientModifyInstanceAttributeEnaSupportTypeDef", {"Value": bool}, total=False
)

ClientModifyInstanceAttributeInstanceInitiatedShutdownBehaviorTypeDef = TypedDict(
    "ClientModifyInstanceAttributeInstanceInitiatedShutdownBehaviorTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyInstanceAttributeInstanceTypeTypeDef = TypedDict(
    "ClientModifyInstanceAttributeInstanceTypeTypeDef", {"Value": str}, total=False
)

ClientModifyInstanceAttributeKernelTypeDef = TypedDict(
    "ClientModifyInstanceAttributeKernelTypeDef", {"Value": str}, total=False
)

ClientModifyInstanceAttributeRamdiskTypeDef = TypedDict(
    "ClientModifyInstanceAttributeRamdiskTypeDef", {"Value": str}, total=False
)

ClientModifyInstanceAttributeSourceDestCheckTypeDef = TypedDict(
    "ClientModifyInstanceAttributeSourceDestCheckTypeDef", {"Value": bool}, total=False
)

ClientModifyInstanceAttributeSriovNetSupportTypeDef = TypedDict(
    "ClientModifyInstanceAttributeSriovNetSupportTypeDef", {"Value": str}, total=False
)

ClientModifyInstanceAttributeUserDataTypeDef = TypedDict(
    "ClientModifyInstanceAttributeUserDataTypeDef", {"Value": bytes}, total=False
)

ClientModifyInstanceCapacityReservationAttributesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientModifyInstanceCapacityReservationAttributesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientModifyInstanceCapacityReservationAttributesCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientModifyInstanceCapacityReservationAttributesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientModifyInstanceCapacityReservationAttributesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientModifyInstanceCapacityReservationAttributesResponseTypeDef = TypedDict(
    "ClientModifyInstanceCapacityReservationAttributesResponseTypeDef",
    {"Return": bool},
    total=False,
)

ClientModifyInstanceCreditSpecificationInstanceCreditSpecificationsTypeDef = TypedDict(
    "ClientModifyInstanceCreditSpecificationInstanceCreditSpecificationsTypeDef",
    {"InstanceId": str, "CpuCredits": str},
    total=False,
)

ClientModifyInstanceCreditSpecificationResponseSuccessfulInstanceCreditSpecificationsTypeDef = TypedDict(
    "ClientModifyInstanceCreditSpecificationResponseSuccessfulInstanceCreditSpecificationsTypeDef",
    {"InstanceId": str},
    total=False,
)

ClientModifyInstanceCreditSpecificationResponseUnsuccessfulInstanceCreditSpecificationsErrorTypeDef = TypedDict(
    "ClientModifyInstanceCreditSpecificationResponseUnsuccessfulInstanceCreditSpecificationsErrorTypeDef",
    {
        "Code": Literal[
            "InvalidInstanceID.Malformed",
            "InvalidInstanceID.NotFound",
            "IncorrectInstanceState",
            "InstanceCreditSpecification.NotSupported",
        ],
        "Message": str,
    },
    total=False,
)

ClientModifyInstanceCreditSpecificationResponseUnsuccessfulInstanceCreditSpecificationsTypeDef = TypedDict(
    "ClientModifyInstanceCreditSpecificationResponseUnsuccessfulInstanceCreditSpecificationsTypeDef",
    {
        "InstanceId": str,
        "Error": ClientModifyInstanceCreditSpecificationResponseUnsuccessfulInstanceCreditSpecificationsErrorTypeDef,
    },
    total=False,
)

ClientModifyInstanceCreditSpecificationResponseTypeDef = TypedDict(
    "ClientModifyInstanceCreditSpecificationResponseTypeDef",
    {
        "SuccessfulInstanceCreditSpecifications": List[
            ClientModifyInstanceCreditSpecificationResponseSuccessfulInstanceCreditSpecificationsTypeDef
        ],
        "UnsuccessfulInstanceCreditSpecifications": List[
            ClientModifyInstanceCreditSpecificationResponseUnsuccessfulInstanceCreditSpecificationsTypeDef
        ],
    },
    total=False,
)

ClientModifyInstanceEventStartTimeResponseEventTypeDef = TypedDict(
    "ClientModifyInstanceEventStartTimeResponseEventTypeDef",
    {
        "InstanceEventId": str,
        "Code": Literal[
            "instance-reboot",
            "system-reboot",
            "system-maintenance",
            "instance-retirement",
            "instance-stop",
        ],
        "Description": str,
        "NotAfter": datetime,
        "NotBefore": datetime,
        "NotBeforeDeadline": datetime,
    },
    total=False,
)

ClientModifyInstanceEventStartTimeResponseTypeDef = TypedDict(
    "ClientModifyInstanceEventStartTimeResponseTypeDef",
    {"Event": ClientModifyInstanceEventStartTimeResponseEventTypeDef},
    total=False,
)

ClientModifyInstanceMetadataOptionsResponseInstanceMetadataOptionsTypeDef = TypedDict(
    "ClientModifyInstanceMetadataOptionsResponseInstanceMetadataOptionsTypeDef",
    {
        "State": Literal["pending", "applied"],
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

ClientModifyInstanceMetadataOptionsResponseTypeDef = TypedDict(
    "ClientModifyInstanceMetadataOptionsResponseTypeDef",
    {
        "InstanceId": str,
        "InstanceMetadataOptions": ClientModifyInstanceMetadataOptionsResponseInstanceMetadataOptionsTypeDef,
    },
    total=False,
)

ClientModifyInstancePlacementResponseTypeDef = TypedDict(
    "ClientModifyInstancePlacementResponseTypeDef", {"Return": bool}, total=False
)

ClientModifyLaunchTemplateResponseLaunchTemplateTagsTypeDef = TypedDict(
    "ClientModifyLaunchTemplateResponseLaunchTemplateTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyLaunchTemplateResponseLaunchTemplateTypeDef = TypedDict(
    "ClientModifyLaunchTemplateResponseLaunchTemplateTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersionNumber": int,
        "LatestVersionNumber": int,
        "Tags": List[ClientModifyLaunchTemplateResponseLaunchTemplateTagsTypeDef],
    },
    total=False,
)

ClientModifyLaunchTemplateResponseTypeDef = TypedDict(
    "ClientModifyLaunchTemplateResponseTypeDef",
    {"LaunchTemplate": ClientModifyLaunchTemplateResponseLaunchTemplateTypeDef},
    total=False,
)

ClientModifyNetworkInterfaceAttributeAttachmentTypeDef = TypedDict(
    "ClientModifyNetworkInterfaceAttributeAttachmentTypeDef",
    {"AttachmentId": str, "DeleteOnTermination": bool},
    total=False,
)

ClientModifyNetworkInterfaceAttributeDescriptionTypeDef = TypedDict(
    "ClientModifyNetworkInterfaceAttributeDescriptionTypeDef", {"Value": str}, total=False
)

ClientModifyNetworkInterfaceAttributeSourceDestCheckTypeDef = TypedDict(
    "ClientModifyNetworkInterfaceAttributeSourceDestCheckTypeDef", {"Value": bool}, total=False
)

ClientModifyReservedInstancesResponseTypeDef = TypedDict(
    "ClientModifyReservedInstancesResponseTypeDef",
    {"ReservedInstancesModificationId": str},
    total=False,
)

ClientModifyReservedInstancesTargetConfigurationsTypeDef = TypedDict(
    "ClientModifyReservedInstancesTargetConfigurationsTypeDef",
    {
        "AvailabilityZone": str,
        "InstanceCount": int,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Platform": str,
        "Scope": Literal["Availability Zone", "Region"],
    },
    total=False,
)

ClientModifySnapshotAttributeCreateVolumePermissionAddTypeDef = TypedDict(
    "ClientModifySnapshotAttributeCreateVolumePermissionAddTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientModifySnapshotAttributeCreateVolumePermissionRemoveTypeDef = TypedDict(
    "ClientModifySnapshotAttributeCreateVolumePermissionRemoveTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ClientModifySnapshotAttributeCreateVolumePermissionTypeDef = TypedDict(
    "ClientModifySnapshotAttributeCreateVolumePermissionTypeDef",
    {
        "Add": List[ClientModifySnapshotAttributeCreateVolumePermissionAddTypeDef],
        "Remove": List[ClientModifySnapshotAttributeCreateVolumePermissionRemoveTypeDef],
    },
    total=False,
)

ClientModifySpotFleetRequestResponseTypeDef = TypedDict(
    "ClientModifySpotFleetRequestResponseTypeDef", {"Return": bool}, total=False
)

ClientModifySubnetAttributeAssignIpv6AddressOnCreationTypeDef = TypedDict(
    "ClientModifySubnetAttributeAssignIpv6AddressOnCreationTypeDef", {"Value": bool}, total=False
)

ClientModifySubnetAttributeMapPublicIpOnLaunchTypeDef = TypedDict(
    "ClientModifySubnetAttributeMapPublicIpOnLaunchTypeDef", {"Value": bool}, total=False
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterTagsTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterTypeDef",
    {
        "TrafficMirrorFilterId": str,
        "IngressFilterRules": List[
            ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterIngressFilterRulesTypeDef
        ],
        "EgressFilterRules": List[
            ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterEgressFilterRulesTypeDef
        ],
        "NetworkServices": List[str],
        "Description": str,
        "Tags": List[
            ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterTagsTypeDef
        ],
    },
    total=False,
)

ClientModifyTrafficMirrorFilterNetworkServicesResponseTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterNetworkServicesResponseTypeDef",
    {
        "TrafficMirrorFilter": ClientModifyTrafficMirrorFilterNetworkServicesResponseTrafficMirrorFilterTypeDef
    },
    total=False,
)

ClientModifyTrafficMirrorFilterRuleDestinationPortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterRuleDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleDestinationPortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleSourcePortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleDestinationPortRangeTypeDef,
        "SourcePortRange": ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

ClientModifyTrafficMirrorFilterRuleResponseTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterRuleResponseTypeDef",
    {
        "TrafficMirrorFilterRule": ClientModifyTrafficMirrorFilterRuleResponseTrafficMirrorFilterRuleTypeDef
    },
    total=False,
)

ClientModifyTrafficMirrorFilterRuleSourcePortRangeTypeDef = TypedDict(
    "ClientModifyTrafficMirrorFilterRuleSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

ClientModifyTrafficMirrorSessionResponseTrafficMirrorSessionTagsTypeDef = TypedDict(
    "ClientModifyTrafficMirrorSessionResponseTrafficMirrorSessionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyTrafficMirrorSessionResponseTrafficMirrorSessionTypeDef = TypedDict(
    "ClientModifyTrafficMirrorSessionResponseTrafficMirrorSessionTypeDef",
    {
        "TrafficMirrorSessionId": str,
        "TrafficMirrorTargetId": str,
        "TrafficMirrorFilterId": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PacketLength": int,
        "SessionNumber": int,
        "VirtualNetworkId": int,
        "Description": str,
        "Tags": List[ClientModifyTrafficMirrorSessionResponseTrafficMirrorSessionTagsTypeDef],
    },
    total=False,
)

ClientModifyTrafficMirrorSessionResponseTypeDef = TypedDict(
    "ClientModifyTrafficMirrorSessionResponseTypeDef",
    {"TrafficMirrorSession": ClientModifyTrafficMirrorSessionResponseTrafficMirrorSessionTypeDef},
    total=False,
)

ClientModifyTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientModifyTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef = TypedDict(
    "ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef = TypedDict(
    "ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef,
        "Tags": List[
            ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientModifyTransitGatewayVpcAttachmentResponseTypeDef = TypedDict(
    "ClientModifyTransitGatewayVpcAttachmentResponseTypeDef",
    {
        "TransitGatewayVpcAttachment": ClientModifyTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef
    },
    total=False,
)

ClientModifyVolumeAttributeAutoEnableIOTypeDef = TypedDict(
    "ClientModifyVolumeAttributeAutoEnableIOTypeDef", {"Value": bool}, total=False
)

ClientModifyVolumeResponseVolumeModificationTypeDef = TypedDict(
    "ClientModifyVolumeResponseVolumeModificationTypeDef",
    {
        "VolumeId": str,
        "ModificationState": Literal["modifying", "optimizing", "completed", "failed"],
        "StatusMessage": str,
        "TargetSize": int,
        "TargetIops": int,
        "TargetVolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "OriginalSize": int,
        "OriginalIops": int,
        "OriginalVolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Progress": int,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)

ClientModifyVolumeResponseTypeDef = TypedDict(
    "ClientModifyVolumeResponseTypeDef",
    {"VolumeModification": ClientModifyVolumeResponseVolumeModificationTypeDef},
    total=False,
)

ClientModifyVpcAttributeEnableDnsHostnamesTypeDef = TypedDict(
    "ClientModifyVpcAttributeEnableDnsHostnamesTypeDef", {"Value": bool}, total=False
)

ClientModifyVpcAttributeEnableDnsSupportTypeDef = TypedDict(
    "ClientModifyVpcAttributeEnableDnsSupportTypeDef", {"Value": bool}, total=False
)

ClientModifyVpcEndpointConnectionNotificationResponseTypeDef = TypedDict(
    "ClientModifyVpcEndpointConnectionNotificationResponseTypeDef",
    {"ReturnValue": bool},
    total=False,
)

ClientModifyVpcEndpointResponseTypeDef = TypedDict(
    "ClientModifyVpcEndpointResponseTypeDef", {"Return": bool}, total=False
)

ClientModifyVpcEndpointServiceConfigurationResponseTypeDef = TypedDict(
    "ClientModifyVpcEndpointServiceConfigurationResponseTypeDef", {"Return": bool}, total=False
)

ClientModifyVpcEndpointServicePermissionsResponseTypeDef = TypedDict(
    "ClientModifyVpcEndpointServicePermissionsResponseTypeDef", {"ReturnValue": bool}, total=False
)

ClientModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientModifyVpcPeeringConnectionOptionsResponseAccepterPeeringConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpcPeeringConnectionOptionsResponseAccepterPeeringConnectionOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientModifyVpcPeeringConnectionOptionsResponseRequesterPeeringConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpcPeeringConnectionOptionsResponseRequesterPeeringConnectionOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

ClientModifyVpcPeeringConnectionOptionsResponseTypeDef = TypedDict(
    "ClientModifyVpcPeeringConnectionOptionsResponseTypeDef",
    {
        "AccepterPeeringConnectionOptions": ClientModifyVpcPeeringConnectionOptionsResponseAccepterPeeringConnectionOptionsTypeDef,
        "RequesterPeeringConnectionOptions": ClientModifyVpcPeeringConnectionOptionsResponseRequesterPeeringConnectionOptionsTypeDef,
    },
    total=False,
)

ClientModifyVpcTenancyResponseTypeDef = TypedDict(
    "ClientModifyVpcTenancyResponseTypeDef", {"ReturnValue": bool}, total=False
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsTypeDef",
    {
        "OutsideIpAddress": str,
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DpdTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IkeVersions": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionOptionsTypeDef",
    {
        "EnableAcceleration": bool,
        "StaticRoutesOnly": bool,
        "TunnelOptions": List[
            ClientModifyVpnConnectionResponseVpnConnectionOptionsTunnelOptionsTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionRoutesTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "Source": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
    },
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionTagsTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionVgwTelemetryTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionVgwTelemetryTypeDef",
    {
        "AcceptedRouteCount": int,
        "LastStatusChange": datetime,
        "OutsideIpAddress": str,
        "Status": Literal["UP", "DOWN"],
        "StatusMessage": str,
        "CertificateArn": str,
    },
    total=False,
)

ClientModifyVpnConnectionResponseVpnConnectionTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseVpnConnectionTypeDef",
    {
        "CustomerGatewayConfiguration": str,
        "CustomerGatewayId": str,
        "Category": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpnConnectionId": str,
        "VpnGatewayId": str,
        "TransitGatewayId": str,
        "Options": ClientModifyVpnConnectionResponseVpnConnectionOptionsTypeDef,
        "Routes": List[ClientModifyVpnConnectionResponseVpnConnectionRoutesTypeDef],
        "Tags": List[ClientModifyVpnConnectionResponseVpnConnectionTagsTypeDef],
        "VgwTelemetry": List[ClientModifyVpnConnectionResponseVpnConnectionVgwTelemetryTypeDef],
    },
    total=False,
)

ClientModifyVpnConnectionResponseTypeDef = TypedDict(
    "ClientModifyVpnConnectionResponseTypeDef",
    {"VpnConnection": ClientModifyVpnConnectionResponseVpnConnectionTypeDef},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsTypeDef",
    {
        "OutsideIpAddress": str,
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DpdTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IkeVersions": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTypeDef",
    {
        "EnableAcceleration": bool,
        "StaticRoutesOnly": bool,
        "TunnelOptions": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTunnelOptionsTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionRoutesTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "Source": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
    },
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionTagsTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionVgwTelemetryTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionVgwTelemetryTypeDef",
    {
        "AcceptedRouteCount": int,
        "LastStatusChange": datetime,
        "OutsideIpAddress": str,
        "Status": Literal["UP", "DOWN"],
        "StatusMessage": str,
        "CertificateArn": str,
    },
    total=False,
)

ClientModifyVpnTunnelCertificateResponseVpnConnectionTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseVpnConnectionTypeDef",
    {
        "CustomerGatewayConfiguration": str,
        "CustomerGatewayId": str,
        "Category": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpnConnectionId": str,
        "VpnGatewayId": str,
        "TransitGatewayId": str,
        "Options": ClientModifyVpnTunnelCertificateResponseVpnConnectionOptionsTypeDef,
        "Routes": List[ClientModifyVpnTunnelCertificateResponseVpnConnectionRoutesTypeDef],
        "Tags": List[ClientModifyVpnTunnelCertificateResponseVpnConnectionTagsTypeDef],
        "VgwTelemetry": List[
            ClientModifyVpnTunnelCertificateResponseVpnConnectionVgwTelemetryTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnTunnelCertificateResponseTypeDef = TypedDict(
    "ClientModifyVpnTunnelCertificateResponseTypeDef",
    {"VpnConnection": ClientModifyVpnTunnelCertificateResponseVpnConnectionTypeDef},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsTypeDef",
    {
        "OutsideIpAddress": str,
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DpdTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IkeVersions": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsIkeVersionsTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTypeDef",
    {
        "EnableAcceleration": bool,
        "StaticRoutesOnly": bool,
        "TunnelOptions": List[
            ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTunnelOptionsTypeDef
        ],
    },
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionRoutesTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "Source": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
    },
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionTagsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionVgwTelemetryTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionVgwTelemetryTypeDef",
    {
        "AcceptedRouteCount": int,
        "LastStatusChange": datetime,
        "OutsideIpAddress": str,
        "Status": Literal["UP", "DOWN"],
        "StatusMessage": str,
        "CertificateArn": str,
    },
    total=False,
)

ClientModifyVpnTunnelOptionsResponseVpnConnectionTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseVpnConnectionTypeDef",
    {
        "CustomerGatewayConfiguration": str,
        "CustomerGatewayId": str,
        "Category": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "Type": str,
        "VpnConnectionId": str,
        "VpnGatewayId": str,
        "TransitGatewayId": str,
        "Options": ClientModifyVpnTunnelOptionsResponseVpnConnectionOptionsTypeDef,
        "Routes": List[ClientModifyVpnTunnelOptionsResponseVpnConnectionRoutesTypeDef],
        "Tags": List[ClientModifyVpnTunnelOptionsResponseVpnConnectionTagsTypeDef],
        "VgwTelemetry": List[ClientModifyVpnTunnelOptionsResponseVpnConnectionVgwTelemetryTypeDef],
    },
    total=False,
)

ClientModifyVpnTunnelOptionsResponseTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsResponseTypeDef",
    {"VpnConnection": ClientModifyVpnTunnelOptionsResponseVpnConnectionTypeDef},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsIKEVersionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsIKEVersionsTypeDef", {"Value": str}, total=False
)

ClientModifyVpnTunnelOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef",
    {"Value": int},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef",
    {"Value": str},
    total=False,
)

ClientModifyVpnTunnelOptionsTunnelOptionsTypeDef = TypedDict(
    "ClientModifyVpnTunnelOptionsTunnelOptionsTypeDef",
    {
        "TunnelInsideCidr": str,
        "PreSharedKey": str,
        "Phase1LifetimeSeconds": int,
        "Phase2LifetimeSeconds": int,
        "RekeyMarginTimeSeconds": int,
        "RekeyFuzzPercentage": int,
        "ReplayWindowSize": int,
        "DPDTimeoutSeconds": int,
        "Phase1EncryptionAlgorithms": List[
            ClientModifyVpnTunnelOptionsTunnelOptionsPhase1EncryptionAlgorithmsTypeDef
        ],
        "Phase2EncryptionAlgorithms": List[
            ClientModifyVpnTunnelOptionsTunnelOptionsPhase2EncryptionAlgorithmsTypeDef
        ],
        "Phase1IntegrityAlgorithms": List[
            ClientModifyVpnTunnelOptionsTunnelOptionsPhase1IntegrityAlgorithmsTypeDef
        ],
        "Phase2IntegrityAlgorithms": List[
            ClientModifyVpnTunnelOptionsTunnelOptionsPhase2IntegrityAlgorithmsTypeDef
        ],
        "Phase1DHGroupNumbers": List[
            ClientModifyVpnTunnelOptionsTunnelOptionsPhase1DHGroupNumbersTypeDef
        ],
        "Phase2DHGroupNumbers": List[
            ClientModifyVpnTunnelOptionsTunnelOptionsPhase2DHGroupNumbersTypeDef
        ],
        "IKEVersions": List[ClientModifyVpnTunnelOptionsTunnelOptionsIKEVersionsTypeDef],
    },
    total=False,
)

ClientMonitorInstancesResponseInstanceMonitoringsMonitoringTypeDef = TypedDict(
    "ClientMonitorInstancesResponseInstanceMonitoringsMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

ClientMonitorInstancesResponseInstanceMonitoringsTypeDef = TypedDict(
    "ClientMonitorInstancesResponseInstanceMonitoringsTypeDef",
    {
        "InstanceId": str,
        "Monitoring": ClientMonitorInstancesResponseInstanceMonitoringsMonitoringTypeDef,
    },
    total=False,
)

ClientMonitorInstancesResponseTypeDef = TypedDict(
    "ClientMonitorInstancesResponseTypeDef",
    {"InstanceMonitorings": List[ClientMonitorInstancesResponseInstanceMonitoringsTypeDef]},
    total=False,
)

ClientMoveAddressToVpcResponseTypeDef = TypedDict(
    "ClientMoveAddressToVpcResponseTypeDef",
    {"AllocationId": str, "Status": Literal["MoveInProgress", "InVpc", "InClassic"]},
    total=False,
)

_RequiredClientProvisionByoipCidrCidrAuthorizationContextTypeDef = TypedDict(
    "_RequiredClientProvisionByoipCidrCidrAuthorizationContextTypeDef", {"Message": str}
)
_OptionalClientProvisionByoipCidrCidrAuthorizationContextTypeDef = TypedDict(
    "_OptionalClientProvisionByoipCidrCidrAuthorizationContextTypeDef",
    {"Signature": str},
    total=False,
)


class ClientProvisionByoipCidrCidrAuthorizationContextTypeDef(
    _RequiredClientProvisionByoipCidrCidrAuthorizationContextTypeDef,
    _OptionalClientProvisionByoipCidrCidrAuthorizationContextTypeDef,
):
    pass


ClientProvisionByoipCidrResponseByoipCidrTypeDef = TypedDict(
    "ClientProvisionByoipCidrResponseByoipCidrTypeDef",
    {
        "Cidr": str,
        "Description": str,
        "StatusMessage": str,
        "State": Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
        ],
    },
    total=False,
)

ClientProvisionByoipCidrResponseTypeDef = TypedDict(
    "ClientProvisionByoipCidrResponseTypeDef",
    {"ByoipCidr": ClientProvisionByoipCidrResponseByoipCidrTypeDef},
    total=False,
)

ClientPurchaseHostReservationResponsePurchaseTypeDef = TypedDict(
    "ClientPurchaseHostReservationResponsePurchaseTypeDef",
    {
        "CurrencyCode": str,
        "Duration": int,
        "HostIdSet": List[str],
        "HostReservationId": str,
        "HourlyPrice": str,
        "InstanceFamily": str,
        "PaymentOption": Literal["AllUpfront", "PartialUpfront", "NoUpfront"],
        "UpfrontPrice": str,
    },
    total=False,
)

ClientPurchaseHostReservationResponseTypeDef = TypedDict(
    "ClientPurchaseHostReservationResponseTypeDef",
    {
        "ClientToken": str,
        "CurrencyCode": str,
        "Purchase": List[ClientPurchaseHostReservationResponsePurchaseTypeDef],
        "TotalHourlyPrice": str,
        "TotalUpfrontPrice": str,
    },
    total=False,
)

ClientPurchaseReservedInstancesOfferingLimitPriceTypeDef = TypedDict(
    "ClientPurchaseReservedInstancesOfferingLimitPriceTypeDef",
    {"Amount": float, "CurrencyCode": str},
    total=False,
)

ClientPurchaseReservedInstancesOfferingResponseTypeDef = TypedDict(
    "ClientPurchaseReservedInstancesOfferingResponseTypeDef",
    {"ReservedInstancesId": str},
    total=False,
)

_RequiredClientPurchaseScheduledInstancesPurchaseRequestsTypeDef = TypedDict(
    "_RequiredClientPurchaseScheduledInstancesPurchaseRequestsTypeDef", {"InstanceCount": int}
)
_OptionalClientPurchaseScheduledInstancesPurchaseRequestsTypeDef = TypedDict(
    "_OptionalClientPurchaseScheduledInstancesPurchaseRequestsTypeDef",
    {"PurchaseToken": str},
    total=False,
)


class ClientPurchaseScheduledInstancesPurchaseRequestsTypeDef(
    _RequiredClientPurchaseScheduledInstancesPurchaseRequestsTypeDef,
    _OptionalClientPurchaseScheduledInstancesPurchaseRequestsTypeDef,
):
    pass


ClientPurchaseScheduledInstancesResponseScheduledInstanceSetRecurrenceTypeDef = TypedDict(
    "ClientPurchaseScheduledInstancesResponseScheduledInstanceSetRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDaySet": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

ClientPurchaseScheduledInstancesResponseScheduledInstanceSetTypeDef = TypedDict(
    "ClientPurchaseScheduledInstancesResponseScheduledInstanceSetTypeDef",
    {
        "AvailabilityZone": str,
        "CreateDate": datetime,
        "HourlyPrice": str,
        "InstanceCount": int,
        "InstanceType": str,
        "NetworkPlatform": str,
        "NextSlotStartTime": datetime,
        "Platform": str,
        "PreviousSlotEndTime": datetime,
        "Recurrence": ClientPurchaseScheduledInstancesResponseScheduledInstanceSetRecurrenceTypeDef,
        "ScheduledInstanceId": str,
        "SlotDurationInHours": int,
        "TermEndDate": datetime,
        "TermStartDate": datetime,
        "TotalScheduledInstanceHours": int,
    },
    total=False,
)

ClientPurchaseScheduledInstancesResponseTypeDef = TypedDict(
    "ClientPurchaseScheduledInstancesResponseTypeDef",
    {
        "ScheduledInstanceSet": List[
            ClientPurchaseScheduledInstancesResponseScheduledInstanceSetTypeDef
        ]
    },
    total=False,
)

ClientRegisterImageBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRegisterImageBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientRegisterImageBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRegisterImageBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientRegisterImageBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientRegisterImageResponseTypeDef = TypedDict(
    "ClientRegisterImageResponseTypeDef", {"ImageId": str}, total=False
)

ClientRegisterTransitGatewayMulticastGroupMembersResponseRegisteredMulticastGroupMembersTypeDef = TypedDict(
    "ClientRegisterTransitGatewayMulticastGroupMembersResponseRegisteredMulticastGroupMembersTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "RegisteredNetworkInterfaceIds": List[str],
        "GroupIpAddress": str,
    },
    total=False,
)

ClientRegisterTransitGatewayMulticastGroupMembersResponseTypeDef = TypedDict(
    "ClientRegisterTransitGatewayMulticastGroupMembersResponseTypeDef",
    {
        "RegisteredMulticastGroupMembers": ClientRegisterTransitGatewayMulticastGroupMembersResponseRegisteredMulticastGroupMembersTypeDef
    },
    total=False,
)

ClientRegisterTransitGatewayMulticastGroupSourcesResponseRegisteredMulticastGroupSourcesTypeDef = TypedDict(
    "ClientRegisterTransitGatewayMulticastGroupSourcesResponseRegisteredMulticastGroupSourcesTypeDef",
    {
        "TransitGatewayMulticastDomainId": str,
        "RegisteredNetworkInterfaceIds": List[str],
        "GroupIpAddress": str,
    },
    total=False,
)

ClientRegisterTransitGatewayMulticastGroupSourcesResponseTypeDef = TypedDict(
    "ClientRegisterTransitGatewayMulticastGroupSourcesResponseTypeDef",
    {
        "RegisteredMulticastGroupSources": ClientRegisterTransitGatewayMulticastGroupSourcesResponseRegisteredMulticastGroupSourcesTypeDef
    },
    total=False,
)

ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef = TypedDict(
    "ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef = TypedDict(
    "ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef",
    {"TransitGatewayId": str, "OwnerId": str, "Region": str},
    total=False,
)

ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef = TypedDict(
    "ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef = TypedDict(
    "ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef = TypedDict(
    "ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "RequesterTgwInfo": ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentRequesterTgwInfoTypeDef,
        "AccepterTgwInfo": ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentAccepterTgwInfoTypeDef,
        "Status": ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentStatusTypeDef,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "CreationTime": datetime,
        "Tags": List[
            ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientRejectTransitGatewayPeeringAttachmentResponseTypeDef = TypedDict(
    "ClientRejectTransitGatewayPeeringAttachmentResponseTypeDef",
    {
        "TransitGatewayPeeringAttachment": ClientRejectTransitGatewayPeeringAttachmentResponseTransitGatewayPeeringAttachmentTypeDef
    },
    total=False,
)

ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef = TypedDict(
    "ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef = TypedDict(
    "ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef = TypedDict(
    "ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentOptionsTypeDef,
        "Tags": List[
            ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTagsTypeDef
        ],
    },
    total=False,
)

ClientRejectTransitGatewayVpcAttachmentResponseTypeDef = TypedDict(
    "ClientRejectTransitGatewayVpcAttachmentResponseTypeDef",
    {
        "TransitGatewayVpcAttachment": ClientRejectTransitGatewayVpcAttachmentResponseTransitGatewayVpcAttachmentTypeDef
    },
    total=False,
)

ClientRejectVpcEndpointConnectionsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientRejectVpcEndpointConnectionsResponseUnsuccessfulErrorTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientRejectVpcEndpointConnectionsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientRejectVpcEndpointConnectionsResponseUnsuccessfulTypeDef",
    {
        "Error": ClientRejectVpcEndpointConnectionsResponseUnsuccessfulErrorTypeDef,
        "ResourceId": str,
    },
    total=False,
)

ClientRejectVpcEndpointConnectionsResponseTypeDef = TypedDict(
    "ClientRejectVpcEndpointConnectionsResponseTypeDef",
    {"Unsuccessful": List[ClientRejectVpcEndpointConnectionsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientRejectVpcPeeringConnectionResponseTypeDef = TypedDict(
    "ClientRejectVpcPeeringConnectionResponseTypeDef", {"Return": bool}, total=False
)

ClientReleaseHostsResponseUnsuccessfulErrorTypeDef = TypedDict(
    "ClientReleaseHostsResponseUnsuccessfulErrorTypeDef", {"Code": str, "Message": str}, total=False
)

ClientReleaseHostsResponseUnsuccessfulTypeDef = TypedDict(
    "ClientReleaseHostsResponseUnsuccessfulTypeDef",
    {"Error": ClientReleaseHostsResponseUnsuccessfulErrorTypeDef, "ResourceId": str},
    total=False,
)

ClientReleaseHostsResponseTypeDef = TypedDict(
    "ClientReleaseHostsResponseTypeDef",
    {"Successful": List[str], "Unsuccessful": List[ClientReleaseHostsResponseUnsuccessfulTypeDef]},
    total=False,
)

ClientReplaceIamInstanceProfileAssociationIamInstanceProfileTypeDef = TypedDict(
    "ClientReplaceIamInstanceProfileAssociationIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientReplaceIamInstanceProfileAssociationResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef = TypedDict(
    "ClientReplaceIamInstanceProfileAssociationResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

ClientReplaceIamInstanceProfileAssociationResponseIamInstanceProfileAssociationTypeDef = TypedDict(
    "ClientReplaceIamInstanceProfileAssociationResponseIamInstanceProfileAssociationTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "IamInstanceProfile": ClientReplaceIamInstanceProfileAssociationResponseIamInstanceProfileAssociationIamInstanceProfileTypeDef,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
        "Timestamp": datetime,
    },
    total=False,
)

ClientReplaceIamInstanceProfileAssociationResponseTypeDef = TypedDict(
    "ClientReplaceIamInstanceProfileAssociationResponseTypeDef",
    {
        "IamInstanceProfileAssociation": ClientReplaceIamInstanceProfileAssociationResponseIamInstanceProfileAssociationTypeDef
    },
    total=False,
)

ClientReplaceNetworkAclAssociationResponseTypeDef = TypedDict(
    "ClientReplaceNetworkAclAssociationResponseTypeDef", {"NewAssociationId": str}, total=False
)

ClientReplaceNetworkAclEntryIcmpTypeCodeTypeDef = TypedDict(
    "ClientReplaceNetworkAclEntryIcmpTypeCodeTypeDef", {"Code": int, "Type": int}, total=False
)

ClientReplaceNetworkAclEntryPortRangeTypeDef = TypedDict(
    "ClientReplaceNetworkAclEntryPortRangeTypeDef", {"From": int, "To": int}, total=False
)

ClientReplaceRouteTableAssociationResponseAssociationStateTypeDef = TypedDict(
    "ClientReplaceRouteTableAssociationResponseAssociationStateTypeDef",
    {
        "State": Literal["associating", "associated", "disassociating", "disassociated", "failed"],
        "StatusMessage": str,
    },
    total=False,
)

ClientReplaceRouteTableAssociationResponseTypeDef = TypedDict(
    "ClientReplaceRouteTableAssociationResponseTypeDef",
    {
        "NewAssociationId": str,
        "AssociationState": ClientReplaceRouteTableAssociationResponseAssociationStateTypeDef,
    },
    total=False,
)

ClientReplaceTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef = TypedDict(
    "ClientReplaceTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef",
    {
        "ResourceId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
    },
    total=False,
)

ClientReplaceTransitGatewayRouteResponseRouteTypeDef = TypedDict(
    "ClientReplaceTransitGatewayRouteResponseRouteTypeDef",
    {
        "DestinationCidrBlock": str,
        "TransitGatewayAttachments": List[
            ClientReplaceTransitGatewayRouteResponseRouteTransitGatewayAttachmentsTypeDef
        ],
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
    },
    total=False,
)

ClientReplaceTransitGatewayRouteResponseTypeDef = TypedDict(
    "ClientReplaceTransitGatewayRouteResponseTypeDef",
    {"Route": ClientReplaceTransitGatewayRouteResponseRouteTypeDef},
    total=False,
)

ClientRequestSpotFleetResponseTypeDef = TypedDict(
    "ClientRequestSpotFleetResponseTypeDef", {"SpotFleetRequestId": str}, total=False
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTypeDef",
    {
        "SecurityGroups": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef
        ],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "Monitoring": ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef,
        "NetworkInterfaces": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef
        ],
        "Placement": ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef,
        "RamdiskId": str,
        "SpotPrice": str,
        "SubnetId": str,
        "UserData": str,
        "WeightedCapacity": float,
        "TagSpecifications": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef
        ],
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "SpotPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsTypeDef",
    {
        "LaunchTemplateSpecification": ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef,
        "Overrides": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef
        ],
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef",
    {"Name": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef",
    {
        "ClassicLoadBalancers": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef
        ]
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef",
    {"Arn": str},
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef",
    {
        "TargetGroups": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef
        ]
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTypeDef",
    {
        "ClassicLoadBalancersConfig": ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef,
        "TargetGroupsConfig": ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef,
    },
    total=False,
)

ClientRequestSpotFleetSpotFleetRequestConfigTypeDef = TypedDict(
    "ClientRequestSpotFleetSpotFleetRequestConfigTypeDef",
    {
        "AllocationStrategy": Literal["lowestPrice", "diversified", "capacityOptimized"],
        "OnDemandAllocationStrategy": Literal["lowestPrice", "prioritized"],
        "ClientToken": str,
        "ExcessCapacityTerminationPolicy": Literal["noTermination", "default"],
        "FulfilledCapacity": float,
        "OnDemandFulfilledCapacity": float,
        "IamFleetRole": str,
        "LaunchSpecifications": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchSpecificationsTypeDef
        ],
        "LaunchTemplateConfigs": List[
            ClientRequestSpotFleetSpotFleetRequestConfigLaunchTemplateConfigsTypeDef
        ],
        "SpotPrice": str,
        "TargetCapacity": int,
        "OnDemandTargetCapacity": int,
        "OnDemandMaxTotalPrice": str,
        "SpotMaxTotalPrice": str,
        "TerminateInstancesWithExpiration": bool,
        "Type": Literal["request", "maintain", "instant"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "ReplaceUnhealthyInstances": bool,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
        "LoadBalancersConfig": ClientRequestSpotFleetSpotFleetRequestConfigLoadBalancersConfigTypeDef,
        "InstancePoolsToUseCount": int,
    },
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientRequestSpotInstancesLaunchSpecificationBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationIamInstanceProfileTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationMonitoringTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationMonitoringTypeDef", {"Enabled": bool}, total=False
)

ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationPlacementTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

ClientRequestSpotInstancesLaunchSpecificationTypeDef = TypedDict(
    "ClientRequestSpotInstancesLaunchSpecificationTypeDef",
    {
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            ClientRequestSpotInstancesLaunchSpecificationBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientRequestSpotInstancesLaunchSpecificationIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "Monitoring": ClientRequestSpotInstancesLaunchSpecificationMonitoringTypeDef,
        "NetworkInterfaces": List[
            ClientRequestSpotInstancesLaunchSpecificationNetworkInterfacesTypeDef
        ],
        "Placement": ClientRequestSpotInstancesLaunchSpecificationPlacementTypeDef,
        "RamdiskId": str,
        "SubnetId": str,
        "UserData": str,
    },
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsFaultTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsFaultTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationTypeDef",
    {
        "UserData": str,
        "SecurityGroups": List[
            ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef
        ],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "NetworkInterfaces": List[
            ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef
        ],
        "Placement": ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef,
        "RamdiskId": str,
        "SubnetId": str,
        "Monitoring": ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef,
    },
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsStatusTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsStatusTypeDef",
    {"Code": str, "Message": str, "UpdateTime": datetime},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsTagsTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ClientRequestSpotInstancesResponseSpotInstanceRequestsTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseSpotInstanceRequestsTypeDef",
    {
        "ActualBlockHourlyPrice": str,
        "AvailabilityZoneGroup": str,
        "BlockDurationMinutes": int,
        "CreateTime": datetime,
        "Fault": ClientRequestSpotInstancesResponseSpotInstanceRequestsFaultTypeDef,
        "InstanceId": str,
        "LaunchGroup": str,
        "LaunchSpecification": ClientRequestSpotInstancesResponseSpotInstanceRequestsLaunchSpecificationTypeDef,
        "LaunchedAvailabilityZone": str,
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "SpotInstanceRequestId": str,
        "SpotPrice": str,
        "State": Literal["open", "active", "closed", "cancelled", "failed"],
        "Status": ClientRequestSpotInstancesResponseSpotInstanceRequestsStatusTypeDef,
        "Tags": List[ClientRequestSpotInstancesResponseSpotInstanceRequestsTagsTypeDef],
        "Type": Literal["one-time", "persistent"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientRequestSpotInstancesResponseTypeDef = TypedDict(
    "ClientRequestSpotInstancesResponseTypeDef",
    {"SpotInstanceRequests": List[ClientRequestSpotInstancesResponseSpotInstanceRequestsTypeDef]},
    total=False,
)

ClientResetEbsDefaultKmsKeyIdResponseTypeDef = TypedDict(
    "ClientResetEbsDefaultKmsKeyIdResponseTypeDef", {"KmsKeyId": str}, total=False
)

ClientResetFpgaImageAttributeResponseTypeDef = TypedDict(
    "ClientResetFpgaImageAttributeResponseTypeDef", {"Return": bool}, total=False
)

ClientRestoreAddressToClassicResponseTypeDef = TypedDict(
    "ClientRestoreAddressToClassicResponseTypeDef",
    {"PublicIp": str, "Status": Literal["MoveInProgress", "InVpc", "InClassic"]},
    total=False,
)

ClientRevokeClientVpnIngressResponseStatusTypeDef = TypedDict(
    "ClientRevokeClientVpnIngressResponseStatusTypeDef",
    {"Code": Literal["authorizing", "active", "failed", "revoking"], "Message": str},
    total=False,
)

ClientRevokeClientVpnIngressResponseTypeDef = TypedDict(
    "ClientRevokeClientVpnIngressResponseTypeDef",
    {"Status": ClientRevokeClientVpnIngressResponseStatusTypeDef},
    total=False,
)

ClientRevokeSecurityGroupEgressIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientRevokeSecurityGroupEgressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientRevokeSecurityGroupEgressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientRevokeSecurityGroupEgressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientRevokeSecurityGroupEgressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientRevokeSecurityGroupEgressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientRevokeSecurityGroupEgressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientRevokeSecurityGroupEgressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientRevokeSecurityGroupEgressIpPermissionsTypeDef = TypedDict(
    "ClientRevokeSecurityGroupEgressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[ClientRevokeSecurityGroupEgressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[ClientRevokeSecurityGroupEgressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[ClientRevokeSecurityGroupEgressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientRevokeSecurityGroupEgressIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientRevokeSecurityGroupIngressIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientRevokeSecurityGroupIngressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientRevokeSecurityGroupIngressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientRevokeSecurityGroupIngressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientRevokeSecurityGroupIngressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientRevokeSecurityGroupIngressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientRevokeSecurityGroupIngressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientRevokeSecurityGroupIngressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientRevokeSecurityGroupIngressIpPermissionsTypeDef = TypedDict(
    "ClientRevokeSecurityGroupIngressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[ClientRevokeSecurityGroupIngressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[ClientRevokeSecurityGroupIngressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[ClientRevokeSecurityGroupIngressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientRevokeSecurityGroupIngressIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientRunInstancesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRunInstancesBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ClientRunInstancesBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRunInstancesBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ClientRunInstancesBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ClientRunInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientRunInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientRunInstancesCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientRunInstancesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientRunInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientRunInstancesCpuOptionsTypeDef = TypedDict(
    "ClientRunInstancesCpuOptionsTypeDef", {"CoreCount": int, "ThreadsPerCore": int}, total=False
)

ClientRunInstancesCreditSpecificationTypeDef = TypedDict(
    "ClientRunInstancesCreditSpecificationTypeDef", {"CpuCredits": str}
)

ClientRunInstancesElasticGpuSpecificationTypeDef = TypedDict(
    "ClientRunInstancesElasticGpuSpecificationTypeDef", {"Type": str}
)

ClientRunInstancesElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ClientRunInstancesElasticInferenceAcceleratorsTypeDef", {"Type": str}
)

ClientRunInstancesHibernationOptionsTypeDef = TypedDict(
    "ClientRunInstancesHibernationOptionsTypeDef", {"Configured": bool}, total=False
)

ClientRunInstancesIamInstanceProfileTypeDef = TypedDict(
    "ClientRunInstancesIamInstanceProfileTypeDef", {"Arn": str, "Name": str}, total=False
)

ClientRunInstancesInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ClientRunInstancesInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ClientRunInstancesInstanceMarketOptionsTypeDef = TypedDict(
    "ClientRunInstancesInstanceMarketOptionsTypeDef",
    {"MarketType": str, "SpotOptions": ClientRunInstancesInstanceMarketOptionsSpotOptionsTypeDef},
    total=False,
)

ClientRunInstancesIpv6AddressesTypeDef = TypedDict(
    "ClientRunInstancesIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

ClientRunInstancesLaunchTemplateTypeDef = TypedDict(
    "ClientRunInstancesLaunchTemplateTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ClientRunInstancesLicenseSpecificationsTypeDef = TypedDict(
    "ClientRunInstancesLicenseSpecificationsTypeDef", {"LicenseConfigurationArn": str}, total=False
)

ClientRunInstancesMetadataOptionsTypeDef = TypedDict(
    "ClientRunInstancesMetadataOptionsTypeDef",
    {
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

ClientRunInstancesMonitoringTypeDef = TypedDict(
    "ClientRunInstancesMonitoringTypeDef", {"Enabled": bool}
)

ClientRunInstancesNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientRunInstancesNetworkInterfacesIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

ClientRunInstancesNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientRunInstancesNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientRunInstancesNetworkInterfacesTypeDef = TypedDict(
    "ClientRunInstancesNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[ClientRunInstancesNetworkInterfacesIpv6AddressesTypeDef],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[ClientRunInstancesNetworkInterfacesPrivateIpAddressesTypeDef],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientRunInstancesPlacementTypeDef = TypedDict(
    "ClientRunInstancesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientRunInstancesResponseGroupsTypeDef = TypedDict(
    "ClientRunInstancesResponseGroupsTypeDef", {"GroupName": str, "GroupId": str}, total=False
)

ClientRunInstancesResponseInstancesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesBlockDeviceMappingsEbsTypeDef",
    {
        "AttachTime": datetime,
        "DeleteOnTermination": bool,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
        "VolumeId": str,
    },
    total=False,
)

ClientRunInstancesResponseInstancesBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesBlockDeviceMappingsTypeDef",
    {"DeviceName": str, "Ebs": ClientRunInstancesResponseInstancesBlockDeviceMappingsEbsTypeDef},
    total=False,
)

ClientRunInstancesResponseInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ClientRunInstancesResponseInstancesCapacityReservationSpecificationTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ClientRunInstancesResponseInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ClientRunInstancesResponseInstancesCpuOptionsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ClientRunInstancesResponseInstancesElasticGpuAssociationsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesElasticGpuAssociationsTypeDef",
    {
        "ElasticGpuId": str,
        "ElasticGpuAssociationId": str,
        "ElasticGpuAssociationState": str,
        "ElasticGpuAssociationTime": str,
    },
    total=False,
)

ClientRunInstancesResponseInstancesElasticInferenceAcceleratorAssociationsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesElasticInferenceAcceleratorAssociationsTypeDef",
    {
        "ElasticInferenceAcceleratorArn": str,
        "ElasticInferenceAcceleratorAssociationId": str,
        "ElasticInferenceAcceleratorAssociationState": str,
        "ElasticInferenceAcceleratorAssociationTime": datetime,
    },
    total=False,
)

ClientRunInstancesResponseInstancesHibernationOptionsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

ClientRunInstancesResponseInstancesIamInstanceProfileTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

ClientRunInstancesResponseInstancesLicensesTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesLicensesTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ClientRunInstancesResponseInstancesMetadataOptionsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesMetadataOptionsTypeDef",
    {
        "State": Literal["pending", "applied"],
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

ClientRunInstancesResponseInstancesMonitoringTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesAssociationTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesAssociationTypeDef",
    {"IpOwnerId": str, "PublicDnsName": str, "PublicIp": str},
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesAttachmentTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesGroupsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef",
    {"IpOwnerId": str, "PublicDnsName": str, "PublicIp": str},
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesPrivateIpAddressesTypeDef",
    {
        "Association": ClientRunInstancesResponseInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef,
        "Primary": bool,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
    },
    total=False,
)

ClientRunInstancesResponseInstancesNetworkInterfacesTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesNetworkInterfacesTypeDef",
    {
        "Association": ClientRunInstancesResponseInstancesNetworkInterfacesAssociationTypeDef,
        "Attachment": ClientRunInstancesResponseInstancesNetworkInterfacesAttachmentTypeDef,
        "Description": str,
        "Groups": List[ClientRunInstancesResponseInstancesNetworkInterfacesGroupsTypeDef],
        "Ipv6Addresses": List[
            ClientRunInstancesResponseInstancesNetworkInterfacesIpv6AddressesTypeDef
        ],
        "MacAddress": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ClientRunInstancesResponseInstancesNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SourceDestCheck": bool,
        "Status": Literal["available", "associated", "attaching", "in-use", "detaching"],
        "SubnetId": str,
        "VpcId": str,
        "InterfaceType": str,
    },
    total=False,
)

ClientRunInstancesResponseInstancesPlacementTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ClientRunInstancesResponseInstancesProductCodesTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ClientRunInstancesResponseInstancesSecurityGroupsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

ClientRunInstancesResponseInstancesStateReasonTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesStateReasonTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

ClientRunInstancesResponseInstancesStateTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientRunInstancesResponseInstancesTagsTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientRunInstancesResponseInstancesTypeDef = TypedDict(
    "ClientRunInstancesResponseInstancesTypeDef",
    {
        "AmiLaunchIndex": int,
        "ImageId": str,
        "InstanceId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "LaunchTime": datetime,
        "Monitoring": ClientRunInstancesResponseInstancesMonitoringTypeDef,
        "Placement": ClientRunInstancesResponseInstancesPlacementTypeDef,
        "Platform": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "ProductCodes": List[ClientRunInstancesResponseInstancesProductCodesTypeDef],
        "PublicDnsName": str,
        "PublicIpAddress": str,
        "RamdiskId": str,
        "State": ClientRunInstancesResponseInstancesStateTypeDef,
        "StateTransitionReason": str,
        "SubnetId": str,
        "VpcId": str,
        "Architecture": Literal["i386", "x86_64", "arm64"],
        "BlockDeviceMappings": List[ClientRunInstancesResponseInstancesBlockDeviceMappingsTypeDef],
        "ClientToken": str,
        "EbsOptimized": bool,
        "EnaSupport": bool,
        "Hypervisor": Literal["ovm", "xen"],
        "IamInstanceProfile": ClientRunInstancesResponseInstancesIamInstanceProfileTypeDef,
        "InstanceLifecycle": Literal["spot", "scheduled"],
        "ElasticGpuAssociations": List[
            ClientRunInstancesResponseInstancesElasticGpuAssociationsTypeDef
        ],
        "ElasticInferenceAcceleratorAssociations": List[
            ClientRunInstancesResponseInstancesElasticInferenceAcceleratorAssociationsTypeDef
        ],
        "NetworkInterfaces": List[ClientRunInstancesResponseInstancesNetworkInterfacesTypeDef],
        "OutpostArn": str,
        "RootDeviceName": str,
        "RootDeviceType": Literal["ebs", "instance-store"],
        "SecurityGroups": List[ClientRunInstancesResponseInstancesSecurityGroupsTypeDef],
        "SourceDestCheck": bool,
        "SpotInstanceRequestId": str,
        "SriovNetSupport": str,
        "StateReason": ClientRunInstancesResponseInstancesStateReasonTypeDef,
        "Tags": List[ClientRunInstancesResponseInstancesTagsTypeDef],
        "VirtualizationType": Literal["hvm", "paravirtual"],
        "CpuOptions": ClientRunInstancesResponseInstancesCpuOptionsTypeDef,
        "CapacityReservationId": str,
        "CapacityReservationSpecification": ClientRunInstancesResponseInstancesCapacityReservationSpecificationTypeDef,
        "HibernationOptions": ClientRunInstancesResponseInstancesHibernationOptionsTypeDef,
        "Licenses": List[ClientRunInstancesResponseInstancesLicensesTypeDef],
        "MetadataOptions": ClientRunInstancesResponseInstancesMetadataOptionsTypeDef,
    },
    total=False,
)

ClientRunInstancesResponseTypeDef = TypedDict(
    "ClientRunInstancesResponseTypeDef",
    {
        "Groups": List[ClientRunInstancesResponseGroupsTypeDef],
        "Instances": List[ClientRunInstancesResponseInstancesTypeDef],
        "OwnerId": str,
        "RequesterId": str,
        "ReservationId": str,
    },
    total=False,
)

ClientRunInstancesTagSpecificationsTagsTypeDef = TypedDict(
    "ClientRunInstancesTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ClientRunInstancesTagSpecificationsTypeDef = TypedDict(
    "ClientRunInstancesTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ClientRunInstancesTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Encrypted": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": str,
    },
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationBlockDeviceMappingsTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "Ebs": ClientRunScheduledInstancesLaunchSpecificationBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
        "VirtualName": str,
    },
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationIamInstanceProfileTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationMonitoringTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigsTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigsTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddressConfigs": List[
            ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigsTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationPlacementTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str},
    total=False,
)

ClientRunScheduledInstancesLaunchSpecificationTypeDef = TypedDict(
    "ClientRunScheduledInstancesLaunchSpecificationTypeDef",
    {
        "BlockDeviceMappings": List[
            ClientRunScheduledInstancesLaunchSpecificationBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": ClientRunScheduledInstancesLaunchSpecificationIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": str,
        "KernelId": str,
        "KeyName": str,
        "Monitoring": ClientRunScheduledInstancesLaunchSpecificationMonitoringTypeDef,
        "NetworkInterfaces": List[
            ClientRunScheduledInstancesLaunchSpecificationNetworkInterfacesTypeDef
        ],
        "Placement": ClientRunScheduledInstancesLaunchSpecificationPlacementTypeDef,
        "RamdiskId": str,
        "SecurityGroupIds": List[str],
        "SubnetId": str,
        "UserData": str,
    },
    total=False,
)

ClientRunScheduledInstancesResponseTypeDef = TypedDict(
    "ClientRunScheduledInstancesResponseTypeDef", {"InstanceIdSet": List[str]}, total=False
)

ClientSearchLocalGatewayRoutesFiltersTypeDef = TypedDict(
    "ClientSearchLocalGatewayRoutesFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ClientSearchLocalGatewayRoutesResponseRoutesTypeDef = TypedDict(
    "ClientSearchLocalGatewayRoutesResponseRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "LocalGatewayVirtualInterfaceGroupId": str,
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
        "LocalGatewayRouteTableId": str,
    },
    total=False,
)

ClientSearchLocalGatewayRoutesResponseTypeDef = TypedDict(
    "ClientSearchLocalGatewayRoutesResponseTypeDef",
    {"Routes": List[ClientSearchLocalGatewayRoutesResponseRoutesTypeDef], "NextToken": str},
    total=False,
)

ClientSearchTransitGatewayMulticastGroupsFiltersTypeDef = TypedDict(
    "ClientSearchTransitGatewayMulticastGroupsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientSearchTransitGatewayMulticastGroupsResponseMulticastGroupsTypeDef = TypedDict(
    "ClientSearchTransitGatewayMulticastGroupsResponseMulticastGroupsTypeDef",
    {
        "GroupIpAddress": str,
        "TransitGatewayAttachmentId": str,
        "SubnetId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "NetworkInterfaceId": str,
        "GroupMember": bool,
        "GroupSource": bool,
        "MemberType": Literal["static", "igmp"],
        "SourceType": Literal["static", "igmp"],
    },
    total=False,
)

ClientSearchTransitGatewayMulticastGroupsResponseTypeDef = TypedDict(
    "ClientSearchTransitGatewayMulticastGroupsResponseTypeDef",
    {
        "MulticastGroups": List[
            ClientSearchTransitGatewayMulticastGroupsResponseMulticastGroupsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

ClientSearchTransitGatewayRoutesFiltersTypeDef = TypedDict(
    "ClientSearchTransitGatewayRoutesFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

ClientSearchTransitGatewayRoutesResponseRoutesTransitGatewayAttachmentsTypeDef = TypedDict(
    "ClientSearchTransitGatewayRoutesResponseRoutesTransitGatewayAttachmentsTypeDef",
    {
        "ResourceId": str,
        "TransitGatewayAttachmentId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
    },
    total=False,
)

ClientSearchTransitGatewayRoutesResponseRoutesTypeDef = TypedDict(
    "ClientSearchTransitGatewayRoutesResponseRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "TransitGatewayAttachments": List[
            ClientSearchTransitGatewayRoutesResponseRoutesTransitGatewayAttachmentsTypeDef
        ],
        "Type": Literal["static", "propagated"],
        "State": Literal["pending", "active", "blackhole", "deleting", "deleted"],
    },
    total=False,
)

ClientSearchTransitGatewayRoutesResponseTypeDef = TypedDict(
    "ClientSearchTransitGatewayRoutesResponseTypeDef",
    {
        "Routes": List[ClientSearchTransitGatewayRoutesResponseRoutesTypeDef],
        "AdditionalRoutesAvailable": bool,
    },
    total=False,
)

ClientStartInstancesResponseStartingInstancesCurrentStateTypeDef = TypedDict(
    "ClientStartInstancesResponseStartingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientStartInstancesResponseStartingInstancesPreviousStateTypeDef = TypedDict(
    "ClientStartInstancesResponseStartingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientStartInstancesResponseStartingInstancesTypeDef = TypedDict(
    "ClientStartInstancesResponseStartingInstancesTypeDef",
    {
        "CurrentState": ClientStartInstancesResponseStartingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": ClientStartInstancesResponseStartingInstancesPreviousStateTypeDef,
    },
    total=False,
)

ClientStartInstancesResponseTypeDef = TypedDict(
    "ClientStartInstancesResponseTypeDef",
    {"StartingInstances": List[ClientStartInstancesResponseStartingInstancesTypeDef]},
    total=False,
)

ClientStopInstancesResponseStoppingInstancesCurrentStateTypeDef = TypedDict(
    "ClientStopInstancesResponseStoppingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientStopInstancesResponseStoppingInstancesPreviousStateTypeDef = TypedDict(
    "ClientStopInstancesResponseStoppingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientStopInstancesResponseStoppingInstancesTypeDef = TypedDict(
    "ClientStopInstancesResponseStoppingInstancesTypeDef",
    {
        "CurrentState": ClientStopInstancesResponseStoppingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": ClientStopInstancesResponseStoppingInstancesPreviousStateTypeDef,
    },
    total=False,
)

ClientStopInstancesResponseTypeDef = TypedDict(
    "ClientStopInstancesResponseTypeDef",
    {"StoppingInstances": List[ClientStopInstancesResponseStoppingInstancesTypeDef]},
    total=False,
)

ClientTerminateClientVpnConnectionsResponseConnectionStatusesCurrentStatusTypeDef = TypedDict(
    "ClientTerminateClientVpnConnectionsResponseConnectionStatusesCurrentStatusTypeDef",
    {"Code": Literal["active", "failed-to-terminate", "terminating", "terminated"], "Message": str},
    total=False,
)

ClientTerminateClientVpnConnectionsResponseConnectionStatusesPreviousStatusTypeDef = TypedDict(
    "ClientTerminateClientVpnConnectionsResponseConnectionStatusesPreviousStatusTypeDef",
    {"Code": Literal["active", "failed-to-terminate", "terminating", "terminated"], "Message": str},
    total=False,
)

ClientTerminateClientVpnConnectionsResponseConnectionStatusesTypeDef = TypedDict(
    "ClientTerminateClientVpnConnectionsResponseConnectionStatusesTypeDef",
    {
        "ConnectionId": str,
        "PreviousStatus": ClientTerminateClientVpnConnectionsResponseConnectionStatusesPreviousStatusTypeDef,
        "CurrentStatus": ClientTerminateClientVpnConnectionsResponseConnectionStatusesCurrentStatusTypeDef,
    },
    total=False,
)

ClientTerminateClientVpnConnectionsResponseTypeDef = TypedDict(
    "ClientTerminateClientVpnConnectionsResponseTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Username": str,
        "ConnectionStatuses": List[
            ClientTerminateClientVpnConnectionsResponseConnectionStatusesTypeDef
        ],
    },
    total=False,
)

ClientTerminateInstancesResponseTerminatingInstancesCurrentStateTypeDef = TypedDict(
    "ClientTerminateInstancesResponseTerminatingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientTerminateInstancesResponseTerminatingInstancesPreviousStateTypeDef = TypedDict(
    "ClientTerminateInstancesResponseTerminatingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

ClientTerminateInstancesResponseTerminatingInstancesTypeDef = TypedDict(
    "ClientTerminateInstancesResponseTerminatingInstancesTypeDef",
    {
        "CurrentState": ClientTerminateInstancesResponseTerminatingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": ClientTerminateInstancesResponseTerminatingInstancesPreviousStateTypeDef,
    },
    total=False,
)

ClientTerminateInstancesResponseTypeDef = TypedDict(
    "ClientTerminateInstancesResponseTypeDef",
    {"TerminatingInstances": List[ClientTerminateInstancesResponseTerminatingInstancesTypeDef]},
    total=False,
)

ClientUnassignIpv6AddressesResponseTypeDef = TypedDict(
    "ClientUnassignIpv6AddressesResponseTypeDef",
    {"NetworkInterfaceId": str, "UnassignedIpv6Addresses": List[str]},
    total=False,
)

ClientUnmonitorInstancesResponseInstanceMonitoringsMonitoringTypeDef = TypedDict(
    "ClientUnmonitorInstancesResponseInstanceMonitoringsMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

ClientUnmonitorInstancesResponseInstanceMonitoringsTypeDef = TypedDict(
    "ClientUnmonitorInstancesResponseInstanceMonitoringsTypeDef",
    {
        "InstanceId": str,
        "Monitoring": ClientUnmonitorInstancesResponseInstanceMonitoringsMonitoringTypeDef,
    },
    total=False,
)

ClientUnmonitorInstancesResponseTypeDef = TypedDict(
    "ClientUnmonitorInstancesResponseTypeDef",
    {"InstanceMonitorings": List[ClientUnmonitorInstancesResponseInstanceMonitoringsTypeDef]},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[
            ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsIpRangesTypeDef
        ],
        "Ipv6Ranges": List[
            ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsIpv6RangesTypeDef
        ],
        "PrefixListIds": List[
            ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsPrefixListIdsTypeDef
        ],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientUpdateSecurityGroupRuleDescriptionsEgressIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsEgressResponseTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsEgressResponseTypeDef", {"Return": bool}, total=False
)

ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsIpRangesTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[
            ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsIpRangesTypeDef
        ],
        "Ipv6Ranges": List[
            ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsIpv6RangesTypeDef
        ],
        "PrefixListIds": List[
            ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsPrefixListIdsTypeDef
        ],
        "ToPort": int,
        "UserIdGroupPairs": List[
            ClientUpdateSecurityGroupRuleDescriptionsIngressIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

ClientUpdateSecurityGroupRuleDescriptionsIngressResponseTypeDef = TypedDict(
    "ClientUpdateSecurityGroupRuleDescriptionsIngressResponseTypeDef", {"Return": bool}, total=False
)

ClientWithdrawByoipCidrResponseByoipCidrTypeDef = TypedDict(
    "ClientWithdrawByoipCidrResponseByoipCidrTypeDef",
    {
        "Cidr": str,
        "Description": str,
        "StatusMessage": str,
        "State": Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
        ],
    },
    total=False,
)

ClientWithdrawByoipCidrResponseTypeDef = TypedDict(
    "ClientWithdrawByoipCidrResponseTypeDef",
    {"ByoipCidr": ClientWithdrawByoipCidrResponseByoipCidrTypeDef},
    total=False,
)

ConversionTaskCancelledWaitWaiterConfigTypeDef = TypedDict(
    "ConversionTaskCancelledWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

ConversionTaskCompletedWaitWaiterConfigTypeDef = TypedDict(
    "ConversionTaskCompletedWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

ConversionTaskDeletedWaitWaiterConfigTypeDef = TypedDict(
    "ConversionTaskDeletedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

CustomerGatewayAvailableWaitFiltersTypeDef = TypedDict(
    "CustomerGatewayAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

CustomerGatewayAvailableWaitWaiterConfigTypeDef = TypedDict(
    "CustomerGatewayAvailableWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

DescribeByoipCidrsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeByoipCidrsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeByoipCidrsPaginateResponseByoipCidrsTypeDef = TypedDict(
    "DescribeByoipCidrsPaginateResponseByoipCidrsTypeDef",
    {
        "Cidr": str,
        "Description": str,
        "StatusMessage": str,
        "State": Literal[
            "advertised",
            "deprovisioned",
            "failed-deprovision",
            "failed-provision",
            "pending-deprovision",
            "pending-provision",
            "provisioned",
        ],
    },
    total=False,
)

DescribeByoipCidrsPaginateResponseTypeDef = TypedDict(
    "DescribeByoipCidrsPaginateResponseTypeDef",
    {"ByoipCidrs": List[DescribeByoipCidrsPaginateResponseByoipCidrsTypeDef]},
    total=False,
)

DescribeCapacityReservationsPaginateFiltersTypeDef = TypedDict(
    "DescribeCapacityReservationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeCapacityReservationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeCapacityReservationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeCapacityReservationsPaginateResponseCapacityReservationsTagsTypeDef = TypedDict(
    "DescribeCapacityReservationsPaginateResponseCapacityReservationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeCapacityReservationsPaginateResponseCapacityReservationsTypeDef = TypedDict(
    "DescribeCapacityReservationsPaginateResponseCapacityReservationsTypeDef",
    {
        "CapacityReservationId": str,
        "OwnerId": str,
        "CapacityReservationArn": str,
        "AvailabilityZoneId": str,
        "InstanceType": str,
        "InstancePlatform": Literal[
            "Linux/UNIX",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux with SQL Server Enterprise",
        ],
        "AvailabilityZone": str,
        "Tenancy": Literal["default", "dedicated"],
        "TotalInstanceCount": int,
        "AvailableInstanceCount": int,
        "EbsOptimized": bool,
        "EphemeralStorage": bool,
        "State": Literal["active", "expired", "cancelled", "pending", "failed"],
        "EndDate": datetime,
        "EndDateType": Literal["unlimited", "limited"],
        "InstanceMatchCriteria": Literal["open", "targeted"],
        "CreateDate": datetime,
        "Tags": List[DescribeCapacityReservationsPaginateResponseCapacityReservationsTagsTypeDef],
    },
    total=False,
)

DescribeCapacityReservationsPaginateResponseTypeDef = TypedDict(
    "DescribeCapacityReservationsPaginateResponseTypeDef",
    {
        "CapacityReservations": List[
            DescribeCapacityReservationsPaginateResponseCapacityReservationsTypeDef
        ]
    },
    total=False,
)

DescribeClassicLinkInstancesPaginateFiltersTypeDef = TypedDict(
    "DescribeClassicLinkInstancesPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeClassicLinkInstancesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeClassicLinkInstancesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeClassicLinkInstancesPaginateResponseInstancesGroupsTypeDef = TypedDict(
    "DescribeClassicLinkInstancesPaginateResponseInstancesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeClassicLinkInstancesPaginateResponseInstancesTagsTypeDef = TypedDict(
    "DescribeClassicLinkInstancesPaginateResponseInstancesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeClassicLinkInstancesPaginateResponseInstancesTypeDef = TypedDict(
    "DescribeClassicLinkInstancesPaginateResponseInstancesTypeDef",
    {
        "Groups": List[DescribeClassicLinkInstancesPaginateResponseInstancesGroupsTypeDef],
        "InstanceId": str,
        "Tags": List[DescribeClassicLinkInstancesPaginateResponseInstancesTagsTypeDef],
        "VpcId": str,
    },
    total=False,
)

DescribeClassicLinkInstancesPaginateResponseTypeDef = TypedDict(
    "DescribeClassicLinkInstancesPaginateResponseTypeDef",
    {"Instances": List[DescribeClassicLinkInstancesPaginateResponseInstancesTypeDef]},
    total=False,
)

DescribeClientVpnAuthorizationRulesPaginateFiltersTypeDef = TypedDict(
    "DescribeClientVpnAuthorizationRulesPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeClientVpnAuthorizationRulesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeClientVpnAuthorizationRulesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeClientVpnAuthorizationRulesPaginateResponseAuthorizationRulesStatusTypeDef = TypedDict(
    "DescribeClientVpnAuthorizationRulesPaginateResponseAuthorizationRulesStatusTypeDef",
    {"Code": Literal["authorizing", "active", "failed", "revoking"], "Message": str},
    total=False,
)

DescribeClientVpnAuthorizationRulesPaginateResponseAuthorizationRulesTypeDef = TypedDict(
    "DescribeClientVpnAuthorizationRulesPaginateResponseAuthorizationRulesTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Description": str,
        "GroupId": str,
        "AccessAll": bool,
        "DestinationCidr": str,
        "Status": DescribeClientVpnAuthorizationRulesPaginateResponseAuthorizationRulesStatusTypeDef,
    },
    total=False,
)

DescribeClientVpnAuthorizationRulesPaginateResponseTypeDef = TypedDict(
    "DescribeClientVpnAuthorizationRulesPaginateResponseTypeDef",
    {
        "AuthorizationRules": List[
            DescribeClientVpnAuthorizationRulesPaginateResponseAuthorizationRulesTypeDef
        ]
    },
    total=False,
)

DescribeClientVpnConnectionsPaginateFiltersTypeDef = TypedDict(
    "DescribeClientVpnConnectionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeClientVpnConnectionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeClientVpnConnectionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeClientVpnConnectionsPaginateResponseConnectionsStatusTypeDef = TypedDict(
    "DescribeClientVpnConnectionsPaginateResponseConnectionsStatusTypeDef",
    {"Code": Literal["active", "failed-to-terminate", "terminating", "terminated"], "Message": str},
    total=False,
)

DescribeClientVpnConnectionsPaginateResponseConnectionsTypeDef = TypedDict(
    "DescribeClientVpnConnectionsPaginateResponseConnectionsTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Timestamp": str,
        "ConnectionId": str,
        "Username": str,
        "ConnectionEstablishedTime": str,
        "IngressBytes": str,
        "EgressBytes": str,
        "IngressPackets": str,
        "EgressPackets": str,
        "ClientIp": str,
        "CommonName": str,
        "Status": DescribeClientVpnConnectionsPaginateResponseConnectionsStatusTypeDef,
        "ConnectionEndTime": str,
    },
    total=False,
)

DescribeClientVpnConnectionsPaginateResponseTypeDef = TypedDict(
    "DescribeClientVpnConnectionsPaginateResponseTypeDef",
    {"Connections": List[DescribeClientVpnConnectionsPaginateResponseConnectionsTypeDef]},
    total=False,
)

DescribeClientVpnEndpointsPaginateFiltersTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeClientVpnEndpointsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAssociatedTargetNetworksTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAssociatedTargetNetworksTypeDef",
    {"NetworkId": str, "NetworkType": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsActiveDirectoryTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsActiveDirectoryTypeDef",
    {"DirectoryId": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsMutualAuthenticationTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsMutualAuthenticationTypeDef",
    {"ClientRootCertificateChain": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsTypeDef",
    {
        "Type": Literal["certificate-authentication", "directory-service-authentication"],
        "ActiveDirectory": DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsActiveDirectoryTypeDef,
        "MutualAuthentication": DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsMutualAuthenticationTypeDef,
    },
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsConnectionLogOptionsTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsConnectionLogOptionsTypeDef",
    {"Enabled": bool, "CloudwatchLogGroup": str, "CloudwatchLogStream": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsStatusTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsStatusTypeDef",
    {"Code": Literal["pending-associate", "available", "deleting", "deleted"], "Message": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsTagsTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsTypeDef",
    {
        "ClientVpnEndpointId": str,
        "Description": str,
        "Status": DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsStatusTypeDef,
        "CreationTime": str,
        "DeletionTime": str,
        "DnsName": str,
        "ClientCidrBlock": str,
        "DnsServers": List[str],
        "SplitTunnel": bool,
        "VpnProtocol": str,
        "TransportProtocol": Literal["tcp", "udp"],
        "AssociatedTargetNetworks": List[
            DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAssociatedTargetNetworksTypeDef
        ],
        "ServerCertificateArn": str,
        "AuthenticationOptions": List[
            DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsAuthenticationOptionsTypeDef
        ],
        "ConnectionLogOptions": DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsConnectionLogOptionsTypeDef,
        "Tags": List[DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsTagsTypeDef],
    },
    total=False,
)

DescribeClientVpnEndpointsPaginateResponseTypeDef = TypedDict(
    "DescribeClientVpnEndpointsPaginateResponseTypeDef",
    {
        "ClientVpnEndpoints": List[
            DescribeClientVpnEndpointsPaginateResponseClientVpnEndpointsTypeDef
        ]
    },
    total=False,
)

DescribeClientVpnRoutesPaginateFiltersTypeDef = TypedDict(
    "DescribeClientVpnRoutesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeClientVpnRoutesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeClientVpnRoutesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeClientVpnRoutesPaginateResponseRoutesStatusTypeDef = TypedDict(
    "DescribeClientVpnRoutesPaginateResponseRoutesStatusTypeDef",
    {"Code": Literal["creating", "active", "failed", "deleting"], "Message": str},
    total=False,
)

DescribeClientVpnRoutesPaginateResponseRoutesTypeDef = TypedDict(
    "DescribeClientVpnRoutesPaginateResponseRoutesTypeDef",
    {
        "ClientVpnEndpointId": str,
        "DestinationCidr": str,
        "TargetSubnet": str,
        "Type": str,
        "Origin": str,
        "Status": DescribeClientVpnRoutesPaginateResponseRoutesStatusTypeDef,
        "Description": str,
    },
    total=False,
)

DescribeClientVpnRoutesPaginateResponseTypeDef = TypedDict(
    "DescribeClientVpnRoutesPaginateResponseTypeDef",
    {"Routes": List[DescribeClientVpnRoutesPaginateResponseRoutesTypeDef]},
    total=False,
)

DescribeClientVpnTargetNetworksPaginateFiltersTypeDef = TypedDict(
    "DescribeClientVpnTargetNetworksPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeClientVpnTargetNetworksPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeClientVpnTargetNetworksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeClientVpnTargetNetworksPaginateResponseClientVpnTargetNetworksStatusTypeDef = TypedDict(
    "DescribeClientVpnTargetNetworksPaginateResponseClientVpnTargetNetworksStatusTypeDef",
    {
        "Code": Literal[
            "associating", "associated", "association-failed", "disassociating", "disassociated"
        ],
        "Message": str,
    },
    total=False,
)

DescribeClientVpnTargetNetworksPaginateResponseClientVpnTargetNetworksTypeDef = TypedDict(
    "DescribeClientVpnTargetNetworksPaginateResponseClientVpnTargetNetworksTypeDef",
    {
        "AssociationId": str,
        "VpcId": str,
        "TargetNetworkId": str,
        "ClientVpnEndpointId": str,
        "Status": DescribeClientVpnTargetNetworksPaginateResponseClientVpnTargetNetworksStatusTypeDef,
        "SecurityGroups": List[str],
    },
    total=False,
)

DescribeClientVpnTargetNetworksPaginateResponseTypeDef = TypedDict(
    "DescribeClientVpnTargetNetworksPaginateResponseTypeDef",
    {
        "ClientVpnTargetNetworks": List[
            DescribeClientVpnTargetNetworksPaginateResponseClientVpnTargetNetworksTypeDef
        ]
    },
    total=False,
)

DescribeDhcpOptionsPaginateFiltersTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeDhcpOptionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeDhcpOptionsPaginateResponseDhcpOptionsDhcpConfigurationsValuesTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginateResponseDhcpOptionsDhcpConfigurationsValuesTypeDef",
    {"Value": str},
    total=False,
)

DescribeDhcpOptionsPaginateResponseDhcpOptionsDhcpConfigurationsTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginateResponseDhcpOptionsDhcpConfigurationsTypeDef",
    {
        "Key": str,
        "Values": List[
            DescribeDhcpOptionsPaginateResponseDhcpOptionsDhcpConfigurationsValuesTypeDef
        ],
    },
    total=False,
)

DescribeDhcpOptionsPaginateResponseDhcpOptionsTagsTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginateResponseDhcpOptionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeDhcpOptionsPaginateResponseDhcpOptionsTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginateResponseDhcpOptionsTypeDef",
    {
        "DhcpConfigurations": List[
            DescribeDhcpOptionsPaginateResponseDhcpOptionsDhcpConfigurationsTypeDef
        ],
        "DhcpOptionsId": str,
        "OwnerId": str,
        "Tags": List[DescribeDhcpOptionsPaginateResponseDhcpOptionsTagsTypeDef],
    },
    total=False,
)

DescribeDhcpOptionsPaginateResponseTypeDef = TypedDict(
    "DescribeDhcpOptionsPaginateResponseTypeDef",
    {"DhcpOptions": List[DescribeDhcpOptionsPaginateResponseDhcpOptionsTypeDef]},
    total=False,
)

DescribeEgressOnlyInternetGatewaysPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeEgressOnlyInternetGatewaysPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeEgressOnlyInternetGatewaysPaginateResponseEgressOnlyInternetGatewaysAttachmentsTypeDef = TypedDict(
    "DescribeEgressOnlyInternetGatewaysPaginateResponseEgressOnlyInternetGatewaysAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

DescribeEgressOnlyInternetGatewaysPaginateResponseEgressOnlyInternetGatewaysTypeDef = TypedDict(
    "DescribeEgressOnlyInternetGatewaysPaginateResponseEgressOnlyInternetGatewaysTypeDef",
    {
        "Attachments": List[
            DescribeEgressOnlyInternetGatewaysPaginateResponseEgressOnlyInternetGatewaysAttachmentsTypeDef
        ],
        "EgressOnlyInternetGatewayId": str,
    },
    total=False,
)

DescribeEgressOnlyInternetGatewaysPaginateResponseTypeDef = TypedDict(
    "DescribeEgressOnlyInternetGatewaysPaginateResponseTypeDef",
    {
        "EgressOnlyInternetGateways": List[
            DescribeEgressOnlyInternetGatewaysPaginateResponseEgressOnlyInternetGatewaysTypeDef
        ]
    },
    total=False,
)

DescribeExportImageTasksPaginateFiltersTypeDef = TypedDict(
    "DescribeExportImageTasksPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeExportImageTasksPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeExportImageTasksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeExportImageTasksPaginateResponseExportImageTasksS3ExportLocationTypeDef = TypedDict(
    "DescribeExportImageTasksPaginateResponseExportImageTasksS3ExportLocationTypeDef",
    {"S3Bucket": str, "S3Prefix": str},
    total=False,
)

DescribeExportImageTasksPaginateResponseExportImageTasksTypeDef = TypedDict(
    "DescribeExportImageTasksPaginateResponseExportImageTasksTypeDef",
    {
        "Description": str,
        "ExportImageTaskId": str,
        "ImageId": str,
        "Progress": str,
        "S3ExportLocation": DescribeExportImageTasksPaginateResponseExportImageTasksS3ExportLocationTypeDef,
        "Status": str,
        "StatusMessage": str,
    },
    total=False,
)

DescribeExportImageTasksPaginateResponseTypeDef = TypedDict(
    "DescribeExportImageTasksPaginateResponseTypeDef",
    {"ExportImageTasks": List[DescribeExportImageTasksPaginateResponseExportImageTasksTypeDef]},
    total=False,
)

DescribeFastSnapshotRestoresPaginateFiltersTypeDef = TypedDict(
    "DescribeFastSnapshotRestoresPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeFastSnapshotRestoresPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeFastSnapshotRestoresPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeFastSnapshotRestoresPaginateResponseFastSnapshotRestoresTypeDef = TypedDict(
    "DescribeFastSnapshotRestoresPaginateResponseFastSnapshotRestoresTypeDef",
    {
        "SnapshotId": str,
        "AvailabilityZone": str,
        "State": Literal["enabling", "optimizing", "enabled", "disabling", "disabled"],
        "StateTransitionReason": str,
        "OwnerId": str,
        "OwnerAlias": str,
        "EnablingTime": datetime,
        "OptimizingTime": datetime,
        "EnabledTime": datetime,
        "DisablingTime": datetime,
        "DisabledTime": datetime,
    },
    total=False,
)

DescribeFastSnapshotRestoresPaginateResponseTypeDef = TypedDict(
    "DescribeFastSnapshotRestoresPaginateResponseTypeDef",
    {
        "FastSnapshotRestores": List[
            DescribeFastSnapshotRestoresPaginateResponseFastSnapshotRestoresTypeDef
        ]
    },
    total=False,
)

DescribeFleetsPaginateFiltersTypeDef = TypedDict(
    "DescribeFleetsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeFleetsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeFleetsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesOverridesTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesOverridesPlacementTypeDef,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesTypeDef",
    {
        "LaunchTemplateSpecification": DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef,
        "Overrides": DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesOverridesTypeDef,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsErrorsTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsErrorsTypeDef",
    {
        "LaunchTemplateAndOverrides": DescribeFleetsPaginateResponseFleetsErrorsLaunchTemplateAndOverridesTypeDef,
        "Lifecycle": Literal["spot", "on-demand"],
        "ErrorCode": str,
        "ErrorMessage": str,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesOverridesTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesOverridesPlacementTypeDef,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesTypeDef",
    {
        "LaunchTemplateSpecification": DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesLaunchTemplateSpecificationTypeDef,
        "Overrides": DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesOverridesTypeDef,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsInstancesTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsInstancesTypeDef",
    {
        "LaunchTemplateAndOverrides": DescribeFleetsPaginateResponseFleetsInstancesLaunchTemplateAndOverridesTypeDef,
        "Lifecycle": Literal["spot", "on-demand"],
        "InstanceIds": List[str],
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Platform": str,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsOverridesPlacementTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsOverridesPlacementTypeDef",
    {"GroupName": str},
    total=False,
)

DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsOverridesTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "MaxPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
        "Placement": DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsOverridesPlacementTypeDef,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsTypeDef",
    {
        "LaunchTemplateSpecification": DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef,
        "Overrides": List[
            DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsOverridesTypeDef
        ],
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsOnDemandOptionsTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsOnDemandOptionsTypeDef",
    {
        "AllocationStrategy": Literal["lowest-price", "prioritized"],
        "SingleInstanceType": bool,
        "SingleAvailabilityZone": bool,
        "MinTargetCapacity": int,
        "MaxTotalPrice": str,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsSpotOptionsTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsSpotOptionsTypeDef",
    {
        "AllocationStrategy": Literal["lowest-price", "diversified", "capacity-optimized"],
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
        "InstancePoolsToUseCount": int,
        "SingleInstanceType": bool,
        "SingleAvailabilityZone": bool,
        "MinTargetCapacity": int,
        "MaxTotalPrice": str,
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsTagsTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DescribeFleetsPaginateResponseFleetsTargetCapacitySpecificationTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsTargetCapacitySpecificationTypeDef",
    {
        "TotalTargetCapacity": int,
        "OnDemandTargetCapacity": int,
        "SpotTargetCapacity": int,
        "DefaultTargetCapacityType": Literal["spot", "on-demand"],
    },
    total=False,
)

DescribeFleetsPaginateResponseFleetsTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseFleetsTypeDef",
    {
        "ActivityStatus": Literal[
            "error", "pending_fulfillment", "pending_termination", "fulfilled"
        ],
        "CreateTime": datetime,
        "FleetId": str,
        "FleetState": Literal[
            "submitted",
            "active",
            "deleted",
            "failed",
            "deleted_running",
            "deleted_terminating",
            "modifying",
        ],
        "ClientToken": str,
        "ExcessCapacityTerminationPolicy": Literal["no-termination", "termination"],
        "FulfilledCapacity": float,
        "FulfilledOnDemandCapacity": float,
        "LaunchTemplateConfigs": List[
            DescribeFleetsPaginateResponseFleetsLaunchTemplateConfigsTypeDef
        ],
        "TargetCapacitySpecification": DescribeFleetsPaginateResponseFleetsTargetCapacitySpecificationTypeDef,
        "TerminateInstancesWithExpiration": bool,
        "Type": Literal["request", "maintain", "instant"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "ReplaceUnhealthyInstances": bool,
        "SpotOptions": DescribeFleetsPaginateResponseFleetsSpotOptionsTypeDef,
        "OnDemandOptions": DescribeFleetsPaginateResponseFleetsOnDemandOptionsTypeDef,
        "Tags": List[DescribeFleetsPaginateResponseFleetsTagsTypeDef],
        "Errors": List[DescribeFleetsPaginateResponseFleetsErrorsTypeDef],
        "Instances": List[DescribeFleetsPaginateResponseFleetsInstancesTypeDef],
    },
    total=False,
)

DescribeFleetsPaginateResponseTypeDef = TypedDict(
    "DescribeFleetsPaginateResponseTypeDef",
    {"Fleets": List[DescribeFleetsPaginateResponseFleetsTypeDef]},
    total=False,
)

DescribeFlowLogsPaginateFiltersTypeDef = TypedDict(
    "DescribeFlowLogsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeFlowLogsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeFlowLogsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeFlowLogsPaginateResponseFlowLogsTypeDef = TypedDict(
    "DescribeFlowLogsPaginateResponseFlowLogsTypeDef",
    {
        "CreationTime": datetime,
        "DeliverLogsErrorMessage": str,
        "DeliverLogsPermissionArn": str,
        "DeliverLogsStatus": str,
        "FlowLogId": str,
        "FlowLogStatus": str,
        "LogGroupName": str,
        "ResourceId": str,
        "TrafficType": Literal["ACCEPT", "REJECT", "ALL"],
        "LogDestinationType": Literal["cloud-watch-logs", "s3"],
        "LogDestination": str,
        "LogFormat": str,
    },
    total=False,
)

DescribeFlowLogsPaginateResponseTypeDef = TypedDict(
    "DescribeFlowLogsPaginateResponseTypeDef",
    {"FlowLogs": List[DescribeFlowLogsPaginateResponseFlowLogsTypeDef]},
    total=False,
)

DescribeFpgaImagesPaginateFiltersTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeFpgaImagesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeFpgaImagesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeFpgaImagesPaginateResponseFpgaImagesPciIdTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateResponseFpgaImagesPciIdTypeDef",
    {"DeviceId": str, "VendorId": str, "SubsystemId": str, "SubsystemVendorId": str},
    total=False,
)

DescribeFpgaImagesPaginateResponseFpgaImagesProductCodesTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateResponseFpgaImagesProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

DescribeFpgaImagesPaginateResponseFpgaImagesStateTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateResponseFpgaImagesStateTypeDef",
    {"Code": Literal["pending", "failed", "available", "unavailable"], "Message": str},
    total=False,
)

DescribeFpgaImagesPaginateResponseFpgaImagesTagsTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateResponseFpgaImagesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeFpgaImagesPaginateResponseFpgaImagesTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateResponseFpgaImagesTypeDef",
    {
        "FpgaImageId": str,
        "FpgaImageGlobalId": str,
        "Name": str,
        "Description": str,
        "ShellVersion": str,
        "PciId": DescribeFpgaImagesPaginateResponseFpgaImagesPciIdTypeDef,
        "State": DescribeFpgaImagesPaginateResponseFpgaImagesStateTypeDef,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "OwnerId": str,
        "OwnerAlias": str,
        "ProductCodes": List[DescribeFpgaImagesPaginateResponseFpgaImagesProductCodesTypeDef],
        "Tags": List[DescribeFpgaImagesPaginateResponseFpgaImagesTagsTypeDef],
        "Public": bool,
        "DataRetentionSupport": bool,
    },
    total=False,
)

DescribeFpgaImagesPaginateResponseTypeDef = TypedDict(
    "DescribeFpgaImagesPaginateResponseTypeDef",
    {"FpgaImages": List[DescribeFpgaImagesPaginateResponseFpgaImagesTypeDef]},
    total=False,
)

DescribeHostReservationOfferingsPaginateFiltersTypeDef = TypedDict(
    "DescribeHostReservationOfferingsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeHostReservationOfferingsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeHostReservationOfferingsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeHostReservationOfferingsPaginateResponseOfferingSetTypeDef = TypedDict(
    "DescribeHostReservationOfferingsPaginateResponseOfferingSetTypeDef",
    {
        "CurrencyCode": str,
        "Duration": int,
        "HourlyPrice": str,
        "InstanceFamily": str,
        "OfferingId": str,
        "PaymentOption": Literal["AllUpfront", "PartialUpfront", "NoUpfront"],
        "UpfrontPrice": str,
    },
    total=False,
)

DescribeHostReservationOfferingsPaginateResponseTypeDef = TypedDict(
    "DescribeHostReservationOfferingsPaginateResponseTypeDef",
    {"OfferingSet": List[DescribeHostReservationOfferingsPaginateResponseOfferingSetTypeDef]},
    total=False,
)

DescribeHostReservationsPaginateFiltersTypeDef = TypedDict(
    "DescribeHostReservationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeHostReservationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeHostReservationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeHostReservationsPaginateResponseHostReservationSetTagsTypeDef = TypedDict(
    "DescribeHostReservationsPaginateResponseHostReservationSetTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeHostReservationsPaginateResponseHostReservationSetTypeDef = TypedDict(
    "DescribeHostReservationsPaginateResponseHostReservationSetTypeDef",
    {
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "End": datetime,
        "HostIdSet": List[str],
        "HostReservationId": str,
        "HourlyPrice": str,
        "InstanceFamily": str,
        "OfferingId": str,
        "PaymentOption": Literal["AllUpfront", "PartialUpfront", "NoUpfront"],
        "Start": datetime,
        "State": Literal["payment-pending", "payment-failed", "active", "retired"],
        "UpfrontPrice": str,
        "Tags": List[DescribeHostReservationsPaginateResponseHostReservationSetTagsTypeDef],
    },
    total=False,
)

DescribeHostReservationsPaginateResponseTypeDef = TypedDict(
    "DescribeHostReservationsPaginateResponseTypeDef",
    {"HostReservationSet": List[DescribeHostReservationsPaginateResponseHostReservationSetTypeDef]},
    total=False,
)

DescribeHostsPaginateFiltersTypeDef = TypedDict(
    "DescribeHostsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeHostsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeHostsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeHostsPaginateResponseHostsAvailableCapacityAvailableInstanceCapacityTypeDef = TypedDict(
    "DescribeHostsPaginateResponseHostsAvailableCapacityAvailableInstanceCapacityTypeDef",
    {"AvailableCapacity": int, "InstanceType": str, "TotalCapacity": int},
    total=False,
)

DescribeHostsPaginateResponseHostsAvailableCapacityTypeDef = TypedDict(
    "DescribeHostsPaginateResponseHostsAvailableCapacityTypeDef",
    {
        "AvailableInstanceCapacity": List[
            DescribeHostsPaginateResponseHostsAvailableCapacityAvailableInstanceCapacityTypeDef
        ],
        "AvailableVCpus": int,
    },
    total=False,
)

DescribeHostsPaginateResponseHostsHostPropertiesTypeDef = TypedDict(
    "DescribeHostsPaginateResponseHostsHostPropertiesTypeDef",
    {"Cores": int, "InstanceType": str, "InstanceFamily": str, "Sockets": int, "TotalVCpus": int},
    total=False,
)

DescribeHostsPaginateResponseHostsInstancesTypeDef = TypedDict(
    "DescribeHostsPaginateResponseHostsInstancesTypeDef",
    {"InstanceId": str, "InstanceType": str, "OwnerId": str},
    total=False,
)

DescribeHostsPaginateResponseHostsTagsTypeDef = TypedDict(
    "DescribeHostsPaginateResponseHostsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DescribeHostsPaginateResponseHostsTypeDef = TypedDict(
    "DescribeHostsPaginateResponseHostsTypeDef",
    {
        "AutoPlacement": Literal["on", "off"],
        "AvailabilityZone": str,
        "AvailableCapacity": DescribeHostsPaginateResponseHostsAvailableCapacityTypeDef,
        "ClientToken": str,
        "HostId": str,
        "HostProperties": DescribeHostsPaginateResponseHostsHostPropertiesTypeDef,
        "HostReservationId": str,
        "Instances": List[DescribeHostsPaginateResponseHostsInstancesTypeDef],
        "State": Literal[
            "available",
            "under-assessment",
            "permanent-failure",
            "released",
            "released-permanent-failure",
            "pending",
        ],
        "AllocationTime": datetime,
        "ReleaseTime": datetime,
        "Tags": List[DescribeHostsPaginateResponseHostsTagsTypeDef],
        "HostRecovery": Literal["on", "off"],
        "AllowsMultipleInstanceTypes": Literal["on", "off"],
        "OwnerId": str,
        "AvailabilityZoneId": str,
        "MemberOfServiceLinkedResourceGroup": bool,
    },
    total=False,
)

DescribeHostsPaginateResponseTypeDef = TypedDict(
    "DescribeHostsPaginateResponseTypeDef",
    {"Hosts": List[DescribeHostsPaginateResponseHostsTypeDef]},
    total=False,
)

DescribeIamInstanceProfileAssociationsPaginateFiltersTypeDef = TypedDict(
    "DescribeIamInstanceProfileAssociationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeIamInstanceProfileAssociationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeIamInstanceProfileAssociationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeIamInstanceProfileAssociationsPaginateResponseIamInstanceProfileAssociationsIamInstanceProfileTypeDef = TypedDict(
    "DescribeIamInstanceProfileAssociationsPaginateResponseIamInstanceProfileAssociationsIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

DescribeIamInstanceProfileAssociationsPaginateResponseIamInstanceProfileAssociationsTypeDef = TypedDict(
    "DescribeIamInstanceProfileAssociationsPaginateResponseIamInstanceProfileAssociationsTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "IamInstanceProfile": DescribeIamInstanceProfileAssociationsPaginateResponseIamInstanceProfileAssociationsIamInstanceProfileTypeDef,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
        "Timestamp": datetime,
    },
    total=False,
)

DescribeIamInstanceProfileAssociationsPaginateResponseTypeDef = TypedDict(
    "DescribeIamInstanceProfileAssociationsPaginateResponseTypeDef",
    {
        "IamInstanceProfileAssociations": List[
            DescribeIamInstanceProfileAssociationsPaginateResponseIamInstanceProfileAssociationsTypeDef
        ]
    },
    total=False,
)

DescribeImportImageTasksPaginateFiltersTypeDef = TypedDict(
    "DescribeImportImageTasksPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeImportImageTasksPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeImportImageTasksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeImportImageTasksPaginateResponseImportImageTasksLicenseSpecificationsTypeDef = TypedDict(
    "DescribeImportImageTasksPaginateResponseImportImageTasksLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

DescribeImportImageTasksPaginateResponseImportImageTasksSnapshotDetailsUserBucketTypeDef = TypedDict(
    "DescribeImportImageTasksPaginateResponseImportImageTasksSnapshotDetailsUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

DescribeImportImageTasksPaginateResponseImportImageTasksSnapshotDetailsTypeDef = TypedDict(
    "DescribeImportImageTasksPaginateResponseImportImageTasksSnapshotDetailsTypeDef",
    {
        "Description": str,
        "DeviceName": str,
        "DiskImageSize": float,
        "Format": str,
        "Progress": str,
        "SnapshotId": str,
        "Status": str,
        "StatusMessage": str,
        "Url": str,
        "UserBucket": DescribeImportImageTasksPaginateResponseImportImageTasksSnapshotDetailsUserBucketTypeDef,
    },
    total=False,
)

DescribeImportImageTasksPaginateResponseImportImageTasksTypeDef = TypedDict(
    "DescribeImportImageTasksPaginateResponseImportImageTasksTypeDef",
    {
        "Architecture": str,
        "Description": str,
        "Encrypted": bool,
        "Hypervisor": str,
        "ImageId": str,
        "ImportTaskId": str,
        "KmsKeyId": str,
        "LicenseType": str,
        "Platform": str,
        "Progress": str,
        "SnapshotDetails": List[
            DescribeImportImageTasksPaginateResponseImportImageTasksSnapshotDetailsTypeDef
        ],
        "Status": str,
        "StatusMessage": str,
        "LicenseSpecifications": List[
            DescribeImportImageTasksPaginateResponseImportImageTasksLicenseSpecificationsTypeDef
        ],
    },
    total=False,
)

DescribeImportImageTasksPaginateResponseTypeDef = TypedDict(
    "DescribeImportImageTasksPaginateResponseTypeDef",
    {"ImportImageTasks": List[DescribeImportImageTasksPaginateResponseImportImageTasksTypeDef]},
    total=False,
)

DescribeImportSnapshotTasksPaginateFiltersTypeDef = TypedDict(
    "DescribeImportSnapshotTasksPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeImportSnapshotTasksPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeImportSnapshotTasksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksSnapshotTaskDetailUserBucketTypeDef = TypedDict(
    "DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksSnapshotTaskDetailUserBucketTypeDef",
    {"S3Bucket": str, "S3Key": str},
    total=False,
)

DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksSnapshotTaskDetailTypeDef = TypedDict(
    "DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksSnapshotTaskDetailTypeDef",
    {
        "Description": str,
        "DiskImageSize": float,
        "Encrypted": bool,
        "Format": str,
        "KmsKeyId": str,
        "Progress": str,
        "SnapshotId": str,
        "Status": str,
        "StatusMessage": str,
        "Url": str,
        "UserBucket": DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksSnapshotTaskDetailUserBucketTypeDef,
    },
    total=False,
)

DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksTypeDef = TypedDict(
    "DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksTypeDef",
    {
        "Description": str,
        "ImportTaskId": str,
        "SnapshotTaskDetail": DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksSnapshotTaskDetailTypeDef,
    },
    total=False,
)

DescribeImportSnapshotTasksPaginateResponseTypeDef = TypedDict(
    "DescribeImportSnapshotTasksPaginateResponseTypeDef",
    {
        "ImportSnapshotTasks": List[
            DescribeImportSnapshotTasksPaginateResponseImportSnapshotTasksTypeDef
        ]
    },
    total=False,
)

DescribeInstanceCreditSpecificationsPaginateFiltersTypeDef = TypedDict(
    "DescribeInstanceCreditSpecificationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeInstanceCreditSpecificationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeInstanceCreditSpecificationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeInstanceCreditSpecificationsPaginateResponseInstanceCreditSpecificationsTypeDef = TypedDict(
    "DescribeInstanceCreditSpecificationsPaginateResponseInstanceCreditSpecificationsTypeDef",
    {"InstanceId": str, "CpuCredits": str},
    total=False,
)

DescribeInstanceCreditSpecificationsPaginateResponseTypeDef = TypedDict(
    "DescribeInstanceCreditSpecificationsPaginateResponseTypeDef",
    {
        "InstanceCreditSpecifications": List[
            DescribeInstanceCreditSpecificationsPaginateResponseInstanceCreditSpecificationsTypeDef
        ]
    },
    total=False,
)

DescribeInstanceStatusPaginateFiltersTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeInstanceStatusPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeInstanceStatusPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesEventsTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesEventsTypeDef",
    {
        "InstanceEventId": str,
        "Code": Literal[
            "instance-reboot",
            "system-reboot",
            "system-maintenance",
            "instance-retirement",
            "instance-stop",
        ],
        "Description": str,
        "NotAfter": datetime,
        "NotBefore": datetime,
        "NotBeforeDeadline": datetime,
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStateTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStatusDetailsTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStatusDetailsTypeDef",
    {
        "ImpairedSince": datetime,
        "Name": str,
        "Status": Literal["passed", "failed", "insufficient-data", "initializing"],
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStatusTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStatusTypeDef",
    {
        "Details": List[
            DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStatusDetailsTypeDef
        ],
        "Status": Literal["ok", "impaired", "insufficient-data", "not-applicable", "initializing"],
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesSystemStatusDetailsTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesSystemStatusDetailsTypeDef",
    {
        "ImpairedSince": datetime,
        "Name": str,
        "Status": Literal["passed", "failed", "insufficient-data", "initializing"],
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesSystemStatusTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesSystemStatusTypeDef",
    {
        "Details": List[
            DescribeInstanceStatusPaginateResponseInstanceStatusesSystemStatusDetailsTypeDef
        ],
        "Status": Literal["ok", "impaired", "insufficient-data", "not-applicable", "initializing"],
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseInstanceStatusesTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseInstanceStatusesTypeDef",
    {
        "AvailabilityZone": str,
        "OutpostArn": str,
        "Events": List[DescribeInstanceStatusPaginateResponseInstanceStatusesEventsTypeDef],
        "InstanceId": str,
        "InstanceState": DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStateTypeDef,
        "InstanceStatus": DescribeInstanceStatusPaginateResponseInstanceStatusesInstanceStatusTypeDef,
        "SystemStatus": DescribeInstanceStatusPaginateResponseInstanceStatusesSystemStatusTypeDef,
    },
    total=False,
)

DescribeInstanceStatusPaginateResponseTypeDef = TypedDict(
    "DescribeInstanceStatusPaginateResponseTypeDef",
    {"InstanceStatuses": List[DescribeInstanceStatusPaginateResponseInstanceStatusesTypeDef]},
    total=False,
)

DescribeInstancesPaginateFiltersTypeDef = TypedDict(
    "DescribeInstancesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeInstancesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeInstancesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsGroupsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesBlockDeviceMappingsEbsTypeDef",
    {
        "AttachTime": datetime,
        "DeleteOnTermination": bool,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
        "VolumeId": str,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesBlockDeviceMappingsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "Ebs": DescribeInstancesPaginateResponseReservationsInstancesBlockDeviceMappingsEbsTypeDef,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesCapacityReservationSpecificationTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": DescribeInstancesPaginateResponseReservationsInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesCpuOptionsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesElasticGpuAssociationsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesElasticGpuAssociationsTypeDef",
    {
        "ElasticGpuId": str,
        "ElasticGpuAssociationId": str,
        "ElasticGpuAssociationState": str,
        "ElasticGpuAssociationTime": str,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesElasticInferenceAcceleratorAssociationsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesElasticInferenceAcceleratorAssociationsTypeDef",
    {
        "ElasticInferenceAcceleratorArn": str,
        "ElasticInferenceAcceleratorAssociationId": str,
        "ElasticInferenceAcceleratorAssociationState": str,
        "ElasticInferenceAcceleratorAssociationTime": datetime,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesHibernationOptionsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesIamInstanceProfileTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesIamInstanceProfileTypeDef",
    {"Arn": str, "Id": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesLicensesTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesLicensesTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesMetadataOptionsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesMetadataOptionsTypeDef",
    {
        "State": Literal["pending", "applied"],
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesMonitoringTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesAssociationTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesAssociationTypeDef",
    {"IpOwnerId": str, "PublicDnsName": str, "PublicIp": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesAttachmentTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesGroupsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef",
    {"IpOwnerId": str, "PublicDnsName": str, "PublicIp": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesTypeDef",
    {
        "Association": DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesAssociationTypeDef,
        "Primary": bool,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesTypeDef",
    {
        "Association": DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesAssociationTypeDef,
        "Attachment": DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesAttachmentTypeDef,
        "Description": str,
        "Groups": List[
            DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesGroupsTypeDef
        ],
        "Ipv6Addresses": List[
            DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesIpv6AddressesTypeDef
        ],
        "MacAddress": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SourceDestCheck": bool,
        "Status": Literal["available", "associated", "attaching", "in-use", "detaching"],
        "SubnetId": str,
        "VpcId": str,
        "InterfaceType": str,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesPlacementTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesProductCodesTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesSecurityGroupsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesStateReasonTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesStateReasonTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesStateTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesTagsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeInstancesPaginateResponseReservationsInstancesTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsInstancesTypeDef",
    {
        "AmiLaunchIndex": int,
        "ImageId": str,
        "InstanceId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "LaunchTime": datetime,
        "Monitoring": DescribeInstancesPaginateResponseReservationsInstancesMonitoringTypeDef,
        "Placement": DescribeInstancesPaginateResponseReservationsInstancesPlacementTypeDef,
        "Platform": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "ProductCodes": List[
            DescribeInstancesPaginateResponseReservationsInstancesProductCodesTypeDef
        ],
        "PublicDnsName": str,
        "PublicIpAddress": str,
        "RamdiskId": str,
        "State": DescribeInstancesPaginateResponseReservationsInstancesStateTypeDef,
        "StateTransitionReason": str,
        "SubnetId": str,
        "VpcId": str,
        "Architecture": Literal["i386", "x86_64", "arm64"],
        "BlockDeviceMappings": List[
            DescribeInstancesPaginateResponseReservationsInstancesBlockDeviceMappingsTypeDef
        ],
        "ClientToken": str,
        "EbsOptimized": bool,
        "EnaSupport": bool,
        "Hypervisor": Literal["ovm", "xen"],
        "IamInstanceProfile": DescribeInstancesPaginateResponseReservationsInstancesIamInstanceProfileTypeDef,
        "InstanceLifecycle": Literal["spot", "scheduled"],
        "ElasticGpuAssociations": List[
            DescribeInstancesPaginateResponseReservationsInstancesElasticGpuAssociationsTypeDef
        ],
        "ElasticInferenceAcceleratorAssociations": List[
            DescribeInstancesPaginateResponseReservationsInstancesElasticInferenceAcceleratorAssociationsTypeDef
        ],
        "NetworkInterfaces": List[
            DescribeInstancesPaginateResponseReservationsInstancesNetworkInterfacesTypeDef
        ],
        "OutpostArn": str,
        "RootDeviceName": str,
        "RootDeviceType": Literal["ebs", "instance-store"],
        "SecurityGroups": List[
            DescribeInstancesPaginateResponseReservationsInstancesSecurityGroupsTypeDef
        ],
        "SourceDestCheck": bool,
        "SpotInstanceRequestId": str,
        "SriovNetSupport": str,
        "StateReason": DescribeInstancesPaginateResponseReservationsInstancesStateReasonTypeDef,
        "Tags": List[DescribeInstancesPaginateResponseReservationsInstancesTagsTypeDef],
        "VirtualizationType": Literal["hvm", "paravirtual"],
        "CpuOptions": DescribeInstancesPaginateResponseReservationsInstancesCpuOptionsTypeDef,
        "CapacityReservationId": str,
        "CapacityReservationSpecification": DescribeInstancesPaginateResponseReservationsInstancesCapacityReservationSpecificationTypeDef,
        "HibernationOptions": DescribeInstancesPaginateResponseReservationsInstancesHibernationOptionsTypeDef,
        "Licenses": List[DescribeInstancesPaginateResponseReservationsInstancesLicensesTypeDef],
        "MetadataOptions": DescribeInstancesPaginateResponseReservationsInstancesMetadataOptionsTypeDef,
    },
    total=False,
)

DescribeInstancesPaginateResponseReservationsTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseReservationsTypeDef",
    {
        "Groups": List[DescribeInstancesPaginateResponseReservationsGroupsTypeDef],
        "Instances": List[DescribeInstancesPaginateResponseReservationsInstancesTypeDef],
        "OwnerId": str,
        "RequesterId": str,
        "ReservationId": str,
    },
    total=False,
)

DescribeInstancesPaginateResponseTypeDef = TypedDict(
    "DescribeInstancesPaginateResponseTypeDef",
    {"Reservations": List[DescribeInstancesPaginateResponseReservationsTypeDef]},
    total=False,
)

DescribeInternetGatewaysPaginateFiltersTypeDef = TypedDict(
    "DescribeInternetGatewaysPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeInternetGatewaysPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeInternetGatewaysPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeInternetGatewaysPaginateResponseInternetGatewaysAttachmentsTypeDef = TypedDict(
    "DescribeInternetGatewaysPaginateResponseInternetGatewaysAttachmentsTypeDef",
    {"State": Literal["attaching", "attached", "detaching", "detached"], "VpcId": str},
    total=False,
)

DescribeInternetGatewaysPaginateResponseInternetGatewaysTagsTypeDef = TypedDict(
    "DescribeInternetGatewaysPaginateResponseInternetGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeInternetGatewaysPaginateResponseInternetGatewaysTypeDef = TypedDict(
    "DescribeInternetGatewaysPaginateResponseInternetGatewaysTypeDef",
    {
        "Attachments": List[
            DescribeInternetGatewaysPaginateResponseInternetGatewaysAttachmentsTypeDef
        ],
        "InternetGatewayId": str,
        "OwnerId": str,
        "Tags": List[DescribeInternetGatewaysPaginateResponseInternetGatewaysTagsTypeDef],
    },
    total=False,
)

DescribeInternetGatewaysPaginateResponseTypeDef = TypedDict(
    "DescribeInternetGatewaysPaginateResponseTypeDef",
    {"InternetGateways": List[DescribeInternetGatewaysPaginateResponseInternetGatewaysTypeDef]},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateFiltersTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeLaunchTemplateVersionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsEbsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsEbsTypeDef",
    {
        "Encrypted": bool,
        "DeleteOnTermination": bool,
        "Iops": int,
        "KmsKeyId": str,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCpuOptionsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCreditSpecificationTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCreditSpecificationTypeDef",
    {"CpuCredits": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataElasticGpuSpecificationsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataElasticGpuSpecificationsTypeDef",
    {"Type": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataElasticInferenceAcceleratorsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataElasticInferenceAcceleratorsTypeDef",
    {"Type": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataHibernationOptionsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataHibernationOptionsTypeDef",
    {"Configured": bool},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataIamInstanceProfileTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataLicenseSpecificationsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataMonitoringTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "InterfaceType": str,
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataPlacementTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTagsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTypeDef",
    {
        "KernelId": str,
        "EbsOptimized": bool,
        "IamInstanceProfile": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataIamInstanceProfileTypeDef,
        "BlockDeviceMappings": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataBlockDeviceMappingsTypeDef
        ],
        "NetworkInterfaces": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataNetworkInterfacesTypeDef
        ],
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KeyName": str,
        "Monitoring": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataMonitoringTypeDef,
        "Placement": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataPlacementTypeDef,
        "RamDiskId": str,
        "DisableApiTermination": bool,
        "InstanceInitiatedShutdownBehavior": Literal["stop", "terminate"],
        "UserData": str,
        "TagSpecifications": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTagSpecificationsTypeDef
        ],
        "ElasticGpuSpecifications": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataElasticGpuSpecificationsTypeDef
        ],
        "ElasticInferenceAccelerators": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataElasticInferenceAcceleratorsTypeDef
        ],
        "SecurityGroupIds": List[str],
        "SecurityGroups": List[str],
        "InstanceMarketOptions": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataInstanceMarketOptionsTypeDef,
        "CreditSpecification": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCreditSpecificationTypeDef,
        "CpuOptions": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCpuOptionsTypeDef,
        "CapacityReservationSpecification": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataCapacityReservationSpecificationTypeDef,
        "LicenseSpecifications": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataLicenseSpecificationsTypeDef
        ],
        "HibernationOptions": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataHibernationOptionsTypeDef,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "VersionNumber": int,
        "VersionDescription": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersion": bool,
        "LaunchTemplateData": DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsLaunchTemplateDataTypeDef,
    },
    total=False,
)

DescribeLaunchTemplateVersionsPaginateResponseTypeDef = TypedDict(
    "DescribeLaunchTemplateVersionsPaginateResponseTypeDef",
    {
        "LaunchTemplateVersions": List[
            DescribeLaunchTemplateVersionsPaginateResponseLaunchTemplateVersionsTypeDef
        ]
    },
    total=False,
)

DescribeLaunchTemplatesPaginateFiltersTypeDef = TypedDict(
    "DescribeLaunchTemplatesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeLaunchTemplatesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeLaunchTemplatesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeLaunchTemplatesPaginateResponseLaunchTemplatesTagsTypeDef = TypedDict(
    "DescribeLaunchTemplatesPaginateResponseLaunchTemplatesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeLaunchTemplatesPaginateResponseLaunchTemplatesTypeDef = TypedDict(
    "DescribeLaunchTemplatesPaginateResponseLaunchTemplatesTypeDef",
    {
        "LaunchTemplateId": str,
        "LaunchTemplateName": str,
        "CreateTime": datetime,
        "CreatedBy": str,
        "DefaultVersionNumber": int,
        "LatestVersionNumber": int,
        "Tags": List[DescribeLaunchTemplatesPaginateResponseLaunchTemplatesTagsTypeDef],
    },
    total=False,
)

DescribeLaunchTemplatesPaginateResponseTypeDef = TypedDict(
    "DescribeLaunchTemplatesPaginateResponseTypeDef",
    {"LaunchTemplates": List[DescribeLaunchTemplatesPaginateResponseLaunchTemplatesTypeDef]},
    total=False,
)

DescribeMovingAddressesPaginateFiltersTypeDef = TypedDict(
    "DescribeMovingAddressesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeMovingAddressesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeMovingAddressesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeMovingAddressesPaginateResponseMovingAddressStatusesTypeDef = TypedDict(
    "DescribeMovingAddressesPaginateResponseMovingAddressStatusesTypeDef",
    {"MoveStatus": Literal["movingToVpc", "restoringToClassic"], "PublicIp": str},
    total=False,
)

DescribeMovingAddressesPaginateResponseTypeDef = TypedDict(
    "DescribeMovingAddressesPaginateResponseTypeDef",
    {
        "MovingAddressStatuses": List[
            DescribeMovingAddressesPaginateResponseMovingAddressStatusesTypeDef
        ]
    },
    total=False,
)

DescribeNatGatewaysPaginateFiltersTypeDef = TypedDict(
    "DescribeNatGatewaysPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeNatGatewaysPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeNatGatewaysPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeNatGatewaysPaginateResponseNatGatewaysNatGatewayAddressesTypeDef = TypedDict(
    "DescribeNatGatewaysPaginateResponseNatGatewaysNatGatewayAddressesTypeDef",
    {"AllocationId": str, "NetworkInterfaceId": str, "PrivateIp": str, "PublicIp": str},
    total=False,
)

DescribeNatGatewaysPaginateResponseNatGatewaysProvisionedBandwidthTypeDef = TypedDict(
    "DescribeNatGatewaysPaginateResponseNatGatewaysProvisionedBandwidthTypeDef",
    {
        "ProvisionTime": datetime,
        "Provisioned": str,
        "RequestTime": datetime,
        "Requested": str,
        "Status": str,
    },
    total=False,
)

DescribeNatGatewaysPaginateResponseNatGatewaysTagsTypeDef = TypedDict(
    "DescribeNatGatewaysPaginateResponseNatGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeNatGatewaysPaginateResponseNatGatewaysTypeDef = TypedDict(
    "DescribeNatGatewaysPaginateResponseNatGatewaysTypeDef",
    {
        "CreateTime": datetime,
        "DeleteTime": datetime,
        "FailureCode": str,
        "FailureMessage": str,
        "NatGatewayAddresses": List[
            DescribeNatGatewaysPaginateResponseNatGatewaysNatGatewayAddressesTypeDef
        ],
        "NatGatewayId": str,
        "ProvisionedBandwidth": DescribeNatGatewaysPaginateResponseNatGatewaysProvisionedBandwidthTypeDef,
        "State": Literal["pending", "failed", "available", "deleting", "deleted"],
        "SubnetId": str,
        "VpcId": str,
        "Tags": List[DescribeNatGatewaysPaginateResponseNatGatewaysTagsTypeDef],
    },
    total=False,
)

DescribeNatGatewaysPaginateResponseTypeDef = TypedDict(
    "DescribeNatGatewaysPaginateResponseTypeDef",
    {"NatGateways": List[DescribeNatGatewaysPaginateResponseNatGatewaysTypeDef]},
    total=False,
)

DescribeNetworkAclsPaginateFiltersTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeNetworkAclsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeNetworkAclsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeNetworkAclsPaginateResponseNetworkAclsAssociationsTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseNetworkAclsAssociationsTypeDef",
    {"NetworkAclAssociationId": str, "NetworkAclId": str, "SubnetId": str},
    total=False,
)

DescribeNetworkAclsPaginateResponseNetworkAclsEntriesIcmpTypeCodeTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseNetworkAclsEntriesIcmpTypeCodeTypeDef",
    {"Code": int, "Type": int},
    total=False,
)

DescribeNetworkAclsPaginateResponseNetworkAclsEntriesPortRangeTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseNetworkAclsEntriesPortRangeTypeDef",
    {"From": int, "To": int},
    total=False,
)

DescribeNetworkAclsPaginateResponseNetworkAclsEntriesTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseNetworkAclsEntriesTypeDef",
    {
        "CidrBlock": str,
        "Egress": bool,
        "IcmpTypeCode": DescribeNetworkAclsPaginateResponseNetworkAclsEntriesIcmpTypeCodeTypeDef,
        "Ipv6CidrBlock": str,
        "PortRange": DescribeNetworkAclsPaginateResponseNetworkAclsEntriesPortRangeTypeDef,
        "Protocol": str,
        "RuleAction": Literal["allow", "deny"],
        "RuleNumber": int,
    },
    total=False,
)

DescribeNetworkAclsPaginateResponseNetworkAclsTagsTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseNetworkAclsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeNetworkAclsPaginateResponseNetworkAclsTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseNetworkAclsTypeDef",
    {
        "Associations": List[DescribeNetworkAclsPaginateResponseNetworkAclsAssociationsTypeDef],
        "Entries": List[DescribeNetworkAclsPaginateResponseNetworkAclsEntriesTypeDef],
        "IsDefault": bool,
        "NetworkAclId": str,
        "Tags": List[DescribeNetworkAclsPaginateResponseNetworkAclsTagsTypeDef],
        "VpcId": str,
        "OwnerId": str,
    },
    total=False,
)

DescribeNetworkAclsPaginateResponseTypeDef = TypedDict(
    "DescribeNetworkAclsPaginateResponseTypeDef",
    {"NetworkAcls": List[DescribeNetworkAclsPaginateResponseNetworkAclsTypeDef]},
    total=False,
)

DescribeNetworkInterfacePermissionsPaginateFiltersTypeDef = TypedDict(
    "DescribeNetworkInterfacePermissionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeNetworkInterfacePermissionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeNetworkInterfacePermissionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeNetworkInterfacePermissionsPaginateResponseNetworkInterfacePermissionsPermissionStateTypeDef = TypedDict(
    "DescribeNetworkInterfacePermissionsPaginateResponseNetworkInterfacePermissionsPermissionStateTypeDef",
    {"State": Literal["pending", "granted", "revoking", "revoked"], "StatusMessage": str},
    total=False,
)

DescribeNetworkInterfacePermissionsPaginateResponseNetworkInterfacePermissionsTypeDef = TypedDict(
    "DescribeNetworkInterfacePermissionsPaginateResponseNetworkInterfacePermissionsTypeDef",
    {
        "NetworkInterfacePermissionId": str,
        "NetworkInterfaceId": str,
        "AwsAccountId": str,
        "AwsService": str,
        "Permission": Literal["INSTANCE-ATTACH", "EIP-ASSOCIATE"],
        "PermissionState": DescribeNetworkInterfacePermissionsPaginateResponseNetworkInterfacePermissionsPermissionStateTypeDef,
    },
    total=False,
)

DescribeNetworkInterfacePermissionsPaginateResponseTypeDef = TypedDict(
    "DescribeNetworkInterfacePermissionsPaginateResponseTypeDef",
    {
        "NetworkInterfacePermissions": List[
            DescribeNetworkInterfacePermissionsPaginateResponseNetworkInterfacePermissionsTypeDef
        ]
    },
    total=False,
)

DescribeNetworkInterfacesPaginateFiltersTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeNetworkInterfacesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesAssociationTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesAssociationTypeDef",
    {
        "AllocationId": str,
        "AssociationId": str,
        "IpOwnerId": str,
        "PublicDnsName": str,
        "PublicIp": str,
    },
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesAttachmentTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesGroupsTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesPrivateIpAddressesAssociationTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesPrivateIpAddressesAssociationTypeDef",
    {
        "AllocationId": str,
        "AssociationId": str,
        "IpOwnerId": str,
        "PublicDnsName": str,
        "PublicIp": str,
    },
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesPrivateIpAddressesTypeDef",
    {
        "Association": DescribeNetworkInterfacesPaginateResponseNetworkInterfacesPrivateIpAddressesAssociationTypeDef,
        "Primary": bool,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
    },
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesTagSetTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesTagSetTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeNetworkInterfacesPaginateResponseNetworkInterfacesTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseNetworkInterfacesTypeDef",
    {
        "Association": DescribeNetworkInterfacesPaginateResponseNetworkInterfacesAssociationTypeDef,
        "Attachment": DescribeNetworkInterfacesPaginateResponseNetworkInterfacesAttachmentTypeDef,
        "AvailabilityZone": str,
        "Description": str,
        "Groups": List[DescribeNetworkInterfacesPaginateResponseNetworkInterfacesGroupsTypeDef],
        "InterfaceType": Literal["interface", "natGateway", "efa"],
        "Ipv6Addresses": List[
            DescribeNetworkInterfacesPaginateResponseNetworkInterfacesIpv6AddressesTypeDef
        ],
        "MacAddress": str,
        "NetworkInterfaceId": str,
        "OutpostArn": str,
        "OwnerId": str,
        "PrivateDnsName": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            DescribeNetworkInterfacesPaginateResponseNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "RequesterId": str,
        "RequesterManaged": bool,
        "SourceDestCheck": bool,
        "Status": Literal["available", "associated", "attaching", "in-use", "detaching"],
        "SubnetId": str,
        "TagSet": List[DescribeNetworkInterfacesPaginateResponseNetworkInterfacesTagSetTypeDef],
        "VpcId": str,
    },
    total=False,
)

DescribeNetworkInterfacesPaginateResponseTypeDef = TypedDict(
    "DescribeNetworkInterfacesPaginateResponseTypeDef",
    {"NetworkInterfaces": List[DescribeNetworkInterfacesPaginateResponseNetworkInterfacesTypeDef]},
    total=False,
)

DescribePrefixListsPaginateFiltersTypeDef = TypedDict(
    "DescribePrefixListsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribePrefixListsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribePrefixListsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribePrefixListsPaginateResponsePrefixListsTypeDef = TypedDict(
    "DescribePrefixListsPaginateResponsePrefixListsTypeDef",
    {"Cidrs": List[str], "PrefixListId": str, "PrefixListName": str},
    total=False,
)

DescribePrefixListsPaginateResponseTypeDef = TypedDict(
    "DescribePrefixListsPaginateResponseTypeDef",
    {"PrefixLists": List[DescribePrefixListsPaginateResponsePrefixListsTypeDef]},
    total=False,
)

DescribePrincipalIdFormatPaginatePaginationConfigTypeDef = TypedDict(
    "DescribePrincipalIdFormatPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribePrincipalIdFormatPaginateResponsePrincipalsStatusesTypeDef = TypedDict(
    "DescribePrincipalIdFormatPaginateResponsePrincipalsStatusesTypeDef",
    {"Deadline": datetime, "Resource": str, "UseLongIds": bool},
    total=False,
)

DescribePrincipalIdFormatPaginateResponsePrincipalsTypeDef = TypedDict(
    "DescribePrincipalIdFormatPaginateResponsePrincipalsTypeDef",
    {
        "Arn": str,
        "Statuses": List[DescribePrincipalIdFormatPaginateResponsePrincipalsStatusesTypeDef],
    },
    total=False,
)

DescribePrincipalIdFormatPaginateResponseTypeDef = TypedDict(
    "DescribePrincipalIdFormatPaginateResponseTypeDef",
    {"Principals": List[DescribePrincipalIdFormatPaginateResponsePrincipalsTypeDef]},
    total=False,
)

DescribePublicIpv4PoolsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribePublicIpv4PoolsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribePublicIpv4PoolsPaginateResponsePublicIpv4PoolsPoolAddressRangesTypeDef = TypedDict(
    "DescribePublicIpv4PoolsPaginateResponsePublicIpv4PoolsPoolAddressRangesTypeDef",
    {"FirstAddress": str, "LastAddress": str, "AddressCount": int, "AvailableAddressCount": int},
    total=False,
)

DescribePublicIpv4PoolsPaginateResponsePublicIpv4PoolsTypeDef = TypedDict(
    "DescribePublicIpv4PoolsPaginateResponsePublicIpv4PoolsTypeDef",
    {
        "PoolId": str,
        "Description": str,
        "PoolAddressRanges": List[
            DescribePublicIpv4PoolsPaginateResponsePublicIpv4PoolsPoolAddressRangesTypeDef
        ],
        "TotalAddressCount": int,
        "TotalAvailableAddressCount": int,
    },
    total=False,
)

DescribePublicIpv4PoolsPaginateResponseTypeDef = TypedDict(
    "DescribePublicIpv4PoolsPaginateResponseTypeDef",
    {"PublicIpv4Pools": List[DescribePublicIpv4PoolsPaginateResponsePublicIpv4PoolsTypeDef]},
    total=False,
)

DescribeReservedInstancesModificationsPaginateFiltersTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeReservedInstancesModificationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsModificationResultsTargetConfigurationTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsModificationResultsTargetConfigurationTypeDef",
    {
        "AvailabilityZone": str,
        "InstanceCount": int,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "Platform": str,
        "Scope": Literal["Availability Zone", "Region"],
    },
    total=False,
)

DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsModificationResultsTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsModificationResultsTypeDef",
    {
        "ReservedInstancesId": str,
        "TargetConfiguration": DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsModificationResultsTargetConfigurationTypeDef,
    },
    total=False,
)

DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsReservedInstancesIdsTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsReservedInstancesIdsTypeDef",
    {"ReservedInstancesId": str},
    total=False,
)

DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsTypeDef",
    {
        "ClientToken": str,
        "CreateDate": datetime,
        "EffectiveDate": datetime,
        "ModificationResults": List[
            DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsModificationResultsTypeDef
        ],
        "ReservedInstancesIds": List[
            DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsReservedInstancesIdsTypeDef
        ],
        "ReservedInstancesModificationId": str,
        "Status": str,
        "StatusMessage": str,
        "UpdateDate": datetime,
    },
    total=False,
)

DescribeReservedInstancesModificationsPaginateResponseTypeDef = TypedDict(
    "DescribeReservedInstancesModificationsPaginateResponseTypeDef",
    {
        "ReservedInstancesModifications": List[
            DescribeReservedInstancesModificationsPaginateResponseReservedInstancesModificationsTypeDef
        ]
    },
    total=False,
)

DescribeReservedInstancesOfferingsPaginateFiltersTypeDef = TypedDict(
    "DescribeReservedInstancesOfferingsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeReservedInstancesOfferingsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeReservedInstancesOfferingsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsPricingDetailsTypeDef = TypedDict(
    "DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsPricingDetailsTypeDef",
    {"Count": int, "Price": float},
    total=False,
)

DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsRecurringChargesTypeDef = TypedDict(
    "DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsRecurringChargesTypeDef",
    {"Amount": float, "Frequency": str},
    total=False,
)

DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsTypeDef = TypedDict(
    "DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsTypeDef",
    {
        "AvailabilityZone": str,
        "Duration": int,
        "FixedPrice": Any,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "ReservedInstancesOfferingId": str,
        "UsagePrice": Any,
        "CurrencyCode": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "Marketplace": bool,
        "OfferingClass": Literal["standard", "convertible"],
        "OfferingType": Literal[
            "Heavy Utilization",
            "Medium Utilization",
            "Light Utilization",
            "No Upfront",
            "Partial Upfront",
            "All Upfront",
        ],
        "PricingDetails": List[
            DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsPricingDetailsTypeDef
        ],
        "RecurringCharges": List[
            DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsRecurringChargesTypeDef
        ],
        "Scope": Literal["Availability Zone", "Region"],
    },
    total=False,
)

DescribeReservedInstancesOfferingsPaginateResponseTypeDef = TypedDict(
    "DescribeReservedInstancesOfferingsPaginateResponseTypeDef",
    {
        "ReservedInstancesOfferings": List[
            DescribeReservedInstancesOfferingsPaginateResponseReservedInstancesOfferingsTypeDef
        ]
    },
    total=False,
)

DescribeRouteTablesPaginateFiltersTypeDef = TypedDict(
    "DescribeRouteTablesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeRouteTablesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeRouteTablesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeRouteTablesPaginateResponseRouteTablesAssociationsAssociationStateTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseRouteTablesAssociationsAssociationStateTypeDef",
    {
        "State": Literal["associating", "associated", "disassociating", "disassociated", "failed"],
        "StatusMessage": str,
    },
    total=False,
)

DescribeRouteTablesPaginateResponseRouteTablesAssociationsTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseRouteTablesAssociationsTypeDef",
    {
        "Main": bool,
        "RouteTableAssociationId": str,
        "RouteTableId": str,
        "SubnetId": str,
        "GatewayId": str,
        "AssociationState": DescribeRouteTablesPaginateResponseRouteTablesAssociationsAssociationStateTypeDef,
    },
    total=False,
)

DescribeRouteTablesPaginateResponseRouteTablesPropagatingVgwsTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseRouteTablesPropagatingVgwsTypeDef",
    {"GatewayId": str},
    total=False,
)

DescribeRouteTablesPaginateResponseRouteTablesRoutesTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseRouteTablesRoutesTypeDef",
    {
        "DestinationCidrBlock": str,
        "DestinationIpv6CidrBlock": str,
        "DestinationPrefixListId": str,
        "EgressOnlyInternetGatewayId": str,
        "GatewayId": str,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "NatGatewayId": str,
        "TransitGatewayId": str,
        "LocalGatewayId": str,
        "NetworkInterfaceId": str,
        "Origin": Literal["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"],
        "State": Literal["active", "blackhole"],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

DescribeRouteTablesPaginateResponseRouteTablesTagsTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseRouteTablesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeRouteTablesPaginateResponseRouteTablesTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseRouteTablesTypeDef",
    {
        "Associations": List[DescribeRouteTablesPaginateResponseRouteTablesAssociationsTypeDef],
        "PropagatingVgws": List[
            DescribeRouteTablesPaginateResponseRouteTablesPropagatingVgwsTypeDef
        ],
        "RouteTableId": str,
        "Routes": List[DescribeRouteTablesPaginateResponseRouteTablesRoutesTypeDef],
        "Tags": List[DescribeRouteTablesPaginateResponseRouteTablesTagsTypeDef],
        "VpcId": str,
        "OwnerId": str,
    },
    total=False,
)

DescribeRouteTablesPaginateResponseTypeDef = TypedDict(
    "DescribeRouteTablesPaginateResponseTypeDef",
    {"RouteTables": List[DescribeRouteTablesPaginateResponseRouteTablesTypeDef]},
    total=False,
)

DescribeScheduledInstanceAvailabilityPaginateFiltersTypeDef = TypedDict(
    "DescribeScheduledInstanceAvailabilityPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

_RequiredDescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef = TypedDict(
    "_RequiredDescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef",
    {"EarliestTime": datetime},
)
_OptionalDescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef = TypedDict(
    "_OptionalDescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef",
    {"LatestTime": datetime},
    total=False,
)


class DescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef(
    _RequiredDescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef,
    _OptionalDescribeScheduledInstanceAvailabilityPaginateFirstSlotStartTimeRangeTypeDef,
):
    pass


DescribeScheduledInstanceAvailabilityPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeScheduledInstanceAvailabilityPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeScheduledInstanceAvailabilityPaginateRecurrenceTypeDef = TypedDict(
    "DescribeScheduledInstanceAvailabilityPaginateRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDays": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

DescribeScheduledInstanceAvailabilityPaginateResponseScheduledInstanceAvailabilitySetRecurrenceTypeDef = TypedDict(
    "DescribeScheduledInstanceAvailabilityPaginateResponseScheduledInstanceAvailabilitySetRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDaySet": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

DescribeScheduledInstanceAvailabilityPaginateResponseScheduledInstanceAvailabilitySetTypeDef = TypedDict(
    "DescribeScheduledInstanceAvailabilityPaginateResponseScheduledInstanceAvailabilitySetTypeDef",
    {
        "AvailabilityZone": str,
        "AvailableInstanceCount": int,
        "FirstSlotStartTime": datetime,
        "HourlyPrice": str,
        "InstanceType": str,
        "MaxTermDurationInDays": int,
        "MinTermDurationInDays": int,
        "NetworkPlatform": str,
        "Platform": str,
        "PurchaseToken": str,
        "Recurrence": DescribeScheduledInstanceAvailabilityPaginateResponseScheduledInstanceAvailabilitySetRecurrenceTypeDef,
        "SlotDurationInHours": int,
        "TotalScheduledInstanceHours": int,
    },
    total=False,
)

DescribeScheduledInstanceAvailabilityPaginateResponseTypeDef = TypedDict(
    "DescribeScheduledInstanceAvailabilityPaginateResponseTypeDef",
    {
        "ScheduledInstanceAvailabilitySet": List[
            DescribeScheduledInstanceAvailabilityPaginateResponseScheduledInstanceAvailabilitySetTypeDef
        ]
    },
    total=False,
)

DescribeScheduledInstancesPaginateFiltersTypeDef = TypedDict(
    "DescribeScheduledInstancesPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeScheduledInstancesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeScheduledInstancesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeScheduledInstancesPaginateResponseScheduledInstanceSetRecurrenceTypeDef = TypedDict(
    "DescribeScheduledInstancesPaginateResponseScheduledInstanceSetRecurrenceTypeDef",
    {
        "Frequency": str,
        "Interval": int,
        "OccurrenceDaySet": List[int],
        "OccurrenceRelativeToEnd": bool,
        "OccurrenceUnit": str,
    },
    total=False,
)

DescribeScheduledInstancesPaginateResponseScheduledInstanceSetTypeDef = TypedDict(
    "DescribeScheduledInstancesPaginateResponseScheduledInstanceSetTypeDef",
    {
        "AvailabilityZone": str,
        "CreateDate": datetime,
        "HourlyPrice": str,
        "InstanceCount": int,
        "InstanceType": str,
        "NetworkPlatform": str,
        "NextSlotStartTime": datetime,
        "Platform": str,
        "PreviousSlotEndTime": datetime,
        "Recurrence": DescribeScheduledInstancesPaginateResponseScheduledInstanceSetRecurrenceTypeDef,
        "ScheduledInstanceId": str,
        "SlotDurationInHours": int,
        "TermEndDate": datetime,
        "TermStartDate": datetime,
        "TotalScheduledInstanceHours": int,
    },
    total=False,
)

DescribeScheduledInstancesPaginateResponseTypeDef = TypedDict(
    "DescribeScheduledInstancesPaginateResponseTypeDef",
    {
        "ScheduledInstanceSet": List[
            DescribeScheduledInstancesPaginateResponseScheduledInstanceSetTypeDef
        ]
    },
    total=False,
)

DescribeScheduledInstancesPaginateSlotStartTimeRangeTypeDef = TypedDict(
    "DescribeScheduledInstancesPaginateSlotStartTimeRangeTypeDef",
    {"EarliestTime": datetime, "LatestTime": datetime},
    total=False,
)

DescribeSecurityGroupsPaginateFiltersTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeSecurityGroupsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressIpRangesTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressIpv6RangesTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressPrefixListIdsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressUserIdGroupPairsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressIpRangesTypeDef
        ],
        "Ipv6Ranges": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressIpv6RangesTypeDef
        ],
        "PrefixListIds": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressPrefixListIdsTypeDef
        ],
        "ToPort": int,
        "UserIdGroupPairs": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsIpRangesTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsIpv6RangesTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsIpRangesTypeDef
        ],
        "Ipv6Ranges": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsIpv6RangesTypeDef
        ],
        "PrefixListIds": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsPrefixListIdsTypeDef
        ],
        "ToPort": int,
        "UserIdGroupPairs": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsTagsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeSecurityGroupsPaginateResponseSecurityGroupsTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseSecurityGroupsTypeDef",
    {
        "Description": str,
        "GroupName": str,
        "IpPermissions": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsTypeDef
        ],
        "OwnerId": str,
        "GroupId": str,
        "IpPermissionsEgress": List[
            DescribeSecurityGroupsPaginateResponseSecurityGroupsIpPermissionsEgressTypeDef
        ],
        "Tags": List[DescribeSecurityGroupsPaginateResponseSecurityGroupsTagsTypeDef],
        "VpcId": str,
    },
    total=False,
)

DescribeSecurityGroupsPaginateResponseTypeDef = TypedDict(
    "DescribeSecurityGroupsPaginateResponseTypeDef",
    {"SecurityGroups": List[DescribeSecurityGroupsPaginateResponseSecurityGroupsTypeDef]},
    total=False,
)

DescribeSnapshotsPaginateFiltersTypeDef = TypedDict(
    "DescribeSnapshotsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeSnapshotsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSnapshotsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSnapshotsPaginateResponseSnapshotsTagsTypeDef = TypedDict(
    "DescribeSnapshotsPaginateResponseSnapshotsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DescribeSnapshotsPaginateResponseSnapshotsTypeDef = TypedDict(
    "DescribeSnapshotsPaginateResponseSnapshotsTypeDef",
    {
        "DataEncryptionKeyId": str,
        "Description": str,
        "Encrypted": bool,
        "KmsKeyId": str,
        "OwnerId": str,
        "Progress": str,
        "SnapshotId": str,
        "StartTime": datetime,
        "State": Literal["pending", "completed", "error"],
        "StateMessage": str,
        "VolumeId": str,
        "VolumeSize": int,
        "OwnerAlias": str,
        "Tags": List[DescribeSnapshotsPaginateResponseSnapshotsTagsTypeDef],
    },
    total=False,
)

DescribeSnapshotsPaginateResponseTypeDef = TypedDict(
    "DescribeSnapshotsPaginateResponseTypeDef",
    {"Snapshots": List[DescribeSnapshotsPaginateResponseSnapshotsTypeDef]},
    total=False,
)

DescribeSpotFleetInstancesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSpotFleetInstancesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSpotFleetInstancesPaginateResponseActiveInstancesTypeDef = TypedDict(
    "DescribeSpotFleetInstancesPaginateResponseActiveInstancesTypeDef",
    {
        "InstanceId": str,
        "InstanceType": str,
        "SpotInstanceRequestId": str,
        "InstanceHealth": Literal["healthy", "unhealthy"],
    },
    total=False,
)

DescribeSpotFleetInstancesPaginateResponseTypeDef = TypedDict(
    "DescribeSpotFleetInstancesPaginateResponseTypeDef",
    {
        "ActiveInstances": List[DescribeSpotFleetInstancesPaginateResponseActiveInstancesTypeDef],
        "SpotFleetRequestId": str,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTagsTypeDef
        ],
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTypeDef",
    {
        "SecurityGroups": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsSecurityGroupsTypeDef
        ],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "Monitoring": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsMonitoringTypeDef,
        "NetworkInterfaces": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsNetworkInterfacesTypeDef
        ],
        "Placement": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsPlacementTypeDef,
        "RamdiskId": str,
        "SpotPrice": str,
        "SubnetId": str,
        "UserData": str,
        "WeightedCapacity": float,
        "TagSpecifications": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTagSpecificationsTypeDef
        ],
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef",
    {
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "SpotPrice": str,
        "SubnetId": str,
        "AvailabilityZone": str,
        "WeightedCapacity": float,
        "Priority": float,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsTypeDef",
    {
        "LaunchTemplateSpecification": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsLaunchTemplateSpecificationTypeDef,
        "Overrides": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsOverridesTypeDef
        ],
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef",
    {"Name": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef",
    {
        "ClassicLoadBalancers": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigClassicLoadBalancersTypeDef
        ]
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef",
    {"Arn": str},
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef",
    {
        "TargetGroups": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTargetGroupsTypeDef
        ]
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTypeDef",
    {
        "ClassicLoadBalancersConfig": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigClassicLoadBalancersConfigTypeDef,
        "TargetGroupsConfig": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTargetGroupsConfigTypeDef,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigTypeDef",
    {
        "AllocationStrategy": Literal["lowestPrice", "diversified", "capacityOptimized"],
        "OnDemandAllocationStrategy": Literal["lowestPrice", "prioritized"],
        "ClientToken": str,
        "ExcessCapacityTerminationPolicy": Literal["noTermination", "default"],
        "FulfilledCapacity": float,
        "OnDemandFulfilledCapacity": float,
        "IamFleetRole": str,
        "LaunchSpecifications": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchSpecificationsTypeDef
        ],
        "LaunchTemplateConfigs": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLaunchTemplateConfigsTypeDef
        ],
        "SpotPrice": str,
        "TargetCapacity": int,
        "OnDemandTargetCapacity": int,
        "OnDemandMaxTotalPrice": str,
        "SpotMaxTotalPrice": str,
        "TerminateInstancesWithExpiration": bool,
        "Type": Literal["request", "maintain", "instant"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "ReplaceUnhealthyInstances": bool,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
        "LoadBalancersConfig": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigLoadBalancersConfigTypeDef,
        "InstancePoolsToUseCount": int,
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsTypeDef",
    {
        "ActivityStatus": Literal[
            "error", "pending_fulfillment", "pending_termination", "fulfilled"
        ],
        "CreateTime": datetime,
        "SpotFleetRequestConfig": DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsSpotFleetRequestConfigTypeDef,
        "SpotFleetRequestId": str,
        "SpotFleetRequestState": Literal[
            "submitted",
            "active",
            "cancelled",
            "failed",
            "cancelled_running",
            "cancelled_terminating",
            "modifying",
        ],
    },
    total=False,
)

DescribeSpotFleetRequestsPaginateResponseTypeDef = TypedDict(
    "DescribeSpotFleetRequestsPaginateResponseTypeDef",
    {
        "SpotFleetRequestConfigs": List[
            DescribeSpotFleetRequestsPaginateResponseSpotFleetRequestConfigsTypeDef
        ]
    },
    total=False,
)

DescribeSpotInstanceRequestsPaginateFiltersTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeSpotInstanceRequestsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsFaultTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsFaultTypeDef",
    {"Code": str, "Message": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef",
    {"Enabled": bool},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[
            DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesIpv6AddressesTypeDef
        ],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef",
    {"AvailabilityZone": str, "GroupName": str, "Tenancy": Literal["default", "dedicated", "host"]},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationTypeDef",
    {
        "UserData": str,
        "SecurityGroups": List[
            DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationSecurityGroupsTypeDef
        ],
        "AddressingType": str,
        "BlockDeviceMappings": List[
            DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationBlockDeviceMappingsTypeDef
        ],
        "EbsOptimized": bool,
        "IamInstanceProfile": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationIamInstanceProfileTypeDef,
        "ImageId": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "KernelId": str,
        "KeyName": str,
        "NetworkInterfaces": List[
            DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationNetworkInterfacesTypeDef
        ],
        "Placement": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationPlacementTypeDef,
        "RamdiskId": str,
        "SubnetId": str,
        "Monitoring": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationMonitoringTypeDef,
    },
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsStatusTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsStatusTypeDef",
    {"Code": str, "Message": str, "UpdateTime": datetime},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsTagsTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsTypeDef",
    {
        "ActualBlockHourlyPrice": str,
        "AvailabilityZoneGroup": str,
        "BlockDurationMinutes": int,
        "CreateTime": datetime,
        "Fault": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsFaultTypeDef,
        "InstanceId": str,
        "LaunchGroup": str,
        "LaunchSpecification": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsLaunchSpecificationTypeDef,
        "LaunchedAvailabilityZone": str,
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "SpotInstanceRequestId": str,
        "SpotPrice": str,
        "State": Literal["open", "active", "closed", "cancelled", "failed"],
        "Status": DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsStatusTypeDef,
        "Tags": List[DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsTagsTypeDef],
        "Type": Literal["one-time", "persistent"],
        "ValidFrom": datetime,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

DescribeSpotInstanceRequestsPaginateResponseTypeDef = TypedDict(
    "DescribeSpotInstanceRequestsPaginateResponseTypeDef",
    {
        "SpotInstanceRequests": List[
            DescribeSpotInstanceRequestsPaginateResponseSpotInstanceRequestsTypeDef
        ]
    },
    total=False,
)

DescribeSpotPriceHistoryPaginateFiltersTypeDef = TypedDict(
    "DescribeSpotPriceHistoryPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeSpotPriceHistoryPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSpotPriceHistoryPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSpotPriceHistoryPaginateResponseSpotPriceHistoryTypeDef = TypedDict(
    "DescribeSpotPriceHistoryPaginateResponseSpotPriceHistoryTypeDef",
    {
        "AvailabilityZone": str,
        "InstanceType": Literal[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "t3.nano",
            "t3.micro",
            "t3.small",
            "t3.medium",
            "t3.large",
            "t3.xlarge",
            "t3.2xlarge",
            "t3a.nano",
            "t3a.micro",
            "t3a.small",
            "t3a.medium",
            "t3a.large",
            "t3a.xlarge",
            "t3a.2xlarge",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "cr1.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "r5.large",
            "r5.xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.metal",
            "r5a.large",
            "r5a.xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5d.large",
            "r5d.xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.metal",
            "r5ad.large",
            "r5ad.xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.xlarge",
            "x1e.2xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.16xlarge",
            "x1e.32xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "i3.large",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.metal",
            "i3en.large",
            "i3en.xlarge",
            "i3en.2xlarge",
            "i3en.3xlarge",
            "i3en.6xlarge",
            "i3en.12xlarge",
            "i3en.24xlarge",
            "i3en.metal",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c5.large",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5.12xlarge",
            "c5.18xlarge",
            "c5.24xlarge",
            "c5.metal",
            "c5d.large",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c5d.4xlarge",
            "c5d.9xlarge",
            "c5d.12xlarge",
            "c5d.18xlarge",
            "c5d.24xlarge",
            "c5d.metal",
            "c5n.large",
            "c5n.xlarge",
            "c5n.2xlarge",
            "c5n.4xlarge",
            "c5n.9xlarge",
            "c5n.18xlarge",
            "cc1.4xlarge",
            "cc2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "g3.4xlarge",
            "g3.8xlarge",
            "g3.16xlarge",
            "g3s.xlarge",
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "cg1.4xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3.16xlarge",
            "p3dn.24xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge",
            "f1.2xlarge",
            "f1.4xlarge",
            "f1.16xlarge",
            "m5.large",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.8xlarge",
            "m5.12xlarge",
            "m5.16xlarge",
            "m5.24xlarge",
            "m5.metal",
            "m5a.large",
            "m5a.xlarge",
            "m5a.2xlarge",
            "m5a.4xlarge",
            "m5a.8xlarge",
            "m5a.12xlarge",
            "m5a.16xlarge",
            "m5a.24xlarge",
            "m5d.large",
            "m5d.xlarge",
            "m5d.2xlarge",
            "m5d.4xlarge",
            "m5d.8xlarge",
            "m5d.12xlarge",
            "m5d.16xlarge",
            "m5d.24xlarge",
            "m5d.metal",
            "m5ad.large",
            "m5ad.xlarge",
            "m5ad.2xlarge",
            "m5ad.4xlarge",
            "m5ad.8xlarge",
            "m5ad.12xlarge",
            "m5ad.16xlarge",
            "m5ad.24xlarge",
            "h1.2xlarge",
            "h1.4xlarge",
            "h1.8xlarge",
            "h1.16xlarge",
            "z1d.large",
            "z1d.xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.12xlarge",
            "z1d.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "a1.medium",
            "a1.large",
            "a1.xlarge",
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.metal",
            "m5dn.large",
            "m5dn.xlarge",
            "m5dn.2xlarge",
            "m5dn.4xlarge",
            "m5dn.8xlarge",
            "m5dn.12xlarge",
            "m5dn.16xlarge",
            "m5dn.24xlarge",
            "m5n.large",
            "m5n.xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.12xlarge",
            "m5n.16xlarge",
            "m5n.24xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "inf1.xlarge",
            "inf1.2xlarge",
            "inf1.6xlarge",
            "inf1.24xlarge",
        ],
        "ProductDescription": Literal[
            "Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"
        ],
        "SpotPrice": str,
        "Timestamp": datetime,
    },
    total=False,
)

DescribeSpotPriceHistoryPaginateResponseTypeDef = TypedDict(
    "DescribeSpotPriceHistoryPaginateResponseTypeDef",
    {"SpotPriceHistory": List[DescribeSpotPriceHistoryPaginateResponseSpotPriceHistoryTypeDef]},
    total=False,
)

DescribeStaleSecurityGroupsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsEgressUserIdGroupPairsTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsEgressUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsEgressTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsEgressTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[str],
        "PrefixListIds": List[str],
        "ToPort": int,
        "UserIdGroupPairs": List[
            DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsEgressUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[str],
        "PrefixListIds": List[str],
        "ToPort": int,
        "UserIdGroupPairs": List[
            DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsUserIdGroupPairsTypeDef
        ],
    },
    total=False,
)

DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "StaleIpPermissions": List[
            DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsTypeDef
        ],
        "StaleIpPermissionsEgress": List[
            DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetStaleIpPermissionsEgressTypeDef
        ],
        "VpcId": str,
    },
    total=False,
)

DescribeStaleSecurityGroupsPaginateResponseTypeDef = TypedDict(
    "DescribeStaleSecurityGroupsPaginateResponseTypeDef",
    {
        "StaleSecurityGroupSet": List[
            DescribeStaleSecurityGroupsPaginateResponseStaleSecurityGroupSetTypeDef
        ]
    },
    total=False,
)

DescribeSubnetsPaginateFiltersTypeDef = TypedDict(
    "DescribeSubnetsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeSubnetsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeSubnetsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeSubnetsPaginateResponseSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "DescribeSubnetsPaginateResponseSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

DescribeSubnetsPaginateResponseSubnetsIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "DescribeSubnetsPaginateResponseSubnetsIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": DescribeSubnetsPaginateResponseSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
    },
    total=False,
)

DescribeSubnetsPaginateResponseSubnetsTagsTypeDef = TypedDict(
    "DescribeSubnetsPaginateResponseSubnetsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DescribeSubnetsPaginateResponseSubnetsTypeDef = TypedDict(
    "DescribeSubnetsPaginateResponseSubnetsTypeDef",
    {
        "AvailabilityZone": str,
        "AvailabilityZoneId": str,
        "AvailableIpAddressCount": int,
        "CidrBlock": str,
        "DefaultForAz": bool,
        "MapPublicIpOnLaunch": bool,
        "State": Literal["pending", "available"],
        "SubnetId": str,
        "VpcId": str,
        "OwnerId": str,
        "AssignIpv6AddressOnCreation": bool,
        "Ipv6CidrBlockAssociationSet": List[
            DescribeSubnetsPaginateResponseSubnetsIpv6CidrBlockAssociationSetTypeDef
        ],
        "Tags": List[DescribeSubnetsPaginateResponseSubnetsTagsTypeDef],
        "SubnetArn": str,
        "OutpostArn": str,
    },
    total=False,
)

DescribeSubnetsPaginateResponseTypeDef = TypedDict(
    "DescribeSubnetsPaginateResponseTypeDef",
    {"Subnets": List[DescribeSubnetsPaginateResponseSubnetsTypeDef]},
    total=False,
)

DescribeTagsPaginateFiltersTypeDef = TypedDict(
    "DescribeTagsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeTagsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTagsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTagsPaginateResponseTagsTypeDef = TypedDict(
    "DescribeTagsPaginateResponseTagsTypeDef",
    {
        "Key": str,
        "ResourceId": str,
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Value": str,
    },
    total=False,
)

DescribeTagsPaginateResponseTypeDef = TypedDict(
    "DescribeTagsPaginateResponseTypeDef",
    {"Tags": List[DescribeTagsPaginateResponseTagsTypeDef]},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateFiltersTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeTrafficMirrorFiltersPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesDestinationPortRangeTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesDestinationPortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesSourcePortRangeTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesSourcePortRangeTypeDef",
    {"FromPort": int, "ToPort": int},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesTypeDef",
    {
        "TrafficMirrorFilterRuleId": str,
        "TrafficMirrorFilterId": str,
        "TrafficDirection": Literal["ingress", "egress"],
        "RuleNumber": int,
        "RuleAction": Literal["accept", "reject"],
        "Protocol": int,
        "DestinationPortRange": DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesDestinationPortRangeTypeDef,
        "SourcePortRange": DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesSourcePortRangeTypeDef,
        "DestinationCidrBlock": str,
        "SourceCidrBlock": str,
        "Description": str,
    },
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersTagsTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersTypeDef",
    {
        "TrafficMirrorFilterId": str,
        "IngressFilterRules": List[
            DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersIngressFilterRulesTypeDef
        ],
        "EgressFilterRules": List[
            DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersEgressFilterRulesTypeDef
        ],
        "NetworkServices": List[str],
        "Description": str,
        "Tags": List[DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersTagsTypeDef],
    },
    total=False,
)

DescribeTrafficMirrorFiltersPaginateResponseTypeDef = TypedDict(
    "DescribeTrafficMirrorFiltersPaginateResponseTypeDef",
    {
        "TrafficMirrorFilters": List[
            DescribeTrafficMirrorFiltersPaginateResponseTrafficMirrorFiltersTypeDef
        ]
    },
    total=False,
)

DescribeTrafficMirrorSessionsPaginateFiltersTypeDef = TypedDict(
    "DescribeTrafficMirrorSessionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeTrafficMirrorSessionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTrafficMirrorSessionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTrafficMirrorSessionsPaginateResponseTrafficMirrorSessionsTagsTypeDef = TypedDict(
    "DescribeTrafficMirrorSessionsPaginateResponseTrafficMirrorSessionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTrafficMirrorSessionsPaginateResponseTrafficMirrorSessionsTypeDef = TypedDict(
    "DescribeTrafficMirrorSessionsPaginateResponseTrafficMirrorSessionsTypeDef",
    {
        "TrafficMirrorSessionId": str,
        "TrafficMirrorTargetId": str,
        "TrafficMirrorFilterId": str,
        "NetworkInterfaceId": str,
        "OwnerId": str,
        "PacketLength": int,
        "SessionNumber": int,
        "VirtualNetworkId": int,
        "Description": str,
        "Tags": List[DescribeTrafficMirrorSessionsPaginateResponseTrafficMirrorSessionsTagsTypeDef],
    },
    total=False,
)

DescribeTrafficMirrorSessionsPaginateResponseTypeDef = TypedDict(
    "DescribeTrafficMirrorSessionsPaginateResponseTypeDef",
    {
        "TrafficMirrorSessions": List[
            DescribeTrafficMirrorSessionsPaginateResponseTrafficMirrorSessionsTypeDef
        ]
    },
    total=False,
)

DescribeTrafficMirrorTargetsPaginateFiltersTypeDef = TypedDict(
    "DescribeTrafficMirrorTargetsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeTrafficMirrorTargetsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTrafficMirrorTargetsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTrafficMirrorTargetsPaginateResponseTrafficMirrorTargetsTagsTypeDef = TypedDict(
    "DescribeTrafficMirrorTargetsPaginateResponseTrafficMirrorTargetsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTrafficMirrorTargetsPaginateResponseTrafficMirrorTargetsTypeDef = TypedDict(
    "DescribeTrafficMirrorTargetsPaginateResponseTrafficMirrorTargetsTypeDef",
    {
        "TrafficMirrorTargetId": str,
        "NetworkInterfaceId": str,
        "NetworkLoadBalancerArn": str,
        "Type": Literal["network-interface", "network-load-balancer"],
        "Description": str,
        "OwnerId": str,
        "Tags": List[DescribeTrafficMirrorTargetsPaginateResponseTrafficMirrorTargetsTagsTypeDef],
    },
    total=False,
)

DescribeTrafficMirrorTargetsPaginateResponseTypeDef = TypedDict(
    "DescribeTrafficMirrorTargetsPaginateResponseTypeDef",
    {
        "TrafficMirrorTargets": List[
            DescribeTrafficMirrorTargetsPaginateResponseTrafficMirrorTargetsTypeDef
        ]
    },
    total=False,
)

DescribeTransitGatewayAttachmentsPaginateFiltersTypeDef = TypedDict(
    "DescribeTransitGatewayAttachmentsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeTransitGatewayAttachmentsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTransitGatewayAttachmentsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsAssociationTypeDef = TypedDict(
    "DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsAssociationTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsTagsTypeDef = TypedDict(
    "DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsTypeDef = TypedDict(
    "DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "TransitGatewayOwnerId": str,
        "ResourceOwnerId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "ResourceId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "Association": DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsAssociationTypeDef,
        "CreationTime": datetime,
        "Tags": List[
            DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsTagsTypeDef
        ],
    },
    total=False,
)

DescribeTransitGatewayAttachmentsPaginateResponseTypeDef = TypedDict(
    "DescribeTransitGatewayAttachmentsPaginateResponseTypeDef",
    {
        "TransitGatewayAttachments": List[
            DescribeTransitGatewayAttachmentsPaginateResponseTransitGatewayAttachmentsTypeDef
        ]
    },
    total=False,
)

DescribeTransitGatewayRouteTablesPaginateFiltersTypeDef = TypedDict(
    "DescribeTransitGatewayRouteTablesPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeTransitGatewayRouteTablesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTransitGatewayRouteTablesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTransitGatewayRouteTablesPaginateResponseTransitGatewayRouteTablesTagsTypeDef = TypedDict(
    "DescribeTransitGatewayRouteTablesPaginateResponseTransitGatewayRouteTablesTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTransitGatewayRouteTablesPaginateResponseTransitGatewayRouteTablesTypeDef = TypedDict(
    "DescribeTransitGatewayRouteTablesPaginateResponseTransitGatewayRouteTablesTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "TransitGatewayId": str,
        "State": Literal["pending", "available", "deleting", "deleted"],
        "DefaultAssociationRouteTable": bool,
        "DefaultPropagationRouteTable": bool,
        "CreationTime": datetime,
        "Tags": List[
            DescribeTransitGatewayRouteTablesPaginateResponseTransitGatewayRouteTablesTagsTypeDef
        ],
    },
    total=False,
)

DescribeTransitGatewayRouteTablesPaginateResponseTypeDef = TypedDict(
    "DescribeTransitGatewayRouteTablesPaginateResponseTypeDef",
    {
        "TransitGatewayRouteTables": List[
            DescribeTransitGatewayRouteTablesPaginateResponseTransitGatewayRouteTablesTypeDef
        ]
    },
    total=False,
)

DescribeTransitGatewayVpcAttachmentsPaginateFiltersTypeDef = TypedDict(
    "DescribeTransitGatewayVpcAttachmentsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeTransitGatewayVpcAttachmentsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTransitGatewayVpcAttachmentsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsOptionsTypeDef = TypedDict(
    "DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsOptionsTypeDef",
    {"DnsSupport": Literal["enable", "disable"], "Ipv6Support": Literal["enable", "disable"]},
    total=False,
)

DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsTagsTypeDef = TypedDict(
    "DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsTypeDef = TypedDict(
    "DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "TransitGatewayId": str,
        "VpcId": str,
        "VpcOwnerId": str,
        "State": Literal[
            "initiating",
            "pendingAcceptance",
            "rollingBack",
            "pending",
            "available",
            "modifying",
            "deleting",
            "deleted",
            "failed",
            "rejected",
            "rejecting",
            "failing",
        ],
        "SubnetIds": List[str],
        "CreationTime": datetime,
        "Options": DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsOptionsTypeDef,
        "Tags": List[
            DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsTagsTypeDef
        ],
    },
    total=False,
)

DescribeTransitGatewayVpcAttachmentsPaginateResponseTypeDef = TypedDict(
    "DescribeTransitGatewayVpcAttachmentsPaginateResponseTypeDef",
    {
        "TransitGatewayVpcAttachments": List[
            DescribeTransitGatewayVpcAttachmentsPaginateResponseTransitGatewayVpcAttachmentsTypeDef
        ]
    },
    total=False,
)

DescribeTransitGatewaysPaginateFiltersTypeDef = TypedDict(
    "DescribeTransitGatewaysPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeTransitGatewaysPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeTransitGatewaysPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeTransitGatewaysPaginateResponseTransitGatewaysOptionsTypeDef = TypedDict(
    "DescribeTransitGatewaysPaginateResponseTransitGatewaysOptionsTypeDef",
    {
        "AmazonSideAsn": int,
        "AutoAcceptSharedAttachments": Literal["enable", "disable"],
        "DefaultRouteTableAssociation": Literal["enable", "disable"],
        "AssociationDefaultRouteTableId": str,
        "DefaultRouteTablePropagation": Literal["enable", "disable"],
        "PropagationDefaultRouteTableId": str,
        "VpnEcmpSupport": Literal["enable", "disable"],
        "DnsSupport": Literal["enable", "disable"],
        "MulticastSupport": Literal["enable", "disable"],
    },
    total=False,
)

DescribeTransitGatewaysPaginateResponseTransitGatewaysTagsTypeDef = TypedDict(
    "DescribeTransitGatewaysPaginateResponseTransitGatewaysTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeTransitGatewaysPaginateResponseTransitGatewaysTypeDef = TypedDict(
    "DescribeTransitGatewaysPaginateResponseTransitGatewaysTypeDef",
    {
        "TransitGatewayId": str,
        "TransitGatewayArn": str,
        "State": Literal["pending", "available", "modifying", "deleting", "deleted"],
        "OwnerId": str,
        "Description": str,
        "CreationTime": datetime,
        "Options": DescribeTransitGatewaysPaginateResponseTransitGatewaysOptionsTypeDef,
        "Tags": List[DescribeTransitGatewaysPaginateResponseTransitGatewaysTagsTypeDef],
    },
    total=False,
)

DescribeTransitGatewaysPaginateResponseTypeDef = TypedDict(
    "DescribeTransitGatewaysPaginateResponseTypeDef",
    {"TransitGateways": List[DescribeTransitGatewaysPaginateResponseTransitGatewaysTypeDef]},
    total=False,
)

DescribeVolumeStatusPaginateFiltersTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeVolumeStatusPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVolumeStatusPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVolumeStatusPaginateResponseVolumeStatusesActionsTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateResponseVolumeStatusesActionsTypeDef",
    {"Code": str, "Description": str, "EventId": str, "EventType": str},
    total=False,
)

DescribeVolumeStatusPaginateResponseVolumeStatusesEventsTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateResponseVolumeStatusesEventsTypeDef",
    {
        "Description": str,
        "EventId": str,
        "EventType": str,
        "NotAfter": datetime,
        "NotBefore": datetime,
    },
    total=False,
)

DescribeVolumeStatusPaginateResponseVolumeStatusesVolumeStatusDetailsTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateResponseVolumeStatusesVolumeStatusDetailsTypeDef",
    {"Name": Literal["io-enabled", "io-performance"], "Status": str},
    total=False,
)

DescribeVolumeStatusPaginateResponseVolumeStatusesVolumeStatusTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateResponseVolumeStatusesVolumeStatusTypeDef",
    {
        "Details": List[
            DescribeVolumeStatusPaginateResponseVolumeStatusesVolumeStatusDetailsTypeDef
        ],
        "Status": Literal["ok", "impaired", "insufficient-data"],
    },
    total=False,
)

DescribeVolumeStatusPaginateResponseVolumeStatusesTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateResponseVolumeStatusesTypeDef",
    {
        "Actions": List[DescribeVolumeStatusPaginateResponseVolumeStatusesActionsTypeDef],
        "AvailabilityZone": str,
        "OutpostArn": str,
        "Events": List[DescribeVolumeStatusPaginateResponseVolumeStatusesEventsTypeDef],
        "VolumeId": str,
        "VolumeStatus": DescribeVolumeStatusPaginateResponseVolumeStatusesVolumeStatusTypeDef,
    },
    total=False,
)

DescribeVolumeStatusPaginateResponseTypeDef = TypedDict(
    "DescribeVolumeStatusPaginateResponseTypeDef",
    {"VolumeStatuses": List[DescribeVolumeStatusPaginateResponseVolumeStatusesTypeDef]},
    total=False,
)

DescribeVolumesModificationsPaginateFiltersTypeDef = TypedDict(
    "DescribeVolumesModificationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVolumesModificationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVolumesModificationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVolumesModificationsPaginateResponseVolumesModificationsTypeDef = TypedDict(
    "DescribeVolumesModificationsPaginateResponseVolumesModificationsTypeDef",
    {
        "VolumeId": str,
        "ModificationState": Literal["modifying", "optimizing", "completed", "failed"],
        "StatusMessage": str,
        "TargetSize": int,
        "TargetIops": int,
        "TargetVolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "OriginalSize": int,
        "OriginalIops": int,
        "OriginalVolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Progress": int,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)

DescribeVolumesModificationsPaginateResponseTypeDef = TypedDict(
    "DescribeVolumesModificationsPaginateResponseTypeDef",
    {
        "VolumesModifications": List[
            DescribeVolumesModificationsPaginateResponseVolumesModificationsTypeDef
        ]
    },
    total=False,
)

DescribeVolumesPaginateFiltersTypeDef = TypedDict(
    "DescribeVolumesPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeVolumesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVolumesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVolumesPaginateResponseVolumesAttachmentsTypeDef = TypedDict(
    "DescribeVolumesPaginateResponseVolumesAttachmentsTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

DescribeVolumesPaginateResponseVolumesTagsTypeDef = TypedDict(
    "DescribeVolumesPaginateResponseVolumesTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DescribeVolumesPaginateResponseVolumesTypeDef = TypedDict(
    "DescribeVolumesPaginateResponseVolumesTypeDef",
    {
        "Attachments": List[DescribeVolumesPaginateResponseVolumesAttachmentsTypeDef],
        "AvailabilityZone": str,
        "CreateTime": datetime,
        "Encrypted": bool,
        "KmsKeyId": str,
        "OutpostArn": str,
        "Size": int,
        "SnapshotId": str,
        "State": Literal["creating", "available", "in-use", "deleting", "deleted", "error"],
        "VolumeId": str,
        "Iops": int,
        "Tags": List[DescribeVolumesPaginateResponseVolumesTagsTypeDef],
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "FastRestored": bool,
    },
    total=False,
)

DescribeVolumesPaginateResponseTypeDef = TypedDict(
    "DescribeVolumesPaginateResponseTypeDef",
    {"Volumes": List[DescribeVolumesPaginateResponseVolumesTypeDef]},
    total=False,
)

DescribeVpcClassicLinkDnsSupportPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcClassicLinkDnsSupportPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcClassicLinkDnsSupportPaginateResponseVpcsTypeDef = TypedDict(
    "DescribeVpcClassicLinkDnsSupportPaginateResponseVpcsTypeDef",
    {"ClassicLinkDnsSupported": bool, "VpcId": str},
    total=False,
)

DescribeVpcClassicLinkDnsSupportPaginateResponseTypeDef = TypedDict(
    "DescribeVpcClassicLinkDnsSupportPaginateResponseTypeDef",
    {"Vpcs": List[DescribeVpcClassicLinkDnsSupportPaginateResponseVpcsTypeDef]},
    total=False,
)

DescribeVpcEndpointConnectionNotificationsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionNotificationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVpcEndpointConnectionNotificationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionNotificationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcEndpointConnectionNotificationsPaginateResponseConnectionNotificationSetTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionNotificationsPaginateResponseConnectionNotificationSetTypeDef",
    {
        "ConnectionNotificationId": str,
        "ServiceId": str,
        "VpcEndpointId": str,
        "ConnectionNotificationType": str,
        "ConnectionNotificationArn": str,
        "ConnectionEvents": List[str],
        "ConnectionNotificationState": Literal["Enabled", "Disabled"],
    },
    total=False,
)

DescribeVpcEndpointConnectionNotificationsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionNotificationsPaginateResponseTypeDef",
    {
        "ConnectionNotificationSet": List[
            DescribeVpcEndpointConnectionNotificationsPaginateResponseConnectionNotificationSetTypeDef
        ]
    },
    total=False,
)

DescribeVpcEndpointConnectionsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVpcEndpointConnectionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcEndpointConnectionsPaginateResponseVpcEndpointConnectionsDnsEntriesTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionsPaginateResponseVpcEndpointConnectionsDnsEntriesTypeDef",
    {"DnsName": str, "HostedZoneId": str},
    total=False,
)

DescribeVpcEndpointConnectionsPaginateResponseVpcEndpointConnectionsTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionsPaginateResponseVpcEndpointConnectionsTypeDef",
    {
        "ServiceId": str,
        "VpcEndpointId": str,
        "VpcEndpointOwner": str,
        "VpcEndpointState": Literal[
            "PendingAcceptance",
            "Pending",
            "Available",
            "Deleting",
            "Deleted",
            "Rejected",
            "Failed",
            "Expired",
        ],
        "CreationTimestamp": datetime,
        "DnsEntries": List[
            DescribeVpcEndpointConnectionsPaginateResponseVpcEndpointConnectionsDnsEntriesTypeDef
        ],
        "NetworkLoadBalancerArns": List[str],
    },
    total=False,
)

DescribeVpcEndpointConnectionsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcEndpointConnectionsPaginateResponseTypeDef",
    {
        "VpcEndpointConnections": List[
            DescribeVpcEndpointConnectionsPaginateResponseVpcEndpointConnectionsTypeDef
        ]
    },
    total=False,
)

DescribeVpcEndpointServiceConfigurationsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcEndpointServiceConfigurationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVpcEndpointServiceConfigurationsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcEndpointServiceConfigurationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsServiceTypeTypeDef = TypedDict(
    "DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsServiceTypeTypeDef",
    {"ServiceType": Literal["Interface", "Gateway"]},
    total=False,
)

DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsTagsTypeDef = TypedDict(
    "DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsTypeDef = TypedDict(
    "DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsTypeDef",
    {
        "ServiceType": List[
            DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsServiceTypeTypeDef
        ],
        "ServiceId": str,
        "ServiceName": str,
        "ServiceState": Literal["Pending", "Available", "Deleting", "Deleted", "Failed"],
        "AvailabilityZones": List[str],
        "AcceptanceRequired": bool,
        "ManagesVpcEndpoints": bool,
        "NetworkLoadBalancerArns": List[str],
        "BaseEndpointDnsNames": List[str],
        "PrivateDnsName": str,
        "Tags": List[
            DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsTagsTypeDef
        ],
    },
    total=False,
)

DescribeVpcEndpointServiceConfigurationsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcEndpointServiceConfigurationsPaginateResponseTypeDef",
    {
        "ServiceConfigurations": List[
            DescribeVpcEndpointServiceConfigurationsPaginateResponseServiceConfigurationsTypeDef
        ]
    },
    total=False,
)

DescribeVpcEndpointServicePermissionsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcEndpointServicePermissionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVpcEndpointServicePermissionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcEndpointServicePermissionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcEndpointServicePermissionsPaginateResponseAllowedPrincipalsTypeDef = TypedDict(
    "DescribeVpcEndpointServicePermissionsPaginateResponseAllowedPrincipalsTypeDef",
    {
        "PrincipalType": Literal["All", "Service", "OrganizationUnit", "Account", "User", "Role"],
        "Principal": str,
    },
    total=False,
)

DescribeVpcEndpointServicePermissionsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcEndpointServicePermissionsPaginateResponseTypeDef",
    {
        "AllowedPrincipals": List[
            DescribeVpcEndpointServicePermissionsPaginateResponseAllowedPrincipalsTypeDef
        ]
    },
    total=False,
)

DescribeVpcEndpointServicesPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcEndpointServicesPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVpcEndpointServicesPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcEndpointServicesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcEndpointServicesPaginateResponseServiceDetailsServiceTypeTypeDef = TypedDict(
    "DescribeVpcEndpointServicesPaginateResponseServiceDetailsServiceTypeTypeDef",
    {"ServiceType": Literal["Interface", "Gateway"]},
    total=False,
)

DescribeVpcEndpointServicesPaginateResponseServiceDetailsTagsTypeDef = TypedDict(
    "DescribeVpcEndpointServicesPaginateResponseServiceDetailsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeVpcEndpointServicesPaginateResponseServiceDetailsTypeDef = TypedDict(
    "DescribeVpcEndpointServicesPaginateResponseServiceDetailsTypeDef",
    {
        "ServiceName": str,
        "ServiceId": str,
        "ServiceType": List[
            DescribeVpcEndpointServicesPaginateResponseServiceDetailsServiceTypeTypeDef
        ],
        "AvailabilityZones": List[str],
        "Owner": str,
        "BaseEndpointDnsNames": List[str],
        "PrivateDnsName": str,
        "VpcEndpointPolicySupported": bool,
        "AcceptanceRequired": bool,
        "ManagesVpcEndpoints": bool,
        "Tags": List[DescribeVpcEndpointServicesPaginateResponseServiceDetailsTagsTypeDef],
    },
    total=False,
)

DescribeVpcEndpointServicesPaginateResponseTypeDef = TypedDict(
    "DescribeVpcEndpointServicesPaginateResponseTypeDef",
    {
        "ServiceNames": List[str],
        "ServiceDetails": List[DescribeVpcEndpointServicesPaginateResponseServiceDetailsTypeDef],
    },
    total=False,
)

DescribeVpcEndpointsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeVpcEndpointsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcEndpointsPaginateResponseVpcEndpointsDnsEntriesTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginateResponseVpcEndpointsDnsEntriesTypeDef",
    {"DnsName": str, "HostedZoneId": str},
    total=False,
)

DescribeVpcEndpointsPaginateResponseVpcEndpointsGroupsTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginateResponseVpcEndpointsGroupsTypeDef",
    {"GroupId": str, "GroupName": str},
    total=False,
)

DescribeVpcEndpointsPaginateResponseVpcEndpointsTagsTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginateResponseVpcEndpointsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeVpcEndpointsPaginateResponseVpcEndpointsTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginateResponseVpcEndpointsTypeDef",
    {
        "VpcEndpointId": str,
        "VpcEndpointType": Literal["Interface", "Gateway"],
        "VpcId": str,
        "ServiceName": str,
        "State": Literal[
            "PendingAcceptance",
            "Pending",
            "Available",
            "Deleting",
            "Deleted",
            "Rejected",
            "Failed",
            "Expired",
        ],
        "PolicyDocument": str,
        "RouteTableIds": List[str],
        "SubnetIds": List[str],
        "Groups": List[DescribeVpcEndpointsPaginateResponseVpcEndpointsGroupsTypeDef],
        "PrivateDnsEnabled": bool,
        "RequesterManaged": bool,
        "NetworkInterfaceIds": List[str],
        "DnsEntries": List[DescribeVpcEndpointsPaginateResponseVpcEndpointsDnsEntriesTypeDef],
        "CreationTimestamp": datetime,
        "Tags": List[DescribeVpcEndpointsPaginateResponseVpcEndpointsTagsTypeDef],
        "OwnerId": str,
    },
    total=False,
)

DescribeVpcEndpointsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcEndpointsPaginateResponseTypeDef",
    {"VpcEndpoints": List[DescribeVpcEndpointsPaginateResponseVpcEndpointsTypeDef]},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

DescribeVpcPeeringConnectionsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsStatusTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsStatusTypeDef",
    {
        "Code": Literal[
            "initiating-request",
            "pending-acceptance",
            "active",
            "deleted",
            "rejected",
            "failed",
            "expired",
            "provisioning",
            "deleting",
        ],
        "Message": str,
    },
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsTagsTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsTypeDef",
    {
        "AccepterVpcInfo": DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsAccepterVpcInfoTypeDef,
        "ExpirationTime": datetime,
        "RequesterVpcInfo": DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsRequesterVpcInfoTypeDef,
        "Status": DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsStatusTypeDef,
        "Tags": List[DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsTagsTypeDef],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

DescribeVpcPeeringConnectionsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcPeeringConnectionsPaginateResponseTypeDef",
    {
        "VpcPeeringConnections": List[
            DescribeVpcPeeringConnectionsPaginateResponseVpcPeeringConnectionsTypeDef
        ]
    },
    total=False,
)

DescribeVpcsPaginateFiltersTypeDef = TypedDict(
    "DescribeVpcsPaginateFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

DescribeVpcsPaginatePaginationConfigTypeDef = TypedDict(
    "DescribeVpcsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

DescribeVpcsPaginateResponseVpcsCidrBlockAssociationSetCidrBlockStateTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseVpcsCidrBlockAssociationSetCidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

DescribeVpcsPaginateResponseVpcsCidrBlockAssociationSetTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseVpcsCidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "CidrBlock": str,
        "CidrBlockState": DescribeVpcsPaginateResponseVpcsCidrBlockAssociationSetCidrBlockStateTypeDef,
    },
    total=False,
)

DescribeVpcsPaginateResponseVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef",
    {
        "State": Literal[
            "associating", "associated", "disassociating", "disassociated", "failing", "failed"
        ],
        "StatusMessage": str,
    },
    total=False,
)

DescribeVpcsPaginateResponseVpcsIpv6CidrBlockAssociationSetTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseVpcsIpv6CidrBlockAssociationSetTypeDef",
    {
        "AssociationId": str,
        "Ipv6CidrBlock": str,
        "Ipv6CidrBlockState": DescribeVpcsPaginateResponseVpcsIpv6CidrBlockAssociationSetIpv6CidrBlockStateTypeDef,
        "NetworkBorderGroup": str,
    },
    total=False,
)

DescribeVpcsPaginateResponseVpcsTagsTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseVpcsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DescribeVpcsPaginateResponseVpcsTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseVpcsTypeDef",
    {
        "CidrBlock": str,
        "DhcpOptionsId": str,
        "State": Literal["pending", "available"],
        "VpcId": str,
        "OwnerId": str,
        "InstanceTenancy": Literal["default", "dedicated", "host"],
        "Ipv6CidrBlockAssociationSet": List[
            DescribeVpcsPaginateResponseVpcsIpv6CidrBlockAssociationSetTypeDef
        ],
        "CidrBlockAssociationSet": List[
            DescribeVpcsPaginateResponseVpcsCidrBlockAssociationSetTypeDef
        ],
        "IsDefault": bool,
        "Tags": List[DescribeVpcsPaginateResponseVpcsTagsTypeDef],
    },
    total=False,
)

DescribeVpcsPaginateResponseTypeDef = TypedDict(
    "DescribeVpcsPaginateResponseTypeDef",
    {"Vpcs": List[DescribeVpcsPaginateResponseVpcsTypeDef]},
    total=False,
)

DhcpOptionsCreateTagsTagsTypeDef = TypedDict(
    "DhcpOptionsCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

DhcpOptionsSetsFilterFiltersTypeDef = TypedDict(
    "DhcpOptionsSetsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ExportTaskCancelledWaitWaiterConfigTypeDef = TypedDict(
    "ExportTaskCancelledWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

ExportTaskCompletedWaitWaiterConfigTypeDef = TypedDict(
    "ExportTaskCompletedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

GetTransitGatewayAttachmentPropagationsPaginateFiltersTypeDef = TypedDict(
    "GetTransitGatewayAttachmentPropagationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

GetTransitGatewayAttachmentPropagationsPaginatePaginationConfigTypeDef = TypedDict(
    "GetTransitGatewayAttachmentPropagationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

GetTransitGatewayAttachmentPropagationsPaginateResponseTransitGatewayAttachmentPropagationsTypeDef = TypedDict(
    "GetTransitGatewayAttachmentPropagationsPaginateResponseTransitGatewayAttachmentPropagationsTypeDef",
    {
        "TransitGatewayRouteTableId": str,
        "State": Literal["enabling", "enabled", "disabling", "disabled"],
    },
    total=False,
)

GetTransitGatewayAttachmentPropagationsPaginateResponseTypeDef = TypedDict(
    "GetTransitGatewayAttachmentPropagationsPaginateResponseTypeDef",
    {
        "TransitGatewayAttachmentPropagations": List[
            GetTransitGatewayAttachmentPropagationsPaginateResponseTransitGatewayAttachmentPropagationsTypeDef
        ]
    },
    total=False,
)

GetTransitGatewayRouteTableAssociationsPaginateFiltersTypeDef = TypedDict(
    "GetTransitGatewayRouteTableAssociationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

GetTransitGatewayRouteTableAssociationsPaginatePaginationConfigTypeDef = TypedDict(
    "GetTransitGatewayRouteTableAssociationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

GetTransitGatewayRouteTableAssociationsPaginateResponseAssociationsTypeDef = TypedDict(
    "GetTransitGatewayRouteTableAssociationsPaginateResponseAssociationsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "State": Literal["associating", "associated", "disassociating", "disassociated"],
    },
    total=False,
)

GetTransitGatewayRouteTableAssociationsPaginateResponseTypeDef = TypedDict(
    "GetTransitGatewayRouteTableAssociationsPaginateResponseTypeDef",
    {
        "Associations": List[
            GetTransitGatewayRouteTableAssociationsPaginateResponseAssociationsTypeDef
        ]
    },
    total=False,
)

GetTransitGatewayRouteTablePropagationsPaginateFiltersTypeDef = TypedDict(
    "GetTransitGatewayRouteTablePropagationsPaginateFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

GetTransitGatewayRouteTablePropagationsPaginatePaginationConfigTypeDef = TypedDict(
    "GetTransitGatewayRouteTablePropagationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)

GetTransitGatewayRouteTablePropagationsPaginateResponseTransitGatewayRouteTablePropagationsTypeDef = TypedDict(
    "GetTransitGatewayRouteTablePropagationsPaginateResponseTransitGatewayRouteTablePropagationsTypeDef",
    {
        "TransitGatewayAttachmentId": str,
        "ResourceId": str,
        "ResourceType": Literal["vpc", "vpn", "direct-connect-gateway", "tgw-peering"],
        "State": Literal["enabling", "enabled", "disabling", "disabled"],
    },
    total=False,
)

GetTransitGatewayRouteTablePropagationsPaginateResponseTypeDef = TypedDict(
    "GetTransitGatewayRouteTablePropagationsPaginateResponseTypeDef",
    {
        "TransitGatewayRouteTablePropagations": List[
            GetTransitGatewayRouteTablePropagationsPaginateResponseTransitGatewayRouteTablePropagationsTypeDef
        ]
    },
    total=False,
)

ImageAvailableWaitFiltersTypeDef = TypedDict(
    "ImageAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ImageAvailableWaitWaiterConfigTypeDef = TypedDict(
    "ImageAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

ImageCreateTagsTagsTypeDef = TypedDict(
    "ImageCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

ImageDescribeAttributeResponseBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ImageDescribeAttributeResponseBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ImageDescribeAttributeResponseBlockDeviceMappingsTypeDef = TypedDict(
    "ImageDescribeAttributeResponseBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ImageDescribeAttributeResponseBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ImageDescribeAttributeResponseDescriptionTypeDef = TypedDict(
    "ImageDescribeAttributeResponseDescriptionTypeDef", {"Value": str}, total=False
)

ImageDescribeAttributeResponseKernelIdTypeDef = TypedDict(
    "ImageDescribeAttributeResponseKernelIdTypeDef", {"Value": str}, total=False
)

ImageDescribeAttributeResponseLaunchPermissionsTypeDef = TypedDict(
    "ImageDescribeAttributeResponseLaunchPermissionsTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

ImageDescribeAttributeResponseProductCodesTypeDef = TypedDict(
    "ImageDescribeAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

ImageDescribeAttributeResponseRamdiskIdTypeDef = TypedDict(
    "ImageDescribeAttributeResponseRamdiskIdTypeDef", {"Value": str}, total=False
)

ImageDescribeAttributeResponseSriovNetSupportTypeDef = TypedDict(
    "ImageDescribeAttributeResponseSriovNetSupportTypeDef", {"Value": str}, total=False
)

ImageDescribeAttributeResponseTypeDef = TypedDict(
    "ImageDescribeAttributeResponseTypeDef",
    {
        "BlockDeviceMappings": List[ImageDescribeAttributeResponseBlockDeviceMappingsTypeDef],
        "ImageId": str,
        "LaunchPermissions": List[ImageDescribeAttributeResponseLaunchPermissionsTypeDef],
        "ProductCodes": List[ImageDescribeAttributeResponseProductCodesTypeDef],
        "Description": ImageDescribeAttributeResponseDescriptionTypeDef,
        "KernelId": ImageDescribeAttributeResponseKernelIdTypeDef,
        "RamdiskId": ImageDescribeAttributeResponseRamdiskIdTypeDef,
        "SriovNetSupport": ImageDescribeAttributeResponseSriovNetSupportTypeDef,
    },
    total=False,
)

ImageExistsWaitFiltersTypeDef = TypedDict(
    "ImageExistsWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ImageExistsWaitWaiterConfigTypeDef = TypedDict(
    "ImageExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

ImageModifyAttributeDescriptionTypeDef = TypedDict(
    "ImageModifyAttributeDescriptionTypeDef", {"Value": str}, total=False
)

ImageModifyAttributeLaunchPermissionAddTypeDef = TypedDict(
    "ImageModifyAttributeLaunchPermissionAddTypeDef", {"Group": str, "UserId": str}, total=False
)

ImageModifyAttributeLaunchPermissionRemoveTypeDef = TypedDict(
    "ImageModifyAttributeLaunchPermissionRemoveTypeDef", {"Group": str, "UserId": str}, total=False
)

ImageModifyAttributeLaunchPermissionTypeDef = TypedDict(
    "ImageModifyAttributeLaunchPermissionTypeDef",
    {
        "Add": List[ImageModifyAttributeLaunchPermissionAddTypeDef],
        "Remove": List[ImageModifyAttributeLaunchPermissionRemoveTypeDef],
    },
    total=False,
)

ImageWaitUntilExistsFiltersTypeDef = TypedDict(
    "ImageWaitUntilExistsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ImagesFilterFiltersTypeDef = TypedDict(
    "ImagesFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceAttachClassicLinkVpcResponseTypeDef = TypedDict(
    "InstanceAttachClassicLinkVpcResponseTypeDef", {"Return": bool}, total=False
)

InstanceAttachVolumeResponseTypeDef = TypedDict(
    "InstanceAttachVolumeResponseTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

InstanceConsoleOutputResponseTypeDef = TypedDict(
    "InstanceConsoleOutputResponseTypeDef",
    {"InstanceId": str, "Output": str, "Timestamp": datetime},
    total=False,
)

InstanceCreateImageBlockDeviceMappingsEbsTypeDef = TypedDict(
    "InstanceCreateImageBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

InstanceCreateImageBlockDeviceMappingsTypeDef = TypedDict(
    "InstanceCreateImageBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": InstanceCreateImageBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

InstanceCreateTagsTagsTypeDef = TypedDict(
    "InstanceCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

InstanceDeleteTagsTagsTypeDef = TypedDict(
    "InstanceDeleteTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

InstanceDescribeAttributeResponseBlockDeviceMappingsEbsTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseBlockDeviceMappingsEbsTypeDef",
    {
        "AttachTime": datetime,
        "DeleteOnTermination": bool,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
        "VolumeId": str,
    },
    total=False,
)

InstanceDescribeAttributeResponseBlockDeviceMappingsTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseBlockDeviceMappingsTypeDef",
    {"DeviceName": str, "Ebs": InstanceDescribeAttributeResponseBlockDeviceMappingsEbsTypeDef},
    total=False,
)

InstanceDescribeAttributeResponseDisableApiTerminationTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseDisableApiTerminationTypeDef", {"Value": bool}, total=False
)

InstanceDescribeAttributeResponseEbsOptimizedTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseEbsOptimizedTypeDef", {"Value": bool}, total=False
)

InstanceDescribeAttributeResponseEnaSupportTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseEnaSupportTypeDef", {"Value": bool}, total=False
)

InstanceDescribeAttributeResponseGroupsTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

InstanceDescribeAttributeResponseInstanceInitiatedShutdownBehaviorTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseInstanceInitiatedShutdownBehaviorTypeDef",
    {"Value": str},
    total=False,
)

InstanceDescribeAttributeResponseInstanceTypeTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseInstanceTypeTypeDef", {"Value": str}, total=False
)

InstanceDescribeAttributeResponseKernelIdTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseKernelIdTypeDef", {"Value": str}, total=False
)

InstanceDescribeAttributeResponseProductCodesTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

InstanceDescribeAttributeResponseRamdiskIdTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseRamdiskIdTypeDef", {"Value": str}, total=False
)

InstanceDescribeAttributeResponseRootDeviceNameTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseRootDeviceNameTypeDef", {"Value": str}, total=False
)

InstanceDescribeAttributeResponseSourceDestCheckTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseSourceDestCheckTypeDef", {"Value": bool}, total=False
)

InstanceDescribeAttributeResponseSriovNetSupportTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseSriovNetSupportTypeDef", {"Value": str}, total=False
)

InstanceDescribeAttributeResponseUserDataTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseUserDataTypeDef", {"Value": str}, total=False
)

InstanceDescribeAttributeResponseTypeDef = TypedDict(
    "InstanceDescribeAttributeResponseTypeDef",
    {
        "Groups": List[InstanceDescribeAttributeResponseGroupsTypeDef],
        "BlockDeviceMappings": List[InstanceDescribeAttributeResponseBlockDeviceMappingsTypeDef],
        "DisableApiTermination": InstanceDescribeAttributeResponseDisableApiTerminationTypeDef,
        "EnaSupport": InstanceDescribeAttributeResponseEnaSupportTypeDef,
        "EbsOptimized": InstanceDescribeAttributeResponseEbsOptimizedTypeDef,
        "InstanceId": str,
        "InstanceInitiatedShutdownBehavior": InstanceDescribeAttributeResponseInstanceInitiatedShutdownBehaviorTypeDef,
        "InstanceType": InstanceDescribeAttributeResponseInstanceTypeTypeDef,
        "KernelId": InstanceDescribeAttributeResponseKernelIdTypeDef,
        "ProductCodes": List[InstanceDescribeAttributeResponseProductCodesTypeDef],
        "RamdiskId": InstanceDescribeAttributeResponseRamdiskIdTypeDef,
        "RootDeviceName": InstanceDescribeAttributeResponseRootDeviceNameTypeDef,
        "SourceDestCheck": InstanceDescribeAttributeResponseSourceDestCheckTypeDef,
        "SriovNetSupport": InstanceDescribeAttributeResponseSriovNetSupportTypeDef,
        "UserData": InstanceDescribeAttributeResponseUserDataTypeDef,
    },
    total=False,
)

InstanceDetachClassicLinkVpcResponseTypeDef = TypedDict(
    "InstanceDetachClassicLinkVpcResponseTypeDef", {"Return": bool}, total=False
)

InstanceDetachVolumeResponseTypeDef = TypedDict(
    "InstanceDetachVolumeResponseTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

InstanceExistsWaitFiltersTypeDef = TypedDict(
    "InstanceExistsWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceExistsWaitWaiterConfigTypeDef = TypedDict(
    "InstanceExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

InstanceModifyAttributeBlockDeviceMappingsEbsTypeDef = TypedDict(
    "InstanceModifyAttributeBlockDeviceMappingsEbsTypeDef",
    {"DeleteOnTermination": bool, "VolumeId": str},
    total=False,
)

InstanceModifyAttributeBlockDeviceMappingsTypeDef = TypedDict(
    "InstanceModifyAttributeBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "Ebs": InstanceModifyAttributeBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
        "VirtualName": str,
    },
    total=False,
)

InstanceModifyAttributeDisableApiTerminationTypeDef = TypedDict(
    "InstanceModifyAttributeDisableApiTerminationTypeDef", {"Value": bool}, total=False
)

InstanceModifyAttributeEbsOptimizedTypeDef = TypedDict(
    "InstanceModifyAttributeEbsOptimizedTypeDef", {"Value": bool}, total=False
)

InstanceModifyAttributeEnaSupportTypeDef = TypedDict(
    "InstanceModifyAttributeEnaSupportTypeDef", {"Value": bool}, total=False
)

InstanceModifyAttributeInstanceInitiatedShutdownBehaviorTypeDef = TypedDict(
    "InstanceModifyAttributeInstanceInitiatedShutdownBehaviorTypeDef", {"Value": str}, total=False
)

InstanceModifyAttributeInstanceTypeTypeDef = TypedDict(
    "InstanceModifyAttributeInstanceTypeTypeDef", {"Value": str}, total=False
)

InstanceModifyAttributeKernelTypeDef = TypedDict(
    "InstanceModifyAttributeKernelTypeDef", {"Value": str}, total=False
)

InstanceModifyAttributeRamdiskTypeDef = TypedDict(
    "InstanceModifyAttributeRamdiskTypeDef", {"Value": str}, total=False
)

InstanceModifyAttributeSourceDestCheckTypeDef = TypedDict(
    "InstanceModifyAttributeSourceDestCheckTypeDef", {"Value": bool}, total=False
)

InstanceModifyAttributeSriovNetSupportTypeDef = TypedDict(
    "InstanceModifyAttributeSriovNetSupportTypeDef", {"Value": str}, total=False
)

InstanceModifyAttributeUserDataTypeDef = TypedDict(
    "InstanceModifyAttributeUserDataTypeDef", {"Value": bytes}, total=False
)

InstanceMonitorResponseInstanceMonitoringsMonitoringTypeDef = TypedDict(
    "InstanceMonitorResponseInstanceMonitoringsMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

InstanceMonitorResponseInstanceMonitoringsTypeDef = TypedDict(
    "InstanceMonitorResponseInstanceMonitoringsTypeDef",
    {"InstanceId": str, "Monitoring": InstanceMonitorResponseInstanceMonitoringsMonitoringTypeDef},
    total=False,
)

InstanceMonitorResponseTypeDef = TypedDict(
    "InstanceMonitorResponseTypeDef",
    {"InstanceMonitorings": List[InstanceMonitorResponseInstanceMonitoringsTypeDef]},
    total=False,
)

InstancePasswordDataResponseTypeDef = TypedDict(
    "InstancePasswordDataResponseTypeDef",
    {"InstanceId": str, "PasswordData": str, "Timestamp": datetime},
    total=False,
)

InstanceRunningWaitFiltersTypeDef = TypedDict(
    "InstanceRunningWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceRunningWaitWaiterConfigTypeDef = TypedDict(
    "InstanceRunningWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

InstanceStartResponseStartingInstancesCurrentStateTypeDef = TypedDict(
    "InstanceStartResponseStartingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstanceStartResponseStartingInstancesPreviousStateTypeDef = TypedDict(
    "InstanceStartResponseStartingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstanceStartResponseStartingInstancesTypeDef = TypedDict(
    "InstanceStartResponseStartingInstancesTypeDef",
    {
        "CurrentState": InstanceStartResponseStartingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": InstanceStartResponseStartingInstancesPreviousStateTypeDef,
    },
    total=False,
)

InstanceStartResponseTypeDef = TypedDict(
    "InstanceStartResponseTypeDef",
    {"StartingInstances": List[InstanceStartResponseStartingInstancesTypeDef]},
    total=False,
)

InstanceStatusOkWaitFiltersTypeDef = TypedDict(
    "InstanceStatusOkWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceStatusOkWaitWaiterConfigTypeDef = TypedDict(
    "InstanceStatusOkWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

InstanceStopResponseStoppingInstancesCurrentStateTypeDef = TypedDict(
    "InstanceStopResponseStoppingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstanceStopResponseStoppingInstancesPreviousStateTypeDef = TypedDict(
    "InstanceStopResponseStoppingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstanceStopResponseStoppingInstancesTypeDef = TypedDict(
    "InstanceStopResponseStoppingInstancesTypeDef",
    {
        "CurrentState": InstanceStopResponseStoppingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": InstanceStopResponseStoppingInstancesPreviousStateTypeDef,
    },
    total=False,
)

InstanceStopResponseTypeDef = TypedDict(
    "InstanceStopResponseTypeDef",
    {"StoppingInstances": List[InstanceStopResponseStoppingInstancesTypeDef]},
    total=False,
)

InstanceStoppedWaitFiltersTypeDef = TypedDict(
    "InstanceStoppedWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceStoppedWaitWaiterConfigTypeDef = TypedDict(
    "InstanceStoppedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

InstanceTerminateResponseTerminatingInstancesCurrentStateTypeDef = TypedDict(
    "InstanceTerminateResponseTerminatingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstanceTerminateResponseTerminatingInstancesPreviousStateTypeDef = TypedDict(
    "InstanceTerminateResponseTerminatingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstanceTerminateResponseTerminatingInstancesTypeDef = TypedDict(
    "InstanceTerminateResponseTerminatingInstancesTypeDef",
    {
        "CurrentState": InstanceTerminateResponseTerminatingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": InstanceTerminateResponseTerminatingInstancesPreviousStateTypeDef,
    },
    total=False,
)

InstanceTerminateResponseTypeDef = TypedDict(
    "InstanceTerminateResponseTypeDef",
    {"TerminatingInstances": List[InstanceTerminateResponseTerminatingInstancesTypeDef]},
    total=False,
)

InstanceTerminatedWaitFiltersTypeDef = TypedDict(
    "InstanceTerminatedWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceTerminatedWaitWaiterConfigTypeDef = TypedDict(
    "InstanceTerminatedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

InstanceUnmonitorResponseInstanceMonitoringsMonitoringTypeDef = TypedDict(
    "InstanceUnmonitorResponseInstanceMonitoringsMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

InstanceUnmonitorResponseInstanceMonitoringsTypeDef = TypedDict(
    "InstanceUnmonitorResponseInstanceMonitoringsTypeDef",
    {
        "InstanceId": str,
        "Monitoring": InstanceUnmonitorResponseInstanceMonitoringsMonitoringTypeDef,
    },
    total=False,
)

InstanceUnmonitorResponseTypeDef = TypedDict(
    "InstanceUnmonitorResponseTypeDef",
    {"InstanceMonitorings": List[InstanceUnmonitorResponseInstanceMonitoringsTypeDef]},
    total=False,
)

InstanceWaitUntilExistsFiltersTypeDef = TypedDict(
    "InstanceWaitUntilExistsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceWaitUntilRunningFiltersTypeDef = TypedDict(
    "InstanceWaitUntilRunningFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceWaitUntilStoppedFiltersTypeDef = TypedDict(
    "InstanceWaitUntilStoppedFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstanceWaitUntilTerminatedFiltersTypeDef = TypedDict(
    "InstanceWaitUntilTerminatedFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstancesCreateTagsTagsTypeDef = TypedDict(
    "InstancesCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

InstancesFilterFiltersTypeDef = TypedDict(
    "InstancesFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

InstancesMonitorResponseInstanceMonitoringsMonitoringTypeDef = TypedDict(
    "InstancesMonitorResponseInstanceMonitoringsMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

InstancesMonitorResponseInstanceMonitoringsTypeDef = TypedDict(
    "InstancesMonitorResponseInstanceMonitoringsTypeDef",
    {"InstanceId": str, "Monitoring": InstancesMonitorResponseInstanceMonitoringsMonitoringTypeDef},
    total=False,
)

InstancesMonitorResponseTypeDef = TypedDict(
    "InstancesMonitorResponseTypeDef",
    {"InstanceMonitorings": List[InstancesMonitorResponseInstanceMonitoringsTypeDef]},
    total=False,
)

InstancesStartResponseStartingInstancesCurrentStateTypeDef = TypedDict(
    "InstancesStartResponseStartingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstancesStartResponseStartingInstancesPreviousStateTypeDef = TypedDict(
    "InstancesStartResponseStartingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstancesStartResponseStartingInstancesTypeDef = TypedDict(
    "InstancesStartResponseStartingInstancesTypeDef",
    {
        "CurrentState": InstancesStartResponseStartingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": InstancesStartResponseStartingInstancesPreviousStateTypeDef,
    },
    total=False,
)

InstancesStartResponseTypeDef = TypedDict(
    "InstancesStartResponseTypeDef",
    {"StartingInstances": List[InstancesStartResponseStartingInstancesTypeDef]},
    total=False,
)

InstancesStopResponseStoppingInstancesCurrentStateTypeDef = TypedDict(
    "InstancesStopResponseStoppingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstancesStopResponseStoppingInstancesPreviousStateTypeDef = TypedDict(
    "InstancesStopResponseStoppingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstancesStopResponseStoppingInstancesTypeDef = TypedDict(
    "InstancesStopResponseStoppingInstancesTypeDef",
    {
        "CurrentState": InstancesStopResponseStoppingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": InstancesStopResponseStoppingInstancesPreviousStateTypeDef,
    },
    total=False,
)

InstancesStopResponseTypeDef = TypedDict(
    "InstancesStopResponseTypeDef",
    {"StoppingInstances": List[InstancesStopResponseStoppingInstancesTypeDef]},
    total=False,
)

InstancesTerminateResponseTerminatingInstancesCurrentStateTypeDef = TypedDict(
    "InstancesTerminateResponseTerminatingInstancesCurrentStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstancesTerminateResponseTerminatingInstancesPreviousStateTypeDef = TypedDict(
    "InstancesTerminateResponseTerminatingInstancesPreviousStateTypeDef",
    {
        "Code": int,
        "Name": Literal["pending", "running", "shutting-down", "terminated", "stopping", "stopped"],
    },
    total=False,
)

InstancesTerminateResponseTerminatingInstancesTypeDef = TypedDict(
    "InstancesTerminateResponseTerminatingInstancesTypeDef",
    {
        "CurrentState": InstancesTerminateResponseTerminatingInstancesCurrentStateTypeDef,
        "InstanceId": str,
        "PreviousState": InstancesTerminateResponseTerminatingInstancesPreviousStateTypeDef,
    },
    total=False,
)

InstancesTerminateResponseTypeDef = TypedDict(
    "InstancesTerminateResponseTypeDef",
    {"TerminatingInstances": List[InstancesTerminateResponseTerminatingInstancesTypeDef]},
    total=False,
)

InstancesUnmonitorResponseInstanceMonitoringsMonitoringTypeDef = TypedDict(
    "InstancesUnmonitorResponseInstanceMonitoringsMonitoringTypeDef",
    {"State": Literal["disabled", "disabling", "enabled", "pending"]},
    total=False,
)

InstancesUnmonitorResponseInstanceMonitoringsTypeDef = TypedDict(
    "InstancesUnmonitorResponseInstanceMonitoringsTypeDef",
    {
        "InstanceId": str,
        "Monitoring": InstancesUnmonitorResponseInstanceMonitoringsMonitoringTypeDef,
    },
    total=False,
)

InstancesUnmonitorResponseTypeDef = TypedDict(
    "InstancesUnmonitorResponseTypeDef",
    {"InstanceMonitorings": List[InstancesUnmonitorResponseInstanceMonitoringsTypeDef]},
    total=False,
)

InternetGatewayCreateTagsTagsTypeDef = TypedDict(
    "InternetGatewayCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

InternetGatewaysFilterFiltersTypeDef = TypedDict(
    "InternetGatewaysFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

KeyPairExistsWaitFiltersTypeDef = TypedDict(
    "KeyPairExistsWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

KeyPairExistsWaitWaiterConfigTypeDef = TypedDict(
    "KeyPairExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

KeyPairsFilterFiltersTypeDef = TypedDict(
    "KeyPairsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

NatGatewayAvailableWaitFiltersTypeDef = TypedDict(
    "NatGatewayAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

NatGatewayAvailableWaitWaiterConfigTypeDef = TypedDict(
    "NatGatewayAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

NetworkAclCreateEntryIcmpTypeCodeTypeDef = TypedDict(
    "NetworkAclCreateEntryIcmpTypeCodeTypeDef", {"Code": int, "Type": int}, total=False
)

NetworkAclCreateEntryPortRangeTypeDef = TypedDict(
    "NetworkAclCreateEntryPortRangeTypeDef", {"From": int, "To": int}, total=False
)

NetworkAclCreateTagsTagsTypeDef = TypedDict(
    "NetworkAclCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

NetworkAclReplaceAssociationResponseTypeDef = TypedDict(
    "NetworkAclReplaceAssociationResponseTypeDef", {"NewAssociationId": str}, total=False
)

NetworkAclReplaceEntryIcmpTypeCodeTypeDef = TypedDict(
    "NetworkAclReplaceEntryIcmpTypeCodeTypeDef", {"Code": int, "Type": int}, total=False
)

NetworkAclReplaceEntryPortRangeTypeDef = TypedDict(
    "NetworkAclReplaceEntryPortRangeTypeDef", {"From": int, "To": int}, total=False
)

NetworkAclsFilterFiltersTypeDef = TypedDict(
    "NetworkAclsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

NetworkInterfaceAssignPrivateIpAddressesResponseAssignedPrivateIpAddressesTypeDef = TypedDict(
    "NetworkInterfaceAssignPrivateIpAddressesResponseAssignedPrivateIpAddressesTypeDef",
    {"PrivateIpAddress": str},
    total=False,
)

NetworkInterfaceAssignPrivateIpAddressesResponseTypeDef = TypedDict(
    "NetworkInterfaceAssignPrivateIpAddressesResponseTypeDef",
    {
        "NetworkInterfaceId": str,
        "AssignedPrivateIpAddresses": List[
            NetworkInterfaceAssignPrivateIpAddressesResponseAssignedPrivateIpAddressesTypeDef
        ],
    },
    total=False,
)

NetworkInterfaceAttachResponseTypeDef = TypedDict(
    "NetworkInterfaceAttachResponseTypeDef", {"AttachmentId": str}, total=False
)

NetworkInterfaceAvailableWaitFiltersTypeDef = TypedDict(
    "NetworkInterfaceAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

NetworkInterfaceAvailableWaitWaiterConfigTypeDef = TypedDict(
    "NetworkInterfaceAvailableWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

NetworkInterfaceCreateTagsTagsTypeDef = TypedDict(
    "NetworkInterfaceCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

NetworkInterfaceDescribeAttributeResponseAttachmentTypeDef = TypedDict(
    "NetworkInterfaceDescribeAttributeResponseAttachmentTypeDef",
    {
        "AttachTime": datetime,
        "AttachmentId": str,
        "DeleteOnTermination": bool,
        "DeviceIndex": int,
        "InstanceId": str,
        "InstanceOwnerId": str,
        "Status": Literal["attaching", "attached", "detaching", "detached"],
    },
    total=False,
)

NetworkInterfaceDescribeAttributeResponseDescriptionTypeDef = TypedDict(
    "NetworkInterfaceDescribeAttributeResponseDescriptionTypeDef", {"Value": str}, total=False
)

NetworkInterfaceDescribeAttributeResponseGroupsTypeDef = TypedDict(
    "NetworkInterfaceDescribeAttributeResponseGroupsTypeDef",
    {"GroupName": str, "GroupId": str},
    total=False,
)

NetworkInterfaceDescribeAttributeResponseSourceDestCheckTypeDef = TypedDict(
    "NetworkInterfaceDescribeAttributeResponseSourceDestCheckTypeDef", {"Value": bool}, total=False
)

NetworkInterfaceDescribeAttributeResponseTypeDef = TypedDict(
    "NetworkInterfaceDescribeAttributeResponseTypeDef",
    {
        "Attachment": NetworkInterfaceDescribeAttributeResponseAttachmentTypeDef,
        "Description": NetworkInterfaceDescribeAttributeResponseDescriptionTypeDef,
        "Groups": List[NetworkInterfaceDescribeAttributeResponseGroupsTypeDef],
        "NetworkInterfaceId": str,
        "SourceDestCheck": NetworkInterfaceDescribeAttributeResponseSourceDestCheckTypeDef,
    },
    total=False,
)

NetworkInterfaceModifyAttributeAttachmentTypeDef = TypedDict(
    "NetworkInterfaceModifyAttributeAttachmentTypeDef",
    {"AttachmentId": str, "DeleteOnTermination": bool},
    total=False,
)

NetworkInterfaceModifyAttributeDescriptionTypeDef = TypedDict(
    "NetworkInterfaceModifyAttributeDescriptionTypeDef", {"Value": str}, total=False
)

NetworkInterfaceModifyAttributeSourceDestCheckTypeDef = TypedDict(
    "NetworkInterfaceModifyAttributeSourceDestCheckTypeDef", {"Value": bool}, total=False
)

NetworkInterfacesFilterFiltersTypeDef = TypedDict(
    "NetworkInterfacesFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

PasswordDataAvailableWaitWaiterConfigTypeDef = TypedDict(
    "PasswordDataAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

PlacementGroupsFilterFiltersTypeDef = TypedDict(
    "PlacementGroupsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

RouteTableCreateTagsTagsTypeDef = TypedDict(
    "RouteTableCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

RouteTablesFilterFiltersTypeDef = TypedDict(
    "RouteTablesFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SecurityGroupAuthorizeEgressIpPermissionsIpRangesTypeDef = TypedDict(
    "SecurityGroupAuthorizeEgressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

SecurityGroupAuthorizeEgressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "SecurityGroupAuthorizeEgressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

SecurityGroupAuthorizeEgressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "SecurityGroupAuthorizeEgressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

SecurityGroupAuthorizeEgressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "SecurityGroupAuthorizeEgressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

SecurityGroupAuthorizeEgressIpPermissionsTypeDef = TypedDict(
    "SecurityGroupAuthorizeEgressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[SecurityGroupAuthorizeEgressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[SecurityGroupAuthorizeEgressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[SecurityGroupAuthorizeEgressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[SecurityGroupAuthorizeEgressIpPermissionsUserIdGroupPairsTypeDef],
    },
    total=False,
)

SecurityGroupAuthorizeIngressIpPermissionsIpRangesTypeDef = TypedDict(
    "SecurityGroupAuthorizeIngressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

SecurityGroupAuthorizeIngressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "SecurityGroupAuthorizeIngressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

SecurityGroupAuthorizeIngressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "SecurityGroupAuthorizeIngressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

SecurityGroupAuthorizeIngressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "SecurityGroupAuthorizeIngressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

SecurityGroupAuthorizeIngressIpPermissionsTypeDef = TypedDict(
    "SecurityGroupAuthorizeIngressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[SecurityGroupAuthorizeIngressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[SecurityGroupAuthorizeIngressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[SecurityGroupAuthorizeIngressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[SecurityGroupAuthorizeIngressIpPermissionsUserIdGroupPairsTypeDef],
    },
    total=False,
)

SecurityGroupCreateTagsTagsTypeDef = TypedDict(
    "SecurityGroupCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

SecurityGroupExistsWaitFiltersTypeDef = TypedDict(
    "SecurityGroupExistsWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SecurityGroupExistsWaitWaiterConfigTypeDef = TypedDict(
    "SecurityGroupExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

SecurityGroupRevokeEgressIpPermissionsIpRangesTypeDef = TypedDict(
    "SecurityGroupRevokeEgressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

SecurityGroupRevokeEgressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "SecurityGroupRevokeEgressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

SecurityGroupRevokeEgressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "SecurityGroupRevokeEgressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

SecurityGroupRevokeEgressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "SecurityGroupRevokeEgressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

SecurityGroupRevokeEgressIpPermissionsTypeDef = TypedDict(
    "SecurityGroupRevokeEgressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[SecurityGroupRevokeEgressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[SecurityGroupRevokeEgressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[SecurityGroupRevokeEgressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[SecurityGroupRevokeEgressIpPermissionsUserIdGroupPairsTypeDef],
    },
    total=False,
)

SecurityGroupRevokeIngressIpPermissionsIpRangesTypeDef = TypedDict(
    "SecurityGroupRevokeIngressIpPermissionsIpRangesTypeDef",
    {"CidrIp": str, "Description": str},
    total=False,
)

SecurityGroupRevokeIngressIpPermissionsIpv6RangesTypeDef = TypedDict(
    "SecurityGroupRevokeIngressIpPermissionsIpv6RangesTypeDef",
    {"CidrIpv6": str, "Description": str},
    total=False,
)

SecurityGroupRevokeIngressIpPermissionsPrefixListIdsTypeDef = TypedDict(
    "SecurityGroupRevokeIngressIpPermissionsPrefixListIdsTypeDef",
    {"Description": str, "PrefixListId": str},
    total=False,
)

SecurityGroupRevokeIngressIpPermissionsUserIdGroupPairsTypeDef = TypedDict(
    "SecurityGroupRevokeIngressIpPermissionsUserIdGroupPairsTypeDef",
    {
        "Description": str,
        "GroupId": str,
        "GroupName": str,
        "PeeringStatus": str,
        "UserId": str,
        "VpcId": str,
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

SecurityGroupRevokeIngressIpPermissionsTypeDef = TypedDict(
    "SecurityGroupRevokeIngressIpPermissionsTypeDef",
    {
        "FromPort": int,
        "IpProtocol": str,
        "IpRanges": List[SecurityGroupRevokeIngressIpPermissionsIpRangesTypeDef],
        "Ipv6Ranges": List[SecurityGroupRevokeIngressIpPermissionsIpv6RangesTypeDef],
        "PrefixListIds": List[SecurityGroupRevokeIngressIpPermissionsPrefixListIdsTypeDef],
        "ToPort": int,
        "UserIdGroupPairs": List[SecurityGroupRevokeIngressIpPermissionsUserIdGroupPairsTypeDef],
    },
    total=False,
)

SecurityGroupsFilterFiltersTypeDef = TypedDict(
    "SecurityGroupsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

ServiceResourceCreateDhcpOptionsDhcpConfigurationsTypeDef = TypedDict(
    "ServiceResourceCreateDhcpOptionsDhcpConfigurationsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)

ServiceResourceCreateInstancesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ServiceResourceCreateInstancesBlockDeviceMappingsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ServiceResourceCreateInstancesBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

ServiceResourceCreateInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "ServiceResourceCreateInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

ServiceResourceCreateInstancesCapacityReservationSpecificationTypeDef = TypedDict(
    "ServiceResourceCreateInstancesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": ServiceResourceCreateInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

ServiceResourceCreateInstancesCpuOptionsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesCpuOptionsTypeDef",
    {"CoreCount": int, "ThreadsPerCore": int},
    total=False,
)

ServiceResourceCreateInstancesCreditSpecificationTypeDef = TypedDict(
    "ServiceResourceCreateInstancesCreditSpecificationTypeDef", {"CpuCredits": str}
)

ServiceResourceCreateInstancesElasticGpuSpecificationTypeDef = TypedDict(
    "ServiceResourceCreateInstancesElasticGpuSpecificationTypeDef", {"Type": str}
)

ServiceResourceCreateInstancesElasticInferenceAcceleratorsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesElasticInferenceAcceleratorsTypeDef", {"Type": str}
)

ServiceResourceCreateInstancesHibernationOptionsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesHibernationOptionsTypeDef", {"Configured": bool}, total=False
)

ServiceResourceCreateInstancesIamInstanceProfileTypeDef = TypedDict(
    "ServiceResourceCreateInstancesIamInstanceProfileTypeDef",
    {"Arn": str, "Name": str},
    total=False,
)

ServiceResourceCreateInstancesInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

ServiceResourceCreateInstancesInstanceMarketOptionsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": ServiceResourceCreateInstancesInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

ServiceResourceCreateInstancesIpv6AddressesTypeDef = TypedDict(
    "ServiceResourceCreateInstancesIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

ServiceResourceCreateInstancesLaunchTemplateTypeDef = TypedDict(
    "ServiceResourceCreateInstancesLaunchTemplateTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

ServiceResourceCreateInstancesLicenseSpecificationsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

ServiceResourceCreateInstancesMetadataOptionsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesMetadataOptionsTypeDef",
    {
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

ServiceResourceCreateInstancesMonitoringTypeDef = TypedDict(
    "ServiceResourceCreateInstancesMonitoringTypeDef", {"Enabled": bool}
)

ServiceResourceCreateInstancesNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "ServiceResourceCreateInstancesNetworkInterfacesIpv6AddressesTypeDef",
    {"Ipv6Address": str},
    total=False,
)

ServiceResourceCreateInstancesNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "ServiceResourceCreateInstancesNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ServiceResourceCreateInstancesNetworkInterfacesTypeDef = TypedDict(
    "ServiceResourceCreateInstancesNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[ServiceResourceCreateInstancesNetworkInterfacesIpv6AddressesTypeDef],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[
            ServiceResourceCreateInstancesNetworkInterfacesPrivateIpAddressesTypeDef
        ],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

ServiceResourceCreateInstancesPlacementTypeDef = TypedDict(
    "ServiceResourceCreateInstancesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

ServiceResourceCreateInstancesTagSpecificationsTagsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ServiceResourceCreateInstancesTagSpecificationsTypeDef = TypedDict(
    "ServiceResourceCreateInstancesTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ServiceResourceCreateInstancesTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ServiceResourceCreateNetworkInterfaceIpv6AddressesTypeDef = TypedDict(
    "ServiceResourceCreateNetworkInterfaceIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

ServiceResourceCreateNetworkInterfacePrivateIpAddressesTypeDef = TypedDict(
    "ServiceResourceCreateNetworkInterfacePrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

ServiceResourceCreateSnapshotTagSpecificationsTagsTypeDef = TypedDict(
    "ServiceResourceCreateSnapshotTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ServiceResourceCreateSnapshotTagSpecificationsTypeDef = TypedDict(
    "ServiceResourceCreateSnapshotTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ServiceResourceCreateSnapshotTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ServiceResourceCreateVolumeTagSpecificationsTagsTypeDef = TypedDict(
    "ServiceResourceCreateVolumeTagSpecificationsTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

ServiceResourceCreateVolumeTagSpecificationsTypeDef = TypedDict(
    "ServiceResourceCreateVolumeTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[ServiceResourceCreateVolumeTagSpecificationsTagsTypeDef],
    },
    total=False,
)

ServiceResourceRegisterImageBlockDeviceMappingsEbsTypeDef = TypedDict(
    "ServiceResourceRegisterImageBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

ServiceResourceRegisterImageBlockDeviceMappingsTypeDef = TypedDict(
    "ServiceResourceRegisterImageBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": ServiceResourceRegisterImageBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

SnapshotCompletedWaitFiltersTypeDef = TypedDict(
    "SnapshotCompletedWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SnapshotCompletedWaitWaiterConfigTypeDef = TypedDict(
    "SnapshotCompletedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

SnapshotCopyResponseTagsTypeDef = TypedDict(
    "SnapshotCopyResponseTagsTypeDef", {"Key": str, "Value": str}, total=False
)

SnapshotCopyResponseTypeDef = TypedDict(
    "SnapshotCopyResponseTypeDef",
    {"SnapshotId": str, "Tags": List[SnapshotCopyResponseTagsTypeDef]},
    total=False,
)

SnapshotCopyTagSpecificationsTagsTypeDef = TypedDict(
    "SnapshotCopyTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

SnapshotCopyTagSpecificationsTypeDef = TypedDict(
    "SnapshotCopyTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[SnapshotCopyTagSpecificationsTagsTypeDef],
    },
    total=False,
)

SnapshotCreateTagsTagsTypeDef = TypedDict(
    "SnapshotCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

SnapshotDescribeAttributeResponseCreateVolumePermissionsTypeDef = TypedDict(
    "SnapshotDescribeAttributeResponseCreateVolumePermissionsTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

SnapshotDescribeAttributeResponseProductCodesTypeDef = TypedDict(
    "SnapshotDescribeAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

SnapshotDescribeAttributeResponseTypeDef = TypedDict(
    "SnapshotDescribeAttributeResponseTypeDef",
    {
        "CreateVolumePermissions": List[
            SnapshotDescribeAttributeResponseCreateVolumePermissionsTypeDef
        ],
        "ProductCodes": List[SnapshotDescribeAttributeResponseProductCodesTypeDef],
        "SnapshotId": str,
    },
    total=False,
)

SnapshotModifyAttributeCreateVolumePermissionAddTypeDef = TypedDict(
    "SnapshotModifyAttributeCreateVolumePermissionAddTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

SnapshotModifyAttributeCreateVolumePermissionRemoveTypeDef = TypedDict(
    "SnapshotModifyAttributeCreateVolumePermissionRemoveTypeDef",
    {"Group": str, "UserId": str},
    total=False,
)

SnapshotModifyAttributeCreateVolumePermissionTypeDef = TypedDict(
    "SnapshotModifyAttributeCreateVolumePermissionTypeDef",
    {
        "Add": List[SnapshotModifyAttributeCreateVolumePermissionAddTypeDef],
        "Remove": List[SnapshotModifyAttributeCreateVolumePermissionRemoveTypeDef],
    },
    total=False,
)

SnapshotWaitUntilCompletedFiltersTypeDef = TypedDict(
    "SnapshotWaitUntilCompletedFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SnapshotsFilterFiltersTypeDef = TypedDict(
    "SnapshotsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SpotInstanceRequestFulfilledWaitFiltersTypeDef = TypedDict(
    "SpotInstanceRequestFulfilledWaitFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

SpotInstanceRequestFulfilledWaitWaiterConfigTypeDef = TypedDict(
    "SpotInstanceRequestFulfilledWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

SubnetAvailableWaitFiltersTypeDef = TypedDict(
    "SubnetAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SubnetAvailableWaitWaiterConfigTypeDef = TypedDict(
    "SubnetAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

SubnetCreateInstancesBlockDeviceMappingsEbsTypeDef = TypedDict(
    "SubnetCreateInstancesBlockDeviceMappingsEbsTypeDef",
    {
        "DeleteOnTermination": bool,
        "Iops": int,
        "SnapshotId": str,
        "VolumeSize": int,
        "VolumeType": Literal["standard", "io1", "gp2", "sc1", "st1"],
        "Encrypted": bool,
        "KmsKeyId": str,
    },
    total=False,
)

SubnetCreateInstancesBlockDeviceMappingsTypeDef = TypedDict(
    "SubnetCreateInstancesBlockDeviceMappingsTypeDef",
    {
        "DeviceName": str,
        "VirtualName": str,
        "Ebs": SubnetCreateInstancesBlockDeviceMappingsEbsTypeDef,
        "NoDevice": str,
    },
    total=False,
)

SubnetCreateInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef = TypedDict(
    "SubnetCreateInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef",
    {"CapacityReservationId": str},
    total=False,
)

SubnetCreateInstancesCapacityReservationSpecificationTypeDef = TypedDict(
    "SubnetCreateInstancesCapacityReservationSpecificationTypeDef",
    {
        "CapacityReservationPreference": Literal["open", "none"],
        "CapacityReservationTarget": SubnetCreateInstancesCapacityReservationSpecificationCapacityReservationTargetTypeDef,
    },
    total=False,
)

SubnetCreateInstancesCpuOptionsTypeDef = TypedDict(
    "SubnetCreateInstancesCpuOptionsTypeDef", {"CoreCount": int, "ThreadsPerCore": int}, total=False
)

SubnetCreateInstancesCreditSpecificationTypeDef = TypedDict(
    "SubnetCreateInstancesCreditSpecificationTypeDef", {"CpuCredits": str}
)

SubnetCreateInstancesElasticGpuSpecificationTypeDef = TypedDict(
    "SubnetCreateInstancesElasticGpuSpecificationTypeDef", {"Type": str}
)

SubnetCreateInstancesElasticInferenceAcceleratorsTypeDef = TypedDict(
    "SubnetCreateInstancesElasticInferenceAcceleratorsTypeDef", {"Type": str}
)

SubnetCreateInstancesHibernationOptionsTypeDef = TypedDict(
    "SubnetCreateInstancesHibernationOptionsTypeDef", {"Configured": bool}, total=False
)

SubnetCreateInstancesIamInstanceProfileTypeDef = TypedDict(
    "SubnetCreateInstancesIamInstanceProfileTypeDef", {"Arn": str, "Name": str}, total=False
)

SubnetCreateInstancesInstanceMarketOptionsSpotOptionsTypeDef = TypedDict(
    "SubnetCreateInstancesInstanceMarketOptionsSpotOptionsTypeDef",
    {
        "MaxPrice": str,
        "SpotInstanceType": Literal["one-time", "persistent"],
        "BlockDurationMinutes": int,
        "ValidUntil": datetime,
        "InstanceInterruptionBehavior": Literal["hibernate", "stop", "terminate"],
    },
    total=False,
)

SubnetCreateInstancesInstanceMarketOptionsTypeDef = TypedDict(
    "SubnetCreateInstancesInstanceMarketOptionsTypeDef",
    {
        "MarketType": str,
        "SpotOptions": SubnetCreateInstancesInstanceMarketOptionsSpotOptionsTypeDef,
    },
    total=False,
)

SubnetCreateInstancesIpv6AddressesTypeDef = TypedDict(
    "SubnetCreateInstancesIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

SubnetCreateInstancesLaunchTemplateTypeDef = TypedDict(
    "SubnetCreateInstancesLaunchTemplateTypeDef",
    {"LaunchTemplateId": str, "LaunchTemplateName": str, "Version": str},
    total=False,
)

SubnetCreateInstancesLicenseSpecificationsTypeDef = TypedDict(
    "SubnetCreateInstancesLicenseSpecificationsTypeDef",
    {"LicenseConfigurationArn": str},
    total=False,
)

SubnetCreateInstancesMetadataOptionsTypeDef = TypedDict(
    "SubnetCreateInstancesMetadataOptionsTypeDef",
    {
        "HttpTokens": Literal["optional", "required"],
        "HttpPutResponseHopLimit": int,
        "HttpEndpoint": Literal["disabled", "enabled"],
    },
    total=False,
)

SubnetCreateInstancesMonitoringTypeDef = TypedDict(
    "SubnetCreateInstancesMonitoringTypeDef", {"Enabled": bool}
)

SubnetCreateInstancesNetworkInterfacesIpv6AddressesTypeDef = TypedDict(
    "SubnetCreateInstancesNetworkInterfacesIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

SubnetCreateInstancesNetworkInterfacesPrivateIpAddressesTypeDef = TypedDict(
    "SubnetCreateInstancesNetworkInterfacesPrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

SubnetCreateInstancesNetworkInterfacesTypeDef = TypedDict(
    "SubnetCreateInstancesNetworkInterfacesTypeDef",
    {
        "AssociatePublicIpAddress": bool,
        "DeleteOnTermination": bool,
        "Description": str,
        "DeviceIndex": int,
        "Groups": List[str],
        "Ipv6AddressCount": int,
        "Ipv6Addresses": List[SubnetCreateInstancesNetworkInterfacesIpv6AddressesTypeDef],
        "NetworkInterfaceId": str,
        "PrivateIpAddress": str,
        "PrivateIpAddresses": List[SubnetCreateInstancesNetworkInterfacesPrivateIpAddressesTypeDef],
        "SecondaryPrivateIpAddressCount": int,
        "SubnetId": str,
        "InterfaceType": str,
    },
    total=False,
)

SubnetCreateInstancesPlacementTypeDef = TypedDict(
    "SubnetCreateInstancesPlacementTypeDef",
    {
        "AvailabilityZone": str,
        "Affinity": str,
        "GroupName": str,
        "PartitionNumber": int,
        "HostId": str,
        "Tenancy": Literal["default", "dedicated", "host"],
        "SpreadDomain": str,
        "HostResourceGroupArn": str,
    },
    total=False,
)

SubnetCreateInstancesTagSpecificationsTagsTypeDef = TypedDict(
    "SubnetCreateInstancesTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

SubnetCreateInstancesTagSpecificationsTypeDef = TypedDict(
    "SubnetCreateInstancesTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[SubnetCreateInstancesTagSpecificationsTagsTypeDef],
    },
    total=False,
)

SubnetCreateNetworkInterfaceIpv6AddressesTypeDef = TypedDict(
    "SubnetCreateNetworkInterfaceIpv6AddressesTypeDef", {"Ipv6Address": str}, total=False
)

SubnetCreateNetworkInterfacePrivateIpAddressesTypeDef = TypedDict(
    "SubnetCreateNetworkInterfacePrivateIpAddressesTypeDef",
    {"Primary": bool, "PrivateIpAddress": str},
    total=False,
)

SubnetCreateTagsTagsTypeDef = TypedDict(
    "SubnetCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

SubnetsFilterFiltersTypeDef = TypedDict(
    "SubnetsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SystemStatusOkWaitFiltersTypeDef = TypedDict(
    "SystemStatusOkWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

SystemStatusOkWaitWaiterConfigTypeDef = TypedDict(
    "SystemStatusOkWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

_RequiredTagTypeDef = TypedDict("_RequiredTagTypeDef", {"Key": str})
_OptionalTagTypeDef = TypedDict("_OptionalTagTypeDef", {"Value": str}, total=False)


class TagTypeDef(_RequiredTagTypeDef, _OptionalTagTypeDef):
    pass


VolumeAttachToInstanceResponseTypeDef = TypedDict(
    "VolumeAttachToInstanceResponseTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

VolumeAvailableWaitFiltersTypeDef = TypedDict(
    "VolumeAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VolumeAvailableWaitWaiterConfigTypeDef = TypedDict(
    "VolumeAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

VolumeCreateSnapshotTagSpecificationsTagsTypeDef = TypedDict(
    "VolumeCreateSnapshotTagSpecificationsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

VolumeCreateSnapshotTagSpecificationsTypeDef = TypedDict(
    "VolumeCreateSnapshotTagSpecificationsTypeDef",
    {
        "ResourceType": Literal[
            "client-vpn-endpoint",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "elastic-ip",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "instance",
            "internet-gateway",
            "launch-template",
            "natgateway",
            "network-acl",
            "network-interface",
            "reserved-instances",
            "route-table",
            "security-group",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "traffic-mirror-filter",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-multicast-domain",
            "transit-gateway-route-table",
            "volume",
            "vpc",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-gateway",
        ],
        "Tags": List[VolumeCreateSnapshotTagSpecificationsTagsTypeDef],
    },
    total=False,
)

VolumeCreateTagsTagsTypeDef = TypedDict(
    "VolumeCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

VolumeDeletedWaitFiltersTypeDef = TypedDict(
    "VolumeDeletedWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VolumeDeletedWaitWaiterConfigTypeDef = TypedDict(
    "VolumeDeletedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

VolumeDescribeAttributeResponseAutoEnableIOTypeDef = TypedDict(
    "VolumeDescribeAttributeResponseAutoEnableIOTypeDef", {"Value": bool}, total=False
)

VolumeDescribeAttributeResponseProductCodesTypeDef = TypedDict(
    "VolumeDescribeAttributeResponseProductCodesTypeDef",
    {"ProductCodeId": str, "ProductCodeType": Literal["devpay", "marketplace"]},
    total=False,
)

VolumeDescribeAttributeResponseTypeDef = TypedDict(
    "VolumeDescribeAttributeResponseTypeDef",
    {
        "AutoEnableIO": VolumeDescribeAttributeResponseAutoEnableIOTypeDef,
        "ProductCodes": List[VolumeDescribeAttributeResponseProductCodesTypeDef],
        "VolumeId": str,
    },
    total=False,
)

VolumeDescribeStatusFiltersTypeDef = TypedDict(
    "VolumeDescribeStatusFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VolumeDescribeStatusResponseVolumeStatusesActionsTypeDef = TypedDict(
    "VolumeDescribeStatusResponseVolumeStatusesActionsTypeDef",
    {"Code": str, "Description": str, "EventId": str, "EventType": str},
    total=False,
)

VolumeDescribeStatusResponseVolumeStatusesEventsTypeDef = TypedDict(
    "VolumeDescribeStatusResponseVolumeStatusesEventsTypeDef",
    {
        "Description": str,
        "EventId": str,
        "EventType": str,
        "NotAfter": datetime,
        "NotBefore": datetime,
    },
    total=False,
)

VolumeDescribeStatusResponseVolumeStatusesVolumeStatusDetailsTypeDef = TypedDict(
    "VolumeDescribeStatusResponseVolumeStatusesVolumeStatusDetailsTypeDef",
    {"Name": Literal["io-enabled", "io-performance"], "Status": str},
    total=False,
)

VolumeDescribeStatusResponseVolumeStatusesVolumeStatusTypeDef = TypedDict(
    "VolumeDescribeStatusResponseVolumeStatusesVolumeStatusTypeDef",
    {
        "Details": List[VolumeDescribeStatusResponseVolumeStatusesVolumeStatusDetailsTypeDef],
        "Status": Literal["ok", "impaired", "insufficient-data"],
    },
    total=False,
)

VolumeDescribeStatusResponseVolumeStatusesTypeDef = TypedDict(
    "VolumeDescribeStatusResponseVolumeStatusesTypeDef",
    {
        "Actions": List[VolumeDescribeStatusResponseVolumeStatusesActionsTypeDef],
        "AvailabilityZone": str,
        "OutpostArn": str,
        "Events": List[VolumeDescribeStatusResponseVolumeStatusesEventsTypeDef],
        "VolumeId": str,
        "VolumeStatus": VolumeDescribeStatusResponseVolumeStatusesVolumeStatusTypeDef,
    },
    total=False,
)

VolumeDescribeStatusResponseTypeDef = TypedDict(
    "VolumeDescribeStatusResponseTypeDef",
    {"NextToken": str, "VolumeStatuses": List[VolumeDescribeStatusResponseVolumeStatusesTypeDef]},
    total=False,
)

VolumeDetachFromInstanceResponseTypeDef = TypedDict(
    "VolumeDetachFromInstanceResponseTypeDef",
    {
        "AttachTime": datetime,
        "Device": str,
        "InstanceId": str,
        "State": Literal["attaching", "attached", "detaching", "detached", "busy"],
        "VolumeId": str,
        "DeleteOnTermination": bool,
    },
    total=False,
)

VolumeInUseWaitFiltersTypeDef = TypedDict(
    "VolumeInUseWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VolumeInUseWaitWaiterConfigTypeDef = TypedDict(
    "VolumeInUseWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

VolumeModifyAttributeAutoEnableIOTypeDef = TypedDict(
    "VolumeModifyAttributeAutoEnableIOTypeDef", {"Value": bool}, total=False
)

VolumesFilterFiltersTypeDef = TypedDict(
    "VolumesFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcAddressAssociateResponseTypeDef = TypedDict(
    "VpcAddressAssociateResponseTypeDef", {"AssociationId": str}, total=False
)

VpcAttachClassicLinkInstanceResponseTypeDef = TypedDict(
    "VpcAttachClassicLinkInstanceResponseTypeDef", {"Return": bool}, total=False
)

VpcAvailableWaitFiltersTypeDef = TypedDict(
    "VpcAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcAvailableWaitWaiterConfigTypeDef = TypedDict(
    "VpcAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

VpcCreateTagsTagsTypeDef = TypedDict(
    "VpcCreateTagsTagsTypeDef", {"Key": str, "Value": str}, total=False
)

VpcDescribeAttributeResponseEnableDnsHostnamesTypeDef = TypedDict(
    "VpcDescribeAttributeResponseEnableDnsHostnamesTypeDef", {"Value": bool}, total=False
)

VpcDescribeAttributeResponseEnableDnsSupportTypeDef = TypedDict(
    "VpcDescribeAttributeResponseEnableDnsSupportTypeDef", {"Value": bool}, total=False
)

VpcDescribeAttributeResponseTypeDef = TypedDict(
    "VpcDescribeAttributeResponseTypeDef",
    {
        "VpcId": str,
        "EnableDnsHostnames": VpcDescribeAttributeResponseEnableDnsHostnamesTypeDef,
        "EnableDnsSupport": VpcDescribeAttributeResponseEnableDnsSupportTypeDef,
    },
    total=False,
)

VpcDetachClassicLinkInstanceResponseTypeDef = TypedDict(
    "VpcDetachClassicLinkInstanceResponseTypeDef", {"Return": bool}, total=False
)

VpcDisableClassicLinkResponseTypeDef = TypedDict(
    "VpcDisableClassicLinkResponseTypeDef", {"Return": bool}, total=False
)

VpcEnableClassicLinkResponseTypeDef = TypedDict(
    "VpcEnableClassicLinkResponseTypeDef", {"Return": bool}, total=False
)

VpcExistsWaitFiltersTypeDef = TypedDict(
    "VpcExistsWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcExistsWaitWaiterConfigTypeDef = TypedDict(
    "VpcExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

VpcModifyAttributeEnableDnsHostnamesTypeDef = TypedDict(
    "VpcModifyAttributeEnableDnsHostnamesTypeDef", {"Value": bool}, total=False
)

VpcModifyAttributeEnableDnsSupportTypeDef = TypedDict(
    "VpcModifyAttributeEnableDnsSupportTypeDef", {"Value": bool}, total=False
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef",
    {"CidrBlock": str},
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef",
    {"Ipv6CidrBlock": str},
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef",
    {
        "AllowDnsResolutionFromRemoteVpc": bool,
        "AllowEgressFromLocalClassicLinkToRemoteVpc": bool,
        "AllowEgressFromLocalVpcToRemoteClassicLink": bool,
    },
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoTypeDef",
    {
        "CidrBlock": str,
        "Ipv6CidrBlockSet": List[
            VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSetTypeDef
        ],
        "CidrBlockSet": List[
            VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoCidrBlockSetTypeDef
        ],
        "OwnerId": str,
        "PeeringOptions": VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoPeeringOptionsTypeDef,
        "VpcId": str,
        "Region": str,
    },
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionStatusTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionStatusTypeDef",
    {
        "Code": Literal[
            "initiating-request",
            "pending-acceptance",
            "active",
            "deleted",
            "rejected",
            "failed",
            "expired",
            "provisioning",
            "deleting",
        ],
        "Message": str,
    },
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionTagsTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)

VpcPeeringConnectionAcceptResponseVpcPeeringConnectionTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseVpcPeeringConnectionTypeDef",
    {
        "AccepterVpcInfo": VpcPeeringConnectionAcceptResponseVpcPeeringConnectionAccepterVpcInfoTypeDef,
        "ExpirationTime": datetime,
        "RequesterVpcInfo": VpcPeeringConnectionAcceptResponseVpcPeeringConnectionRequesterVpcInfoTypeDef,
        "Status": VpcPeeringConnectionAcceptResponseVpcPeeringConnectionStatusTypeDef,
        "Tags": List[VpcPeeringConnectionAcceptResponseVpcPeeringConnectionTagsTypeDef],
        "VpcPeeringConnectionId": str,
    },
    total=False,
)

VpcPeeringConnectionAcceptResponseTypeDef = TypedDict(
    "VpcPeeringConnectionAcceptResponseTypeDef",
    {"VpcPeeringConnection": VpcPeeringConnectionAcceptResponseVpcPeeringConnectionTypeDef},
    total=False,
)

VpcPeeringConnectionDeleteResponseTypeDef = TypedDict(
    "VpcPeeringConnectionDeleteResponseTypeDef", {"Return": bool}, total=False
)

VpcPeeringConnectionDeletedWaitFiltersTypeDef = TypedDict(
    "VpcPeeringConnectionDeletedWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcPeeringConnectionDeletedWaitWaiterConfigTypeDef = TypedDict(
    "VpcPeeringConnectionDeletedWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

VpcPeeringConnectionExistsWaitFiltersTypeDef = TypedDict(
    "VpcPeeringConnectionExistsWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcPeeringConnectionExistsWaitWaiterConfigTypeDef = TypedDict(
    "VpcPeeringConnectionExistsWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)

VpcPeeringConnectionRejectResponseTypeDef = TypedDict(
    "VpcPeeringConnectionRejectResponseTypeDef", {"Return": bool}, total=False
)

VpcPeeringConnectionWaitUntilExistsFiltersTypeDef = TypedDict(
    "VpcPeeringConnectionWaitUntilExistsFiltersTypeDef",
    {"Name": str, "Values": List[str]},
    total=False,
)

VpcPeeringConnectionsFilterFiltersTypeDef = TypedDict(
    "VpcPeeringConnectionsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcWaitUntilAvailableFiltersTypeDef = TypedDict(
    "VpcWaitUntilAvailableFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcWaitUntilExistsFiltersTypeDef = TypedDict(
    "VpcWaitUntilExistsFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpcsFilterFiltersTypeDef = TypedDict(
    "VpcsFilterFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpnConnectionAvailableWaitFiltersTypeDef = TypedDict(
    "VpnConnectionAvailableWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpnConnectionAvailableWaitWaiterConfigTypeDef = TypedDict(
    "VpnConnectionAvailableWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)

VpnConnectionDeletedWaitFiltersTypeDef = TypedDict(
    "VpnConnectionDeletedWaitFiltersTypeDef", {"Name": str, "Values": List[str]}, total=False
)

VpnConnectionDeletedWaitWaiterConfigTypeDef = TypedDict(
    "VpnConnectionDeletedWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)
