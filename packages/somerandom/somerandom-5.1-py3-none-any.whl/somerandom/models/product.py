# -*- coding: utf-8 -*-

"""
    somerandom

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Product(object):

    """Implementation of the 'Product' model.

    TODO: type model description here.

    Attributes:
        product_id (string): Unique identifier representing a specific product
            for a given latitude & longitude. For example, uberX in San
            Francisco will have a different product_id than uberX in Los
            Angeles.
        description (string): Description of product.
        display_name (string): Display name of product.
        capacity (int): Capacity of product. For example, 4 people.
        image (string): Image URL representing the product.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_id":'product_id',
        "description":'description',
        "display_name":'display_name',
        "capacity":'capacity',
        "image":'image'
    }

    def __init__(self,
                 product_id=None,
                 description=None,
                 display_name=None,
                 capacity=None,
                 image=None):
        """Constructor for the Product class"""

        # Initialize members of the class
        self.product_id = product_id
        self.description = description
        self.display_name = display_name
        self.capacity = capacity
        self.image = image


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        product_id = dictionary.get('product_id')
        description = dictionary.get('description')
        display_name = dictionary.get('display_name')
        capacity = dictionary.get('capacity')
        image = dictionary.get('image')

        # Return an object of this model
        return cls(product_id,
                   description,
                   display_name,
                   capacity,
                   image)


