# -*- coding: utf-8 -*-

"""
    somerandom

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class PriceEstimate(object):

    """Implementation of the 'PriceEstimate' model.

    TODO: type model description here.

    Attributes:
        product_id (string): Unique identifier representing a specific product
            for a given latitude & longitude. For example, uberX in San
            Francisco will have a different product_id than uberX in Los
            Angeles
        currency_code (string): [ISO
            4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
        display_name (string): Display name of product.
        estimate (string): Formatted string of estimate in local currency of
            the start location. Estimate could be a range, a single number
            (flat rate) or "Metered" for TAXI.
        low_estimate (float): Lower bound of the estimated price.
        high_estimate (float): Upper bound of the estimated price.
        surge_multiplier (float): Expected surge multiplier. Surge is active
            if surge_multiplier is greater than 1. Price estimate already
            factors in the surge multiplier.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_id":'product_id',
        "currency_code":'currency_code',
        "display_name":'display_name',
        "estimate":'estimate',
        "low_estimate":'low_estimate',
        "high_estimate":'high_estimate',
        "surge_multiplier":'surge_multiplier'
    }

    def __init__(self,
                 product_id=None,
                 currency_code=None,
                 display_name=None,
                 estimate=None,
                 low_estimate=None,
                 high_estimate=None,
                 surge_multiplier=None):
        """Constructor for the PriceEstimate class"""

        # Initialize members of the class
        self.product_id = product_id
        self.currency_code = currency_code
        self.display_name = display_name
        self.estimate = estimate
        self.low_estimate = low_estimate
        self.high_estimate = high_estimate
        self.surge_multiplier = surge_multiplier


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        product_id = dictionary.get('product_id')
        currency_code = dictionary.get('currency_code')
        display_name = dictionary.get('display_name')
        estimate = dictionary.get('estimate')
        low_estimate = dictionary.get('low_estimate')
        high_estimate = dictionary.get('high_estimate')
        surge_multiplier = dictionary.get('surge_multiplier')

        # Return an object of this model
        return cls(product_id,
                   currency_code,
                   display_name,
                   estimate,
                   low_estimate,
                   high_estimate,
                   surge_multiplier)


