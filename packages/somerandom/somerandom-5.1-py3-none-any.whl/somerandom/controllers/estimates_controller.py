# -*- coding: utf-8 -*-

"""
    somerandom

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from somerandom.api_helper import APIHelper
from somerandom.configuration import Configuration
from somerandom.controllers.base_controller import BaseController
from somerandom.http.auth.custom_query_auth import CustomQueryAuth
from somerandom.models.product import Product
from somerandom.models.price_estimate import PriceEstimate
from somerandom.exceptions.error_exception import ErrorException

class EstimatesController(BaseController):

    """A Controller to access Endpoints in the somerandom API."""


    def get_estimates_time_get(self,
                               start_latitude,
                               start_longitude,
                               customer_uuid=None,
                               product_id=None):
        """Does a GET request to /estimates/time.

        The Time Estimates endpoint returns ETAs for all products offered at a
        given location, with the responses expressed as integers in seconds.
        We recommend that this endpoint be called every minute to provide the
        most accurate, up-to-date ETAs.

        Args:
            start_latitude (float): Latitude component of start location.
            start_longitude (float): Longitude component of start location.
            customer_uuid (uuid|string, optional): Unique customer identifier
                to be used for experience customization.
            product_id (string, optional): Unique identifier representing a
                specific product for a given latitude & longitude.

        Returns:
            list of Product: Response from the API. An array of products

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/estimates/time'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'start_latitude': start_latitude,
            'start_longitude': start_longitude,
            'customer_uuid': customer_uuid,
            'product_id': product_id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise ErrorException('Unexpected error', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Product.from_dictionary)

    def get_estimates_price_get(self,
                                start_latitude,
                                start_longitude,
                                end_latitude,
                                end_longitude):
        """Does a GET request to /estimates/price.

        The Price Estimates endpoint returns an estimated price range for each
        product offered at a given location. The price estimate is provided as
        a formatted string with the full price range and the localized
        currency symbol.<br><br>The response also includes low and high
        estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217)
        currency code for situations requiring currency conversion. When surge
        is active for a particular product, its surge_multiplier will be
        greater than 1, but the price estimate already factors in this
        multiplier.

        Args:
            start_latitude (float): Latitude component of start location.
            start_longitude (float): Longitude component of start location.
            end_latitude (float): Latitude component of end location.
            end_longitude (float): Longitude component of end location.

        Returns:
            list of PriceEstimate: Response from the API. An array of price
                estimates by product

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/estimates/price'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'start_latitude': start_latitude,
            'start_longitude': start_longitude,
            'end_latitude': end_latitude,
            'end_longitude': end_longitude
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise ErrorException('Unexpected error', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, PriceEstimate.from_dictionary)
