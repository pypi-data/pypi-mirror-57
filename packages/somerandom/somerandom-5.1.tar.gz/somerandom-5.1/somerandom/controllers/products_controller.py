# -*- coding: utf-8 -*-

"""
    somerandom

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from somerandom.api_helper import APIHelper
from somerandom.configuration import Configuration
from somerandom.controllers.base_controller import BaseController
from somerandom.http.auth.custom_query_auth import CustomQueryAuth
from somerandom.models.product import Product
from somerandom.exceptions.error_exception import ErrorException

class ProductsController(BaseController):

    """A Controller to access Endpoints in the somerandom API."""


    def get_products_get(self,
                         latitude,
                         longitude):
        """Does a GET request to /products.

        The Products endpoint returns information about the Uber products
        offered at a given location. The response includes the display name
        and other details about each product, and lists the products in the
        proper display order.

        Args:
            latitude (float): Latitude component of location.
            longitude (float): Longitude component of location.

        Returns:
            list of Product: Response from the API. An array of products

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/products'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'latitude': latitude,
            'longitude': longitude
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise ErrorException('Unexpected error', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Product.from_dictionary)
