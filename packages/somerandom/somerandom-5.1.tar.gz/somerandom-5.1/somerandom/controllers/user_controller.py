# -*- coding: utf-8 -*-

"""
    somerandom

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from somerandom.api_helper import APIHelper
from somerandom.configuration import Configuration
from somerandom.controllers.base_controller import BaseController
from somerandom.http.auth.custom_query_auth import CustomQueryAuth
from somerandom.models.profile import Profile
from somerandom.models.activities import Activities
from somerandom.exceptions.error_exception import ErrorException

class UserController(BaseController):

    """A Controller to access Endpoints in the somerandom API."""


    def get_me_get(self):
        """Does a GET request to /me.

        The User Profile endpoint returns information about the Uber user that
        has authorized with the application.

        Returns:
            Profile: Response from the API. Profile information for a user

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/me'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise ErrorException('Unexpected error', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Profile.from_dictionary)

    def get_history_get(self,
                        offset=None,
                        limit=None):
        """Does a GET request to /history.

        The User Activity endpoint returns data about a user's lifetime
        activity with Uber. The response will include pickup locations and
        times, dropoff locations and times, the distance of past requests, and
        information about which products were requested.<br><br>The history
        array in the response will have a maximum length based on the limit
        parameter. The response value count may exceed limit, therefore
        subsequent API requests may be necessary.

        Args:
            offset (int, optional): Offset the list of returned results by
                this amount. Default is zero.
            limit (int, optional): Number of items to retrieve. Default is 5,
                maximum is 100.

        Returns:
            Activities: Response from the API. History information for the
                given user

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/history'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'offset': offset,
            'limit': limit
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 0:
            raise ErrorException('Unexpected error', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Activities.from_dictionary)
