# coding: utf-8

"""
    Dyspatch API

    # Introduction  The Dyspatch API is based on the REST paradigm and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for the following languages and web frameworks:  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby)   # noqa: E501

    OpenAPI spec version: 2019.10
    Contact: support@dyspatch.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LocalizationMetaRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'language': 'str',
        'name': 'str',
        'url': 'str',
        'draft': 'str'
    }

    attribute_map = {
        'id': 'id',
        'language': 'language',
        'name': 'name',
        'url': 'url',
        'draft': 'draft'
    }

    def __init__(self, id=None, language=None, name=None, url=None, draft=None):  # noqa: E501
        """LocalizationMetaRead - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._language = None
        self._name = None
        self._url = None
        self._draft = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if draft is not None:
            self.draft = draft

    @property
    def id(self):
        """Gets the id of this LocalizationMetaRead.  # noqa: E501

        An opaque, unique identifier for a localization  # noqa: E501

        :return: The id of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocalizationMetaRead.

        An opaque, unique identifier for a localization  # noqa: E501

        :param id: The id of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this LocalizationMetaRead.  # noqa: E501

        A language identifier comprised of a language and a country identifier.  See [supported languages](https://docs.dyspatch.io/localization/supported_languages/).   # noqa: E501

        :return: The language of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LocalizationMetaRead.

        A language identifier comprised of a language and a country identifier.  See [supported languages](https://docs.dyspatch.io/localization/supported_languages/).   # noqa: E501

        :param language: The language of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this LocalizationMetaRead.  # noqa: E501

        The user-specified name of a localization  # noqa: E501

        :return: The name of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocalizationMetaRead.

        The user-specified name of a localization  # noqa: E501

        :param name: The name of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this LocalizationMetaRead.  # noqa: E501

        The API url for a specific localization  # noqa: E501

        :return: The url of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LocalizationMetaRead.

        The API url for a specific localization  # noqa: E501

        :param url: The url of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def draft(self):
        """Gets the draft of this LocalizationMetaRead.  # noqa: E501

        An opaque, unique identifier for a draft  # noqa: E501

        :return: The draft of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this LocalizationMetaRead.

        An opaque, unique identifier for a draft  # noqa: E501

        :param draft: The draft of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._draft = draft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalizationMetaRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalizationMetaRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
