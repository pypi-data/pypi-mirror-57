# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGPUImagePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGPUImagePython', [dirname(__file__)])
        except ImportError:
            import _itkGPUImagePython
            return _itkGPUImagePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGPUImagePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGPUImagePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGPUImagePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkGPUDataManagerPython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import vnl_vector_refPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkFixedArrayPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import itkRGBAPixelPython

def itkGPUImageDataManagerGICVF33_New():
  return itkGPUImageDataManagerGICVF33.New()


def itkGPUImageDataManagerGIVF33_New():
  return itkGPUImageDataManagerGIVF33.New()


def itkGPUImageDataManagerGID3_New():
  return itkGPUImageDataManagerGID3.New()


def itkGPUImageDataManagerGIF3_New():
  return itkGPUImageDataManagerGIF3.New()


def itkGPUImageDataManagerGIUS3_New():
  return itkGPUImageDataManagerGIUS3.New()


def itkGPUImageDataManagerGISS3_New():
  return itkGPUImageDataManagerGISS3.New()


def itkGPUImageDataManagerGIUL3_New():
  return itkGPUImageDataManagerGIUL3.New()


def itkGPUImageDataManagerGIUC3_New():
  return itkGPUImageDataManagerGIUC3.New()


def itkGPUImageDataManagerGICVF22_New():
  return itkGPUImageDataManagerGICVF22.New()


def itkGPUImageDataManagerGIVF22_New():
  return itkGPUImageDataManagerGIVF22.New()


def itkGPUImageDataManagerGID2_New():
  return itkGPUImageDataManagerGID2.New()


def itkGPUImageDataManagerGIF2_New():
  return itkGPUImageDataManagerGIF2.New()


def itkGPUImageDataManagerGIUS2_New():
  return itkGPUImageDataManagerGIUS2.New()


def itkGPUImageDataManagerGISS2_New():
  return itkGPUImageDataManagerGISS2.New()


def itkGPUImageDataManagerGIUL2_New():
  return itkGPUImageDataManagerGIUL2.New()


def itkGPUImageDataManagerGIUC2_New():
  return itkGPUImageDataManagerGIUC2.New()


def itkGPUImageCVF33_New():
  return itkGPUImageCVF33.New()


def itkGPUImageVF33_New():
  return itkGPUImageVF33.New()


def itkGPUImageD3_New():
  return itkGPUImageD3.New()


def itkGPUImageF3_New():
  return itkGPUImageF3.New()


def itkGPUImageUS3_New():
  return itkGPUImageUS3.New()


def itkGPUImageSS3_New():
  return itkGPUImageSS3.New()


def itkGPUImageUL3_New():
  return itkGPUImageUL3.New()


def itkGPUImageUC3_New():
  return itkGPUImageUC3.New()


def itkGPUImageCVF22_New():
  return itkGPUImageCVF22.New()


def itkGPUImageVF22_New():
  return itkGPUImageVF22.New()


def itkGPUImageD2_New():
  return itkGPUImageD2.New()


def itkGPUImageF2_New():
  return itkGPUImageF2.New()


def itkGPUImageUS2_New():
  return itkGPUImageUS2.New()


def itkGPUImageSS2_New():
  return itkGPUImageSS2.New()


def itkGPUImageUL2_New():
  return itkGPUImageUL2.New()


def itkGPUImageUC2_New():
  return itkGPUImageUC2.New()

class itkGPUImageCVF22(itkImagePython.itkImageCVF22):
    """Proxy of C++ itkGPUImageCVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageCVF22_Pointer":
        """__New_orig__() -> itkGPUImageCVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageCVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageCVF22_Pointer":
        """Clone(itkGPUImageCVF22 self) -> itkGPUImageCVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageCVF22_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageCVF22 self, bool initialize=False)
        Allocate(itkGPUImageCVF22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_Allocate(self, initialize)


    def FillBuffer(self, value: 'itkCovariantVectorF2') -> "void":
        """
        FillBuffer(itkGPUImageCVF22 self, itkCovariantVectorF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkCovariantVectorF2') -> "void":
        """
        SetPixel(itkGPUImageCVF22 self, itkIndex2 index, itkCovariantVectorF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF2 &":
        """
        GetPixel(itkGPUImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2
        GetPixel(itkGPUImageCVF22 self, itkIndex2 index) -> itkCovariantVectorF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageCVF22 self)"""
        return _itkGPUImagePython.itkGPUImageCVF22_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF2 const *":
        """
        GetBufferPointer(itkGPUImageCVF22 self) -> itkCovariantVectorF2
        GetBufferPointer(itkGPUImageCVF22 self) -> itkCovariantVectorF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const":
        """
        GetPixelAccessor(itkGPUImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(itkGPUImageCVF22 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::CovariantVector< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::CovariantVector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkGPUImageCVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::CovariantVector< float,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkGPUImageCVF22 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageCVF22_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *":
        """
        GetPixelContainer(itkGPUImageCVF22 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(itkGPUImageCVF22 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageCVF22 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageCVF22_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageCVF22 self) -> int"""
        return _itkGPUImagePython.itkGPUImageCVF22_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGICVF22 *":
        """GetModifiableDataManager(itkGPUImageCVF22 self) -> itkGPUImageDataManagerGICVF22"""
        return _itkGPUImagePython.itkGPUImageCVF22_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGICVF22 *":
        """
        GetDataManager(itkGPUImageCVF22 self) -> itkGPUImageDataManagerGICVF22
        GetDataManager(itkGPUImageCVF22 self) -> itkGPUImageDataManagerGICVF22
        """
        return _itkGPUImagePython.itkGPUImageCVF22_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageCVF22 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageCVF22_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageCVF22') -> "void":
        """
        Graft(itkGPUImageCVF22 self, itkGPUImageCVF22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageCVF22_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageCVF22

    def cast(obj: 'itkLightObject') -> "itkGPUImageCVF22 *":
        """cast(itkLightObject obj) -> itkGPUImageCVF22"""
        return _itkGPUImagePython.itkGPUImageCVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageCVF22

        Create a new object of the class itkGPUImageCVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageCVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageCVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageCVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageCVF22.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_Clone, None, itkGPUImageCVF22)
itkGPUImageCVF22.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_Allocate, None, itkGPUImageCVF22)
itkGPUImageCVF22.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_FillBuffer, None, itkGPUImageCVF22)
itkGPUImageCVF22.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_SetPixel, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetPixel, None, itkGPUImageCVF22)
itkGPUImageCVF22.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_UpdateBuffers, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetBufferPointer, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetPixelAccessor, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetNeighborhoodAccessor, None, itkGPUImageCVF22)
itkGPUImageCVF22.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_SetPixelContainer, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetPixelContainer, None, itkGPUImageCVF22)
itkGPUImageCVF22.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_SetCurrentCommandQueue, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetCurrentCommandQueueID, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetModifiableDataManager, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetDataManager, None, itkGPUImageCVF22)
itkGPUImageCVF22.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_GetGPUDataManager, None, itkGPUImageCVF22)
itkGPUImageCVF22.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF22_Graft, None, itkGPUImageCVF22)
itkGPUImageCVF22_swigregister = _itkGPUImagePython.itkGPUImageCVF22_swigregister
itkGPUImageCVF22_swigregister(itkGPUImageCVF22)

def itkGPUImageCVF22___New_orig__() -> "itkGPUImageCVF22_Pointer":
    """itkGPUImageCVF22___New_orig__() -> itkGPUImageCVF22_Pointer"""
    return _itkGPUImagePython.itkGPUImageCVF22___New_orig__()

def itkGPUImageCVF22_cast(obj: 'itkLightObject') -> "itkGPUImageCVF22 *":
    """itkGPUImageCVF22_cast(itkLightObject obj) -> itkGPUImageCVF22"""
    return _itkGPUImagePython.itkGPUImageCVF22_cast(obj)

class itkGPUImageCVF33(itkImagePython.itkImageCVF33):
    """Proxy of C++ itkGPUImageCVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageCVF33_Pointer":
        """__New_orig__() -> itkGPUImageCVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageCVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageCVF33_Pointer":
        """Clone(itkGPUImageCVF33 self) -> itkGPUImageCVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageCVF33_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageCVF33 self, bool initialize=False)
        Allocate(itkGPUImageCVF33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_Allocate(self, initialize)


    def FillBuffer(self, value: 'itkCovariantVectorF3') -> "void":
        """
        FillBuffer(itkGPUImageCVF33 self, itkCovariantVectorF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkCovariantVectorF3') -> "void":
        """
        SetPixel(itkGPUImageCVF33 self, itkIndex3 index, itkCovariantVectorF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkCovariantVectorF3 &":
        """
        GetPixel(itkGPUImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3
        GetPixel(itkGPUImageCVF33 self, itkIndex3 index) -> itkCovariantVectorF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageCVF33 self)"""
        return _itkGPUImagePython.itkGPUImageCVF33_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "itkCovariantVectorF3 const *":
        """
        GetBufferPointer(itkGPUImageCVF33 self) -> itkCovariantVectorF3
        GetBufferPointer(itkGPUImageCVF33 self) -> itkCovariantVectorF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const":
        """
        GetPixelAccessor(itkGPUImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > >
        GetPixelAccessor(itkGPUImageCVF33 self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::CovariantVector< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::CovariantVector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkGPUImageCVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::CovariantVector< float,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkGPUImageCVF33 self, itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageCVF33_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *":
        """
        GetPixelContainer(itkGPUImageCVF33 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > >
        GetPixelContainer(itkGPUImageCVF33 self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageCVF33 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageCVF33_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageCVF33 self) -> int"""
        return _itkGPUImagePython.itkGPUImageCVF33_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGICVF33 *":
        """GetModifiableDataManager(itkGPUImageCVF33 self) -> itkGPUImageDataManagerGICVF33"""
        return _itkGPUImagePython.itkGPUImageCVF33_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGICVF33 *":
        """
        GetDataManager(itkGPUImageCVF33 self) -> itkGPUImageDataManagerGICVF33
        GetDataManager(itkGPUImageCVF33 self) -> itkGPUImageDataManagerGICVF33
        """
        return _itkGPUImagePython.itkGPUImageCVF33_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageCVF33 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageCVF33_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageCVF33') -> "void":
        """
        Graft(itkGPUImageCVF33 self, itkGPUImageCVF33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageCVF33_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageCVF33

    def cast(obj: 'itkLightObject') -> "itkGPUImageCVF33 *":
        """cast(itkLightObject obj) -> itkGPUImageCVF33"""
        return _itkGPUImagePython.itkGPUImageCVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageCVF33

        Create a new object of the class itkGPUImageCVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageCVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageCVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageCVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageCVF33.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_Clone, None, itkGPUImageCVF33)
itkGPUImageCVF33.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_Allocate, None, itkGPUImageCVF33)
itkGPUImageCVF33.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_FillBuffer, None, itkGPUImageCVF33)
itkGPUImageCVF33.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_SetPixel, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetPixel, None, itkGPUImageCVF33)
itkGPUImageCVF33.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_UpdateBuffers, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetBufferPointer, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetPixelAccessor, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetNeighborhoodAccessor, None, itkGPUImageCVF33)
itkGPUImageCVF33.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_SetPixelContainer, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetPixelContainer, None, itkGPUImageCVF33)
itkGPUImageCVF33.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_SetCurrentCommandQueue, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetCurrentCommandQueueID, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetModifiableDataManager, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetDataManager, None, itkGPUImageCVF33)
itkGPUImageCVF33.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_GetGPUDataManager, None, itkGPUImageCVF33)
itkGPUImageCVF33.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageCVF33_Graft, None, itkGPUImageCVF33)
itkGPUImageCVF33_swigregister = _itkGPUImagePython.itkGPUImageCVF33_swigregister
itkGPUImageCVF33_swigregister(itkGPUImageCVF33)

def itkGPUImageCVF33___New_orig__() -> "itkGPUImageCVF33_Pointer":
    """itkGPUImageCVF33___New_orig__() -> itkGPUImageCVF33_Pointer"""
    return _itkGPUImagePython.itkGPUImageCVF33___New_orig__()

def itkGPUImageCVF33_cast(obj: 'itkLightObject') -> "itkGPUImageCVF33 *":
    """itkGPUImageCVF33_cast(itkLightObject obj) -> itkGPUImageCVF33"""
    return _itkGPUImagePython.itkGPUImageCVF33_cast(obj)

class itkGPUImageD2(itkImagePython.itkImageD2):
    """Proxy of C++ itkGPUImageD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageD2_Pointer":
        """__New_orig__() -> itkGPUImageD2_Pointer"""
        return _itkGPUImagePython.itkGPUImageD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageD2_Pointer":
        """Clone(itkGPUImageD2 self) -> itkGPUImageD2_Pointer"""
        return _itkGPUImagePython.itkGPUImageD2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageD2 self, bool initialize=False)
        Allocate(itkGPUImageD2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageD2_Allocate(self, initialize)


    def FillBuffer(self, value: 'double const &') -> "void":
        """
        FillBuffer(itkGPUImageD2 self, double const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageD2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'double const &') -> "void":
        """
        SetPixel(itkGPUImageD2 self, itkIndex2 index, double const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageD2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkGPUImageD2 self, itkIndex2 index) -> double const
        GetPixel(itkGPUImageD2 self, itkIndex2 index) -> double &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageD2_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageD2 self)"""
        return _itkGPUImagePython.itkGPUImageD2_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkGPUImageD2 self) -> double
        GetBufferPointer(itkGPUImageD2 self) -> double const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageD2_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkGPUImageD2 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkGPUImageD2 self) -> itk::DefaultPixelAccessor< double > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageD2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< double,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< double,2 > >
        GetNeighborhoodAccessor(itkGPUImageD2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< double,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageD2_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,double > *') -> "void":
        """
        SetPixelContainer(itkGPUImageD2 self, itk::ImportImageContainer< unsigned long,double > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageD2_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,double > const *":
        """
        GetPixelContainer(itkGPUImageD2 self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(itkGPUImageD2 self) -> itk::ImportImageContainer< unsigned long,double > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageD2_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageD2 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageD2_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageD2 self) -> int"""
        return _itkGPUImagePython.itkGPUImageD2_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGID2 *":
        """GetModifiableDataManager(itkGPUImageD2 self) -> itkGPUImageDataManagerGID2"""
        return _itkGPUImagePython.itkGPUImageD2_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGID2 *":
        """
        GetDataManager(itkGPUImageD2 self) -> itkGPUImageDataManagerGID2
        GetDataManager(itkGPUImageD2 self) -> itkGPUImageDataManagerGID2
        """
        return _itkGPUImagePython.itkGPUImageD2_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageD2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageD2_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageD2') -> "void":
        """
        Graft(itkGPUImageD2 self, itkGPUImageD2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageD2_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageD2

    def cast(obj: 'itkLightObject') -> "itkGPUImageD2 *":
        """cast(itkLightObject obj) -> itkGPUImageD2"""
        return _itkGPUImagePython.itkGPUImageD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageD2

        Create a new object of the class itkGPUImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageD2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_Clone, None, itkGPUImageD2)
itkGPUImageD2.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_Allocate, None, itkGPUImageD2)
itkGPUImageD2.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_FillBuffer, None, itkGPUImageD2)
itkGPUImageD2.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_SetPixel, None, itkGPUImageD2)
itkGPUImageD2.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetPixel, None, itkGPUImageD2)
itkGPUImageD2.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_UpdateBuffers, None, itkGPUImageD2)
itkGPUImageD2.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetBufferPointer, None, itkGPUImageD2)
itkGPUImageD2.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetPixelAccessor, None, itkGPUImageD2)
itkGPUImageD2.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetNeighborhoodAccessor, None, itkGPUImageD2)
itkGPUImageD2.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_SetPixelContainer, None, itkGPUImageD2)
itkGPUImageD2.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetPixelContainer, None, itkGPUImageD2)
itkGPUImageD2.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_SetCurrentCommandQueue, None, itkGPUImageD2)
itkGPUImageD2.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetCurrentCommandQueueID, None, itkGPUImageD2)
itkGPUImageD2.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetModifiableDataManager, None, itkGPUImageD2)
itkGPUImageD2.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetDataManager, None, itkGPUImageD2)
itkGPUImageD2.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_GetGPUDataManager, None, itkGPUImageD2)
itkGPUImageD2.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageD2_Graft, None, itkGPUImageD2)
itkGPUImageD2_swigregister = _itkGPUImagePython.itkGPUImageD2_swigregister
itkGPUImageD2_swigregister(itkGPUImageD2)

def itkGPUImageD2___New_orig__() -> "itkGPUImageD2_Pointer":
    """itkGPUImageD2___New_orig__() -> itkGPUImageD2_Pointer"""
    return _itkGPUImagePython.itkGPUImageD2___New_orig__()

def itkGPUImageD2_cast(obj: 'itkLightObject') -> "itkGPUImageD2 *":
    """itkGPUImageD2_cast(itkLightObject obj) -> itkGPUImageD2"""
    return _itkGPUImagePython.itkGPUImageD2_cast(obj)

class itkGPUImageD3(itkImagePython.itkImageD3):
    """Proxy of C++ itkGPUImageD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageD3_Pointer":
        """__New_orig__() -> itkGPUImageD3_Pointer"""
        return _itkGPUImagePython.itkGPUImageD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageD3_Pointer":
        """Clone(itkGPUImageD3 self) -> itkGPUImageD3_Pointer"""
        return _itkGPUImagePython.itkGPUImageD3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageD3 self, bool initialize=False)
        Allocate(itkGPUImageD3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageD3_Allocate(self, initialize)


    def FillBuffer(self, value: 'double const &') -> "void":
        """
        FillBuffer(itkGPUImageD3 self, double const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageD3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'double const &') -> "void":
        """
        SetPixel(itkGPUImageD3 self, itkIndex3 index, double const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageD3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "double &":
        """
        GetPixel(itkGPUImageD3 self, itkIndex3 index) -> double const
        GetPixel(itkGPUImageD3 self, itkIndex3 index) -> double &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageD3_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageD3 self)"""
        return _itkGPUImagePython.itkGPUImageD3_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "double const *":
        """
        GetBufferPointer(itkGPUImageD3 self) -> double
        GetBufferPointer(itkGPUImageD3 self) -> double const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageD3_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< double > const":
        """
        GetPixelAccessor(itkGPUImageD3 self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(itkGPUImageD3 self) -> itk::DefaultPixelAccessor< double > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageD3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< double,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< double,3 > >
        GetNeighborhoodAccessor(itkGPUImageD3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< double,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageD3_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,double > *') -> "void":
        """
        SetPixelContainer(itkGPUImageD3 self, itk::ImportImageContainer< unsigned long,double > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageD3_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,double > const *":
        """
        GetPixelContainer(itkGPUImageD3 self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(itkGPUImageD3 self) -> itk::ImportImageContainer< unsigned long,double > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageD3_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageD3 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageD3_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageD3 self) -> int"""
        return _itkGPUImagePython.itkGPUImageD3_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGID3 *":
        """GetModifiableDataManager(itkGPUImageD3 self) -> itkGPUImageDataManagerGID3"""
        return _itkGPUImagePython.itkGPUImageD3_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGID3 *":
        """
        GetDataManager(itkGPUImageD3 self) -> itkGPUImageDataManagerGID3
        GetDataManager(itkGPUImageD3 self) -> itkGPUImageDataManagerGID3
        """
        return _itkGPUImagePython.itkGPUImageD3_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageD3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageD3_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageD3') -> "void":
        """
        Graft(itkGPUImageD3 self, itkGPUImageD3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageD3_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageD3

    def cast(obj: 'itkLightObject') -> "itkGPUImageD3 *":
        """cast(itkLightObject obj) -> itkGPUImageD3"""
        return _itkGPUImagePython.itkGPUImageD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageD3

        Create a new object of the class itkGPUImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageD3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_Clone, None, itkGPUImageD3)
itkGPUImageD3.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_Allocate, None, itkGPUImageD3)
itkGPUImageD3.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_FillBuffer, None, itkGPUImageD3)
itkGPUImageD3.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_SetPixel, None, itkGPUImageD3)
itkGPUImageD3.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetPixel, None, itkGPUImageD3)
itkGPUImageD3.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_UpdateBuffers, None, itkGPUImageD3)
itkGPUImageD3.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetBufferPointer, None, itkGPUImageD3)
itkGPUImageD3.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetPixelAccessor, None, itkGPUImageD3)
itkGPUImageD3.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetNeighborhoodAccessor, None, itkGPUImageD3)
itkGPUImageD3.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_SetPixelContainer, None, itkGPUImageD3)
itkGPUImageD3.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetPixelContainer, None, itkGPUImageD3)
itkGPUImageD3.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_SetCurrentCommandQueue, None, itkGPUImageD3)
itkGPUImageD3.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetCurrentCommandQueueID, None, itkGPUImageD3)
itkGPUImageD3.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetModifiableDataManager, None, itkGPUImageD3)
itkGPUImageD3.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetDataManager, None, itkGPUImageD3)
itkGPUImageD3.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_GetGPUDataManager, None, itkGPUImageD3)
itkGPUImageD3.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageD3_Graft, None, itkGPUImageD3)
itkGPUImageD3_swigregister = _itkGPUImagePython.itkGPUImageD3_swigregister
itkGPUImageD3_swigregister(itkGPUImageD3)

def itkGPUImageD3___New_orig__() -> "itkGPUImageD3_Pointer":
    """itkGPUImageD3___New_orig__() -> itkGPUImageD3_Pointer"""
    return _itkGPUImagePython.itkGPUImageD3___New_orig__()

def itkGPUImageD3_cast(obj: 'itkLightObject') -> "itkGPUImageD3 *":
    """itkGPUImageD3_cast(itkLightObject obj) -> itkGPUImageD3"""
    return _itkGPUImagePython.itkGPUImageD3_cast(obj)

class itkGPUImageDataManagerGICVF22(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGICVF22_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGICVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGICVF22_Pointer":
        """Clone(itkGPUImageDataManagerGICVF22 self) -> itkGPUImageDataManagerGICVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGICVF22 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGICVF22 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGICVF22 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGICVF22 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGICVF22 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGICVF22 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageCVF22') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGICVF22 self, itkGPUImageCVF22 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageCVF22 *":
        """GetImagePointer(itkGPUImageDataManagerGICVF22 self) -> itkGPUImageCVF22"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGICVF22 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGICVF22 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGICVF22

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGICVF22 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGICVF22"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGICVF22

        Create a new object of the class itkGPUImageDataManagerGICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGICVF22.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_Clone, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_SetImagePointer, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_GetImagePointer, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF22_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGICVF22)
itkGPUImageDataManagerGICVF22_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGICVF22_swigregister
itkGPUImageDataManagerGICVF22_swigregister(itkGPUImageDataManagerGICVF22)

def itkGPUImageDataManagerGICVF22___New_orig__() -> "itkGPUImageDataManagerGICVF22_Pointer":
    """itkGPUImageDataManagerGICVF22___New_orig__() -> itkGPUImageDataManagerGICVF22_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGICVF22___New_orig__()

def itkGPUImageDataManagerGICVF22_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGICVF22 *":
    """itkGPUImageDataManagerGICVF22_cast(itkLightObject obj) -> itkGPUImageDataManagerGICVF22"""
    return _itkGPUImagePython.itkGPUImageDataManagerGICVF22_cast(obj)

class itkGPUImageDataManagerGICVF33(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGICVF33_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGICVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGICVF33_Pointer":
        """Clone(itkGPUImageDataManagerGICVF33 self) -> itkGPUImageDataManagerGICVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGICVF33 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGICVF33 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGICVF33 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGICVF33 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGICVF33 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGICVF33 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageCVF33') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGICVF33 self, itkGPUImageCVF33 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageCVF33 *":
        """GetImagePointer(itkGPUImageDataManagerGICVF33 self) -> itkGPUImageCVF33"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGICVF33 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGICVF33 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGICVF33

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGICVF33 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGICVF33"""
        return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGICVF33

        Create a new object of the class itkGPUImageDataManagerGICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGICVF33.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_Clone, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_SetImagePointer, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_GetImagePointer, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGICVF33_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGICVF33)
itkGPUImageDataManagerGICVF33_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGICVF33_swigregister
itkGPUImageDataManagerGICVF33_swigregister(itkGPUImageDataManagerGICVF33)

def itkGPUImageDataManagerGICVF33___New_orig__() -> "itkGPUImageDataManagerGICVF33_Pointer":
    """itkGPUImageDataManagerGICVF33___New_orig__() -> itkGPUImageDataManagerGICVF33_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGICVF33___New_orig__()

def itkGPUImageDataManagerGICVF33_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGICVF33 *":
    """itkGPUImageDataManagerGICVF33_cast(itkLightObject obj) -> itkGPUImageDataManagerGICVF33"""
    return _itkGPUImagePython.itkGPUImageDataManagerGICVF33_cast(obj)

class itkGPUImageDataManagerGID2(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGID2_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGID2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGID2_Pointer":
        """Clone(itkGPUImageDataManagerGID2 self) -> itkGPUImageDataManagerGID2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGID2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGID2 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGID2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGID2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGID2 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGID2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageD2') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGID2 self, itkGPUImageD2 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageD2 *":
        """GetImagePointer(itkGPUImageDataManagerGID2 self) -> itkGPUImageD2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGID2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGID2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGID2

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGID2 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGID2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGID2

        Create a new object of the class itkGPUImageDataManagerGID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGID2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_Clone, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_SetImagePointer, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_GetImagePointer, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID2_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGID2)
itkGPUImageDataManagerGID2_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGID2_swigregister
itkGPUImageDataManagerGID2_swigregister(itkGPUImageDataManagerGID2)

def itkGPUImageDataManagerGID2___New_orig__() -> "itkGPUImageDataManagerGID2_Pointer":
    """itkGPUImageDataManagerGID2___New_orig__() -> itkGPUImageDataManagerGID2_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGID2___New_orig__()

def itkGPUImageDataManagerGID2_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGID2 *":
    """itkGPUImageDataManagerGID2_cast(itkLightObject obj) -> itkGPUImageDataManagerGID2"""
    return _itkGPUImagePython.itkGPUImageDataManagerGID2_cast(obj)

class itkGPUImageDataManagerGID3(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGID3_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGID3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGID3_Pointer":
        """Clone(itkGPUImageDataManagerGID3 self) -> itkGPUImageDataManagerGID3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGID3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGID3 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGID3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGID3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGID3 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGID3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageD3') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGID3 self, itkGPUImageD3 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageD3 *":
        """GetImagePointer(itkGPUImageDataManagerGID3 self) -> itkGPUImageD3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGID3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGID3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGID3

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGID3 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGID3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGID3

        Create a new object of the class itkGPUImageDataManagerGID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGID3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_Clone, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_SetImagePointer, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_GetImagePointer, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGID3_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGID3)
itkGPUImageDataManagerGID3_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGID3_swigregister
itkGPUImageDataManagerGID3_swigregister(itkGPUImageDataManagerGID3)

def itkGPUImageDataManagerGID3___New_orig__() -> "itkGPUImageDataManagerGID3_Pointer":
    """itkGPUImageDataManagerGID3___New_orig__() -> itkGPUImageDataManagerGID3_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGID3___New_orig__()

def itkGPUImageDataManagerGID3_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGID3 *":
    """itkGPUImageDataManagerGID3_cast(itkLightObject obj) -> itkGPUImageDataManagerGID3"""
    return _itkGPUImagePython.itkGPUImageDataManagerGID3_cast(obj)

class itkGPUImageDataManagerGIF2(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIF2_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIF2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIF2_Pointer":
        """Clone(itkGPUImageDataManagerGIF2 self) -> itkGPUImageDataManagerGIF2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIF2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIF2 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIF2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIF2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIF2 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIF2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageF2') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIF2 self, itkGPUImageF2 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageF2 *":
        """GetImagePointer(itkGPUImageDataManagerGIF2 self) -> itkGPUImageF2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIF2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIF2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIF2

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIF2 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIF2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIF2

        Create a new object of the class itkGPUImageDataManagerGIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIF2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_Clone, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_SetImagePointer, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_GetImagePointer, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF2_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIF2)
itkGPUImageDataManagerGIF2_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIF2_swigregister
itkGPUImageDataManagerGIF2_swigregister(itkGPUImageDataManagerGIF2)

def itkGPUImageDataManagerGIF2___New_orig__() -> "itkGPUImageDataManagerGIF2_Pointer":
    """itkGPUImageDataManagerGIF2___New_orig__() -> itkGPUImageDataManagerGIF2_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIF2___New_orig__()

def itkGPUImageDataManagerGIF2_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIF2 *":
    """itkGPUImageDataManagerGIF2_cast(itkLightObject obj) -> itkGPUImageDataManagerGIF2"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIF2_cast(obj)

class itkGPUImageDataManagerGIF3(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIF3_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIF3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIF3_Pointer":
        """Clone(itkGPUImageDataManagerGIF3 self) -> itkGPUImageDataManagerGIF3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIF3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIF3 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIF3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIF3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIF3 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIF3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageF3') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIF3 self, itkGPUImageF3 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageF3 *":
        """GetImagePointer(itkGPUImageDataManagerGIF3 self) -> itkGPUImageF3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIF3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIF3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIF3

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIF3 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIF3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIF3

        Create a new object of the class itkGPUImageDataManagerGIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIF3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_Clone, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_SetImagePointer, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_GetImagePointer, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIF3_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIF3)
itkGPUImageDataManagerGIF3_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIF3_swigregister
itkGPUImageDataManagerGIF3_swigregister(itkGPUImageDataManagerGIF3)

def itkGPUImageDataManagerGIF3___New_orig__() -> "itkGPUImageDataManagerGIF3_Pointer":
    """itkGPUImageDataManagerGIF3___New_orig__() -> itkGPUImageDataManagerGIF3_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIF3___New_orig__()

def itkGPUImageDataManagerGIF3_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIF3 *":
    """itkGPUImageDataManagerGIF3_cast(itkLightObject obj) -> itkGPUImageDataManagerGIF3"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIF3_cast(obj)

class itkGPUImageDataManagerGISS2(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGISS2_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGISS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGISS2_Pointer":
        """Clone(itkGPUImageDataManagerGISS2 self) -> itkGPUImageDataManagerGISS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGISS2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGISS2 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGISS2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGISS2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGISS2 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGISS2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageSS2') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGISS2 self, itkGPUImageSS2 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageSS2 *":
        """GetImagePointer(itkGPUImageDataManagerGISS2 self) -> itkGPUImageSS2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGISS2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGISS2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGISS2

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGISS2 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGISS2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGISS2

        Create a new object of the class itkGPUImageDataManagerGISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGISS2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_Clone, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_SetImagePointer, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_GetImagePointer, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS2_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGISS2)
itkGPUImageDataManagerGISS2_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGISS2_swigregister
itkGPUImageDataManagerGISS2_swigregister(itkGPUImageDataManagerGISS2)

def itkGPUImageDataManagerGISS2___New_orig__() -> "itkGPUImageDataManagerGISS2_Pointer":
    """itkGPUImageDataManagerGISS2___New_orig__() -> itkGPUImageDataManagerGISS2_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGISS2___New_orig__()

def itkGPUImageDataManagerGISS2_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGISS2 *":
    """itkGPUImageDataManagerGISS2_cast(itkLightObject obj) -> itkGPUImageDataManagerGISS2"""
    return _itkGPUImagePython.itkGPUImageDataManagerGISS2_cast(obj)

class itkGPUImageDataManagerGISS3(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGISS3_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGISS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGISS3_Pointer":
        """Clone(itkGPUImageDataManagerGISS3 self) -> itkGPUImageDataManagerGISS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGISS3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGISS3 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGISS3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGISS3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGISS3 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGISS3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageSS3') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGISS3 self, itkGPUImageSS3 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageSS3 *":
        """GetImagePointer(itkGPUImageDataManagerGISS3 self) -> itkGPUImageSS3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGISS3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGISS3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGISS3

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGISS3 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGISS3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGISS3

        Create a new object of the class itkGPUImageDataManagerGISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGISS3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_Clone, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_SetImagePointer, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_GetImagePointer, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGISS3_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGISS3)
itkGPUImageDataManagerGISS3_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGISS3_swigregister
itkGPUImageDataManagerGISS3_swigregister(itkGPUImageDataManagerGISS3)

def itkGPUImageDataManagerGISS3___New_orig__() -> "itkGPUImageDataManagerGISS3_Pointer":
    """itkGPUImageDataManagerGISS3___New_orig__() -> itkGPUImageDataManagerGISS3_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGISS3___New_orig__()

def itkGPUImageDataManagerGISS3_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGISS3 *":
    """itkGPUImageDataManagerGISS3_cast(itkLightObject obj) -> itkGPUImageDataManagerGISS3"""
    return _itkGPUImagePython.itkGPUImageDataManagerGISS3_cast(obj)

class itkGPUImageDataManagerGIUC2(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIUC2_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIUC2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIUC2_Pointer":
        """Clone(itkGPUImageDataManagerGIUC2 self) -> itkGPUImageDataManagerGIUC2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIUC2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUC2 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUC2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIUC2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUC2 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUC2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageUC2') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIUC2 self, itkGPUImageUC2 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageUC2 *":
        """GetImagePointer(itkGPUImageDataManagerGIUC2 self) -> itkGPUImageUC2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIUC2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIUC2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIUC2

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUC2 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIUC2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIUC2

        Create a new object of the class itkGPUImageDataManagerGIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIUC2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_Clone, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_SetImagePointer, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_GetImagePointer, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC2_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIUC2)
itkGPUImageDataManagerGIUC2_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIUC2_swigregister
itkGPUImageDataManagerGIUC2_swigregister(itkGPUImageDataManagerGIUC2)

def itkGPUImageDataManagerGIUC2___New_orig__() -> "itkGPUImageDataManagerGIUC2_Pointer":
    """itkGPUImageDataManagerGIUC2___New_orig__() -> itkGPUImageDataManagerGIUC2_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUC2___New_orig__()

def itkGPUImageDataManagerGIUC2_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUC2 *":
    """itkGPUImageDataManagerGIUC2_cast(itkLightObject obj) -> itkGPUImageDataManagerGIUC2"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUC2_cast(obj)

class itkGPUImageDataManagerGIUC3(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIUC3_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIUC3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIUC3_Pointer":
        """Clone(itkGPUImageDataManagerGIUC3 self) -> itkGPUImageDataManagerGIUC3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIUC3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUC3 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUC3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIUC3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUC3 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUC3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageUC3') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIUC3 self, itkGPUImageUC3 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageUC3 *":
        """GetImagePointer(itkGPUImageDataManagerGIUC3 self) -> itkGPUImageUC3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIUC3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIUC3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIUC3

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUC3 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIUC3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIUC3

        Create a new object of the class itkGPUImageDataManagerGIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIUC3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_Clone, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_SetImagePointer, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_GetImagePointer, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUC3_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIUC3)
itkGPUImageDataManagerGIUC3_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIUC3_swigregister
itkGPUImageDataManagerGIUC3_swigregister(itkGPUImageDataManagerGIUC3)

def itkGPUImageDataManagerGIUC3___New_orig__() -> "itkGPUImageDataManagerGIUC3_Pointer":
    """itkGPUImageDataManagerGIUC3___New_orig__() -> itkGPUImageDataManagerGIUC3_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUC3___New_orig__()

def itkGPUImageDataManagerGIUC3_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUC3 *":
    """itkGPUImageDataManagerGIUC3_cast(itkLightObject obj) -> itkGPUImageDataManagerGIUC3"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUC3_cast(obj)

class itkGPUImageDataManagerGIUL2(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIUL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIUL2_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIUL2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIUL2_Pointer":
        """Clone(itkGPUImageDataManagerGIUL2 self) -> itkGPUImageDataManagerGIUL2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIUL2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUL2 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUL2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIUL2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUL2 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUL2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageUL2') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIUL2 self, itkGPUImageUL2 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageUL2 *":
        """GetImagePointer(itkGPUImageDataManagerGIUL2 self) -> itkGPUImageUL2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIUL2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIUL2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIUL2

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUL2 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIUL2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIUL2

        Create a new object of the class itkGPUImageDataManagerGIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIUL2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_Clone, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_SetImagePointer, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_GetImagePointer, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL2_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIUL2)
itkGPUImageDataManagerGIUL2_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIUL2_swigregister
itkGPUImageDataManagerGIUL2_swigregister(itkGPUImageDataManagerGIUL2)

def itkGPUImageDataManagerGIUL2___New_orig__() -> "itkGPUImageDataManagerGIUL2_Pointer":
    """itkGPUImageDataManagerGIUL2___New_orig__() -> itkGPUImageDataManagerGIUL2_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUL2___New_orig__()

def itkGPUImageDataManagerGIUL2_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUL2 *":
    """itkGPUImageDataManagerGIUL2_cast(itkLightObject obj) -> itkGPUImageDataManagerGIUL2"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUL2_cast(obj)

class itkGPUImageDataManagerGIUL3(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIUL3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIUL3_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIUL3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIUL3_Pointer":
        """Clone(itkGPUImageDataManagerGIUL3 self) -> itkGPUImageDataManagerGIUL3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIUL3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUL3 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUL3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIUL3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUL3 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUL3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageUL3') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIUL3 self, itkGPUImageUL3 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageUL3 *":
        """GetImagePointer(itkGPUImageDataManagerGIUL3 self) -> itkGPUImageUL3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIUL3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIUL3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIUL3

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUL3 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIUL3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIUL3

        Create a new object of the class itkGPUImageDataManagerGIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIUL3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_Clone, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_SetImagePointer, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_GetImagePointer, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUL3_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIUL3)
itkGPUImageDataManagerGIUL3_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIUL3_swigregister
itkGPUImageDataManagerGIUL3_swigregister(itkGPUImageDataManagerGIUL3)

def itkGPUImageDataManagerGIUL3___New_orig__() -> "itkGPUImageDataManagerGIUL3_Pointer":
    """itkGPUImageDataManagerGIUL3___New_orig__() -> itkGPUImageDataManagerGIUL3_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUL3___New_orig__()

def itkGPUImageDataManagerGIUL3_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUL3 *":
    """itkGPUImageDataManagerGIUL3_cast(itkLightObject obj) -> itkGPUImageDataManagerGIUL3"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUL3_cast(obj)

class itkGPUImageDataManagerGIUS2(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIUS2_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIUS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIUS2_Pointer":
        """Clone(itkGPUImageDataManagerGIUS2 self) -> itkGPUImageDataManagerGIUS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIUS2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUS2 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUS2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIUS2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUS2 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUS2 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageUS2') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIUS2 self, itkGPUImageUS2 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageUS2 *":
        """GetImagePointer(itkGPUImageDataManagerGIUS2 self) -> itkGPUImageUS2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIUS2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIUS2 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIUS2

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUS2 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIUS2"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIUS2

        Create a new object of the class itkGPUImageDataManagerGIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIUS2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_Clone, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_SetImagePointer, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_GetImagePointer, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS2_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIUS2)
itkGPUImageDataManagerGIUS2_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIUS2_swigregister
itkGPUImageDataManagerGIUS2_swigregister(itkGPUImageDataManagerGIUS2)

def itkGPUImageDataManagerGIUS2___New_orig__() -> "itkGPUImageDataManagerGIUS2_Pointer":
    """itkGPUImageDataManagerGIUS2___New_orig__() -> itkGPUImageDataManagerGIUS2_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUS2___New_orig__()

def itkGPUImageDataManagerGIUS2_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUS2 *":
    """itkGPUImageDataManagerGIUS2_cast(itkLightObject obj) -> itkGPUImageDataManagerGIUS2"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUS2_cast(obj)

class itkGPUImageDataManagerGIUS3(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIUS3_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIUS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIUS3_Pointer":
        """Clone(itkGPUImageDataManagerGIUS3 self) -> itkGPUImageDataManagerGIUS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIUS3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUS3 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIUS3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIUS3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUS3 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIUS3 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageUS3') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIUS3 self, itkGPUImageUS3 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageUS3 *":
        """GetImagePointer(itkGPUImageDataManagerGIUS3 self) -> itkGPUImageUS3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIUS3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIUS3 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIUS3

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUS3 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIUS3"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIUS3

        Create a new object of the class itkGPUImageDataManagerGIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIUS3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_Clone, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_SetImagePointer, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_GetImagePointer, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIUS3_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIUS3)
itkGPUImageDataManagerGIUS3_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIUS3_swigregister
itkGPUImageDataManagerGIUS3_swigregister(itkGPUImageDataManagerGIUS3)

def itkGPUImageDataManagerGIUS3___New_orig__() -> "itkGPUImageDataManagerGIUS3_Pointer":
    """itkGPUImageDataManagerGIUS3___New_orig__() -> itkGPUImageDataManagerGIUS3_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUS3___New_orig__()

def itkGPUImageDataManagerGIUS3_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIUS3 *":
    """itkGPUImageDataManagerGIUS3_cast(itkLightObject obj) -> itkGPUImageDataManagerGIUS3"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIUS3_cast(obj)

class itkGPUImageDataManagerGIVF22(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIVF22_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIVF22_Pointer":
        """Clone(itkGPUImageDataManagerGIVF22 self) -> itkGPUImageDataManagerGIVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIVF22 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIVF22 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIVF22 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIVF22 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIVF22 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIVF22 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageVF22') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIVF22 self, itkGPUImageVF22 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageVF22 *":
        """GetImagePointer(itkGPUImageDataManagerGIVF22 self) -> itkGPUImageVF22"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIVF22 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIVF22 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIVF22

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIVF22 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIVF22"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIVF22

        Create a new object of the class itkGPUImageDataManagerGIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIVF22.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_Clone, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_SetImagePointer, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_GetImagePointer, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF22_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIVF22)
itkGPUImageDataManagerGIVF22_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIVF22_swigregister
itkGPUImageDataManagerGIVF22_swigregister(itkGPUImageDataManagerGIVF22)

def itkGPUImageDataManagerGIVF22___New_orig__() -> "itkGPUImageDataManagerGIVF22_Pointer":
    """itkGPUImageDataManagerGIVF22___New_orig__() -> itkGPUImageDataManagerGIVF22_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIVF22___New_orig__()

def itkGPUImageDataManagerGIVF22_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIVF22 *":
    """itkGPUImageDataManagerGIVF22_cast(itkLightObject obj) -> itkGPUImageDataManagerGIVF22"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIVF22_cast(obj)

class itkGPUImageDataManagerGIVF33(itkGPUDataManagerPython.itkGPUDataManager):
    """Proxy of C++ itkGPUImageDataManagerGIVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageDataManagerGIVF33_Pointer":
        """__New_orig__() -> itkGPUImageDataManagerGIVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageDataManagerGIVF33_Pointer":
        """Clone(itkGPUImageDataManagerGIVF33 self) -> itkGPUImageDataManagerGIVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_Clone(self)


    def GetModifiableGPUBufferedRegionIndex(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionIndex(itkGPUImageDataManagerGIVF33 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetModifiableGPUBufferedRegionIndex(self)


    def GetGPUBufferedRegionIndex(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIVF33 self) -> itkGPUDataManager
        GetGPUBufferedRegionIndex(itkGPUImageDataManagerGIVF33 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetGPUBufferedRegionIndex(self, *args)


    def GetModifiableGPUBufferedRegionSize(self) -> "itkGPUDataManager *":
        """GetModifiableGPUBufferedRegionSize(itkGPUImageDataManagerGIVF33 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetModifiableGPUBufferedRegionSize(self)


    def GetGPUBufferedRegionSize(self, *args) -> "itkGPUDataManager *":
        """
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIVF33 self) -> itkGPUDataManager
        GetGPUBufferedRegionSize(itkGPUImageDataManagerGIVF33 self) -> itkGPUDataManager
        """
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetGPUBufferedRegionSize(self, *args)


    def SetImagePointer(self, img: 'itkGPUImageVF33') -> "void":
        """SetImagePointer(itkGPUImageDataManagerGIVF33 self, itkGPUImageVF33 img)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_SetImagePointer(self, img)


    def GetImagePointer(self) -> "itkGPUImageVF33 *":
        """GetImagePointer(itkGPUImageDataManagerGIVF33 self) -> itkGPUImageVF33"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetImagePointer(self)


    def MakeCPUBufferUpToDate(self) -> "void":
        """MakeCPUBufferUpToDate(itkGPUImageDataManagerGIVF33 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_MakeCPUBufferUpToDate(self)


    def MakeGPUBufferUpToDate(self) -> "void":
        """MakeGPUBufferUpToDate(itkGPUImageDataManagerGIVF33 self)"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_MakeGPUBufferUpToDate(self)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageDataManagerGIVF33

    def cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIVF33 *":
        """cast(itkLightObject obj) -> itkGPUImageDataManagerGIVF33"""
        return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageDataManagerGIVF33

        Create a new object of the class itkGPUImageDataManagerGIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageDataManagerGIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageDataManagerGIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageDataManagerGIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageDataManagerGIVF33.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_Clone, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.GetModifiableGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetModifiableGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.GetGPUBufferedRegionIndex = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetGPUBufferedRegionIndex, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.GetModifiableGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetModifiableGPUBufferedRegionSize, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.GetGPUBufferedRegionSize = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetGPUBufferedRegionSize, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.SetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_SetImagePointer, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.GetImagePointer = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_GetImagePointer, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.MakeCPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_MakeCPUBufferUpToDate, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33.MakeGPUBufferUpToDate = new_instancemethod(_itkGPUImagePython.itkGPUImageDataManagerGIVF33_MakeGPUBufferUpToDate, None, itkGPUImageDataManagerGIVF33)
itkGPUImageDataManagerGIVF33_swigregister = _itkGPUImagePython.itkGPUImageDataManagerGIVF33_swigregister
itkGPUImageDataManagerGIVF33_swigregister(itkGPUImageDataManagerGIVF33)

def itkGPUImageDataManagerGIVF33___New_orig__() -> "itkGPUImageDataManagerGIVF33_Pointer":
    """itkGPUImageDataManagerGIVF33___New_orig__() -> itkGPUImageDataManagerGIVF33_Pointer"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIVF33___New_orig__()

def itkGPUImageDataManagerGIVF33_cast(obj: 'itkLightObject') -> "itkGPUImageDataManagerGIVF33 *":
    """itkGPUImageDataManagerGIVF33_cast(itkLightObject obj) -> itkGPUImageDataManagerGIVF33"""
    return _itkGPUImagePython.itkGPUImageDataManagerGIVF33_cast(obj)

class itkGPUImageF2(itkImagePython.itkImageF2):
    """Proxy of C++ itkGPUImageF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageF2_Pointer":
        """__New_orig__() -> itkGPUImageF2_Pointer"""
        return _itkGPUImagePython.itkGPUImageF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageF2_Pointer":
        """Clone(itkGPUImageF2 self) -> itkGPUImageF2_Pointer"""
        return _itkGPUImagePython.itkGPUImageF2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageF2 self, bool initialize=False)
        Allocate(itkGPUImageF2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageF2_Allocate(self, initialize)


    def FillBuffer(self, value: 'float const &') -> "void":
        """
        FillBuffer(itkGPUImageF2 self, float const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageF2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'float const &') -> "void":
        """
        SetPixel(itkGPUImageF2 self, itkIndex2 index, float const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageF2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkGPUImageF2 self, itkIndex2 index) -> float const
        GetPixel(itkGPUImageF2 self, itkIndex2 index) -> float &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageF2_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageF2 self)"""
        return _itkGPUImagePython.itkGPUImageF2_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkGPUImageF2 self) -> float
        GetBufferPointer(itkGPUImageF2 self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageF2_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkGPUImageF2 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkGPUImageF2 self) -> itk::DefaultPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageF2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< float,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< float,2 > >
        GetNeighborhoodAccessor(itkGPUImageF2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< float,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageF2_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,float > *') -> "void":
        """
        SetPixelContainer(itkGPUImageF2 self, itk::ImportImageContainer< unsigned long,float > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageF2_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkGPUImageF2 self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkGPUImageF2 self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageF2_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageF2 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageF2_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageF2 self) -> int"""
        return _itkGPUImagePython.itkGPUImageF2_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIF2 *":
        """GetModifiableDataManager(itkGPUImageF2 self) -> itkGPUImageDataManagerGIF2"""
        return _itkGPUImagePython.itkGPUImageF2_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIF2 *":
        """
        GetDataManager(itkGPUImageF2 self) -> itkGPUImageDataManagerGIF2
        GetDataManager(itkGPUImageF2 self) -> itkGPUImageDataManagerGIF2
        """
        return _itkGPUImagePython.itkGPUImageF2_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageF2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageF2_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageF2') -> "void":
        """
        Graft(itkGPUImageF2 self, itkGPUImageF2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageF2_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageF2

    def cast(obj: 'itkLightObject') -> "itkGPUImageF2 *":
        """cast(itkLightObject obj) -> itkGPUImageF2"""
        return _itkGPUImagePython.itkGPUImageF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageF2

        Create a new object of the class itkGPUImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageF2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_Clone, None, itkGPUImageF2)
itkGPUImageF2.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_Allocate, None, itkGPUImageF2)
itkGPUImageF2.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_FillBuffer, None, itkGPUImageF2)
itkGPUImageF2.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_SetPixel, None, itkGPUImageF2)
itkGPUImageF2.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetPixel, None, itkGPUImageF2)
itkGPUImageF2.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_UpdateBuffers, None, itkGPUImageF2)
itkGPUImageF2.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetBufferPointer, None, itkGPUImageF2)
itkGPUImageF2.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetPixelAccessor, None, itkGPUImageF2)
itkGPUImageF2.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetNeighborhoodAccessor, None, itkGPUImageF2)
itkGPUImageF2.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_SetPixelContainer, None, itkGPUImageF2)
itkGPUImageF2.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetPixelContainer, None, itkGPUImageF2)
itkGPUImageF2.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_SetCurrentCommandQueue, None, itkGPUImageF2)
itkGPUImageF2.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetCurrentCommandQueueID, None, itkGPUImageF2)
itkGPUImageF2.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetModifiableDataManager, None, itkGPUImageF2)
itkGPUImageF2.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetDataManager, None, itkGPUImageF2)
itkGPUImageF2.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_GetGPUDataManager, None, itkGPUImageF2)
itkGPUImageF2.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageF2_Graft, None, itkGPUImageF2)
itkGPUImageF2_swigregister = _itkGPUImagePython.itkGPUImageF2_swigregister
itkGPUImageF2_swigregister(itkGPUImageF2)

def itkGPUImageF2___New_orig__() -> "itkGPUImageF2_Pointer":
    """itkGPUImageF2___New_orig__() -> itkGPUImageF2_Pointer"""
    return _itkGPUImagePython.itkGPUImageF2___New_orig__()

def itkGPUImageF2_cast(obj: 'itkLightObject') -> "itkGPUImageF2 *":
    """itkGPUImageF2_cast(itkLightObject obj) -> itkGPUImageF2"""
    return _itkGPUImagePython.itkGPUImageF2_cast(obj)

class itkGPUImageF3(itkImagePython.itkImageF3):
    """Proxy of C++ itkGPUImageF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageF3_Pointer":
        """__New_orig__() -> itkGPUImageF3_Pointer"""
        return _itkGPUImagePython.itkGPUImageF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageF3_Pointer":
        """Clone(itkGPUImageF3 self) -> itkGPUImageF3_Pointer"""
        return _itkGPUImagePython.itkGPUImageF3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageF3 self, bool initialize=False)
        Allocate(itkGPUImageF3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageF3_Allocate(self, initialize)


    def FillBuffer(self, value: 'float const &') -> "void":
        """
        FillBuffer(itkGPUImageF3 self, float const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageF3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'float const &') -> "void":
        """
        SetPixel(itkGPUImageF3 self, itkIndex3 index, float const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageF3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "float &":
        """
        GetPixel(itkGPUImageF3 self, itkIndex3 index) -> float const
        GetPixel(itkGPUImageF3 self, itkIndex3 index) -> float &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageF3_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageF3 self)"""
        return _itkGPUImagePython.itkGPUImageF3_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "float const *":
        """
        GetBufferPointer(itkGPUImageF3 self) -> float
        GetBufferPointer(itkGPUImageF3 self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageF3_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< float > const":
        """
        GetPixelAccessor(itkGPUImageF3 self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(itkGPUImageF3 self) -> itk::DefaultPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageF3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< float,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< float,3 > >
        GetNeighborhoodAccessor(itkGPUImageF3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< float,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageF3_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,float > *') -> "void":
        """
        SetPixelContainer(itkGPUImageF3 self, itk::ImportImageContainer< unsigned long,float > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageF3_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,float > const *":
        """
        GetPixelContainer(itkGPUImageF3 self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkGPUImageF3 self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageF3_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageF3 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageF3_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageF3 self) -> int"""
        return _itkGPUImagePython.itkGPUImageF3_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIF3 *":
        """GetModifiableDataManager(itkGPUImageF3 self) -> itkGPUImageDataManagerGIF3"""
        return _itkGPUImagePython.itkGPUImageF3_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIF3 *":
        """
        GetDataManager(itkGPUImageF3 self) -> itkGPUImageDataManagerGIF3
        GetDataManager(itkGPUImageF3 self) -> itkGPUImageDataManagerGIF3
        """
        return _itkGPUImagePython.itkGPUImageF3_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageF3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageF3_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageF3') -> "void":
        """
        Graft(itkGPUImageF3 self, itkGPUImageF3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageF3_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageF3

    def cast(obj: 'itkLightObject') -> "itkGPUImageF3 *":
        """cast(itkLightObject obj) -> itkGPUImageF3"""
        return _itkGPUImagePython.itkGPUImageF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageF3

        Create a new object of the class itkGPUImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageF3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_Clone, None, itkGPUImageF3)
itkGPUImageF3.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_Allocate, None, itkGPUImageF3)
itkGPUImageF3.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_FillBuffer, None, itkGPUImageF3)
itkGPUImageF3.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_SetPixel, None, itkGPUImageF3)
itkGPUImageF3.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetPixel, None, itkGPUImageF3)
itkGPUImageF3.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_UpdateBuffers, None, itkGPUImageF3)
itkGPUImageF3.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetBufferPointer, None, itkGPUImageF3)
itkGPUImageF3.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetPixelAccessor, None, itkGPUImageF3)
itkGPUImageF3.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetNeighborhoodAccessor, None, itkGPUImageF3)
itkGPUImageF3.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_SetPixelContainer, None, itkGPUImageF3)
itkGPUImageF3.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetPixelContainer, None, itkGPUImageF3)
itkGPUImageF3.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_SetCurrentCommandQueue, None, itkGPUImageF3)
itkGPUImageF3.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetCurrentCommandQueueID, None, itkGPUImageF3)
itkGPUImageF3.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetModifiableDataManager, None, itkGPUImageF3)
itkGPUImageF3.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetDataManager, None, itkGPUImageF3)
itkGPUImageF3.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_GetGPUDataManager, None, itkGPUImageF3)
itkGPUImageF3.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageF3_Graft, None, itkGPUImageF3)
itkGPUImageF3_swigregister = _itkGPUImagePython.itkGPUImageF3_swigregister
itkGPUImageF3_swigregister(itkGPUImageF3)

def itkGPUImageF3___New_orig__() -> "itkGPUImageF3_Pointer":
    """itkGPUImageF3___New_orig__() -> itkGPUImageF3_Pointer"""
    return _itkGPUImagePython.itkGPUImageF3___New_orig__()

def itkGPUImageF3_cast(obj: 'itkLightObject') -> "itkGPUImageF3 *":
    """itkGPUImageF3_cast(itkLightObject obj) -> itkGPUImageF3"""
    return _itkGPUImagePython.itkGPUImageF3_cast(obj)

class itkGPUImageSS2(itkImagePython.itkImageSS2):
    """Proxy of C++ itkGPUImageSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageSS2_Pointer":
        """__New_orig__() -> itkGPUImageSS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageSS2_Pointer":
        """Clone(itkGPUImageSS2 self) -> itkGPUImageSS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageSS2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageSS2 self, bool initialize=False)
        Allocate(itkGPUImageSS2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageSS2_Allocate(self, initialize)


    def FillBuffer(self, value: 'short const &') -> "void":
        """
        FillBuffer(itkGPUImageSS2 self, short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageSS2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'short const &') -> "void":
        """
        SetPixel(itkGPUImageSS2 self, itkIndex2 index, short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageSS2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "short &":
        """
        GetPixel(itkGPUImageSS2 self, itkIndex2 index) -> short const
        GetPixel(itkGPUImageSS2 self, itkIndex2 index) -> short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageSS2_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageSS2 self)"""
        return _itkGPUImagePython.itkGPUImageSS2_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "short const *":
        """
        GetBufferPointer(itkGPUImageSS2 self) -> short
        GetBufferPointer(itkGPUImageSS2 self) -> short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageSS2_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< short > const":
        """
        GetPixelAccessor(itkGPUImageSS2 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkGPUImageSS2 self) -> itk::DefaultPixelAccessor< short > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageSS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< short,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< short,2 > >
        GetNeighborhoodAccessor(itkGPUImageSS2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< short,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageSS2_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,short > *') -> "void":
        """
        SetPixelContainer(itkGPUImageSS2 self, itk::ImportImageContainer< unsigned long,short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageSS2_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,short > const *":
        """
        GetPixelContainer(itkGPUImageSS2 self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(itkGPUImageSS2 self) -> itk::ImportImageContainer< unsigned long,short > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageSS2_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageSS2 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageSS2_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageSS2 self) -> int"""
        return _itkGPUImagePython.itkGPUImageSS2_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGISS2 *":
        """GetModifiableDataManager(itkGPUImageSS2 self) -> itkGPUImageDataManagerGISS2"""
        return _itkGPUImagePython.itkGPUImageSS2_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGISS2 *":
        """
        GetDataManager(itkGPUImageSS2 self) -> itkGPUImageDataManagerGISS2
        GetDataManager(itkGPUImageSS2 self) -> itkGPUImageDataManagerGISS2
        """
        return _itkGPUImagePython.itkGPUImageSS2_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageSS2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageSS2_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageSS2') -> "void":
        """
        Graft(itkGPUImageSS2 self, itkGPUImageSS2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageSS2_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageSS2

    def cast(obj: 'itkLightObject') -> "itkGPUImageSS2 *":
        """cast(itkLightObject obj) -> itkGPUImageSS2"""
        return _itkGPUImagePython.itkGPUImageSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageSS2

        Create a new object of the class itkGPUImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageSS2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_Clone, None, itkGPUImageSS2)
itkGPUImageSS2.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_Allocate, None, itkGPUImageSS2)
itkGPUImageSS2.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_FillBuffer, None, itkGPUImageSS2)
itkGPUImageSS2.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_SetPixel, None, itkGPUImageSS2)
itkGPUImageSS2.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetPixel, None, itkGPUImageSS2)
itkGPUImageSS2.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_UpdateBuffers, None, itkGPUImageSS2)
itkGPUImageSS2.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetBufferPointer, None, itkGPUImageSS2)
itkGPUImageSS2.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetPixelAccessor, None, itkGPUImageSS2)
itkGPUImageSS2.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetNeighborhoodAccessor, None, itkGPUImageSS2)
itkGPUImageSS2.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_SetPixelContainer, None, itkGPUImageSS2)
itkGPUImageSS2.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetPixelContainer, None, itkGPUImageSS2)
itkGPUImageSS2.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_SetCurrentCommandQueue, None, itkGPUImageSS2)
itkGPUImageSS2.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetCurrentCommandQueueID, None, itkGPUImageSS2)
itkGPUImageSS2.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetModifiableDataManager, None, itkGPUImageSS2)
itkGPUImageSS2.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetDataManager, None, itkGPUImageSS2)
itkGPUImageSS2.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_GetGPUDataManager, None, itkGPUImageSS2)
itkGPUImageSS2.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageSS2_Graft, None, itkGPUImageSS2)
itkGPUImageSS2_swigregister = _itkGPUImagePython.itkGPUImageSS2_swigregister
itkGPUImageSS2_swigregister(itkGPUImageSS2)

def itkGPUImageSS2___New_orig__() -> "itkGPUImageSS2_Pointer":
    """itkGPUImageSS2___New_orig__() -> itkGPUImageSS2_Pointer"""
    return _itkGPUImagePython.itkGPUImageSS2___New_orig__()

def itkGPUImageSS2_cast(obj: 'itkLightObject') -> "itkGPUImageSS2 *":
    """itkGPUImageSS2_cast(itkLightObject obj) -> itkGPUImageSS2"""
    return _itkGPUImagePython.itkGPUImageSS2_cast(obj)

class itkGPUImageSS3(itkImagePython.itkImageSS3):
    """Proxy of C++ itkGPUImageSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageSS3_Pointer":
        """__New_orig__() -> itkGPUImageSS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageSS3_Pointer":
        """Clone(itkGPUImageSS3 self) -> itkGPUImageSS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageSS3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageSS3 self, bool initialize=False)
        Allocate(itkGPUImageSS3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageSS3_Allocate(self, initialize)


    def FillBuffer(self, value: 'short const &') -> "void":
        """
        FillBuffer(itkGPUImageSS3 self, short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageSS3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'short const &') -> "void":
        """
        SetPixel(itkGPUImageSS3 self, itkIndex3 index, short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageSS3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "short &":
        """
        GetPixel(itkGPUImageSS3 self, itkIndex3 index) -> short const
        GetPixel(itkGPUImageSS3 self, itkIndex3 index) -> short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageSS3_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageSS3 self)"""
        return _itkGPUImagePython.itkGPUImageSS3_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "short const *":
        """
        GetBufferPointer(itkGPUImageSS3 self) -> short
        GetBufferPointer(itkGPUImageSS3 self) -> short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageSS3_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< short > const":
        """
        GetPixelAccessor(itkGPUImageSS3 self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(itkGPUImageSS3 self) -> itk::DefaultPixelAccessor< short > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageSS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< short,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< short,3 > >
        GetNeighborhoodAccessor(itkGPUImageSS3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< short,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageSS3_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,short > *') -> "void":
        """
        SetPixelContainer(itkGPUImageSS3 self, itk::ImportImageContainer< unsigned long,short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageSS3_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,short > const *":
        """
        GetPixelContainer(itkGPUImageSS3 self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(itkGPUImageSS3 self) -> itk::ImportImageContainer< unsigned long,short > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageSS3_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageSS3 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageSS3_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageSS3 self) -> int"""
        return _itkGPUImagePython.itkGPUImageSS3_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGISS3 *":
        """GetModifiableDataManager(itkGPUImageSS3 self) -> itkGPUImageDataManagerGISS3"""
        return _itkGPUImagePython.itkGPUImageSS3_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGISS3 *":
        """
        GetDataManager(itkGPUImageSS3 self) -> itkGPUImageDataManagerGISS3
        GetDataManager(itkGPUImageSS3 self) -> itkGPUImageDataManagerGISS3
        """
        return _itkGPUImagePython.itkGPUImageSS3_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageSS3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageSS3_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageSS3') -> "void":
        """
        Graft(itkGPUImageSS3 self, itkGPUImageSS3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageSS3_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageSS3

    def cast(obj: 'itkLightObject') -> "itkGPUImageSS3 *":
        """cast(itkLightObject obj) -> itkGPUImageSS3"""
        return _itkGPUImagePython.itkGPUImageSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageSS3

        Create a new object of the class itkGPUImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageSS3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_Clone, None, itkGPUImageSS3)
itkGPUImageSS3.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_Allocate, None, itkGPUImageSS3)
itkGPUImageSS3.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_FillBuffer, None, itkGPUImageSS3)
itkGPUImageSS3.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_SetPixel, None, itkGPUImageSS3)
itkGPUImageSS3.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetPixel, None, itkGPUImageSS3)
itkGPUImageSS3.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_UpdateBuffers, None, itkGPUImageSS3)
itkGPUImageSS3.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetBufferPointer, None, itkGPUImageSS3)
itkGPUImageSS3.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetPixelAccessor, None, itkGPUImageSS3)
itkGPUImageSS3.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetNeighborhoodAccessor, None, itkGPUImageSS3)
itkGPUImageSS3.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_SetPixelContainer, None, itkGPUImageSS3)
itkGPUImageSS3.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetPixelContainer, None, itkGPUImageSS3)
itkGPUImageSS3.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_SetCurrentCommandQueue, None, itkGPUImageSS3)
itkGPUImageSS3.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetCurrentCommandQueueID, None, itkGPUImageSS3)
itkGPUImageSS3.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetModifiableDataManager, None, itkGPUImageSS3)
itkGPUImageSS3.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetDataManager, None, itkGPUImageSS3)
itkGPUImageSS3.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_GetGPUDataManager, None, itkGPUImageSS3)
itkGPUImageSS3.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageSS3_Graft, None, itkGPUImageSS3)
itkGPUImageSS3_swigregister = _itkGPUImagePython.itkGPUImageSS3_swigregister
itkGPUImageSS3_swigregister(itkGPUImageSS3)

def itkGPUImageSS3___New_orig__() -> "itkGPUImageSS3_Pointer":
    """itkGPUImageSS3___New_orig__() -> itkGPUImageSS3_Pointer"""
    return _itkGPUImagePython.itkGPUImageSS3___New_orig__()

def itkGPUImageSS3_cast(obj: 'itkLightObject') -> "itkGPUImageSS3 *":
    """itkGPUImageSS3_cast(itkLightObject obj) -> itkGPUImageSS3"""
    return _itkGPUImagePython.itkGPUImageSS3_cast(obj)

class itkGPUImageUC2(itkImagePython.itkImageUC2):
    """Proxy of C++ itkGPUImageUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageUC2_Pointer":
        """__New_orig__() -> itkGPUImageUC2_Pointer"""
        return _itkGPUImagePython.itkGPUImageUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageUC2_Pointer":
        """Clone(itkGPUImageUC2 self) -> itkGPUImageUC2_Pointer"""
        return _itkGPUImagePython.itkGPUImageUC2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageUC2 self, bool initialize=False)
        Allocate(itkGPUImageUC2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageUC2_Allocate(self, initialize)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """
        FillBuffer(itkGPUImageUC2 self, unsigned char const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageUC2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned char const &') -> "void":
        """
        SetPixel(itkGPUImageUC2 self, itkIndex2 index, unsigned char const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageUC2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkGPUImageUC2 self, itkIndex2 index) -> unsigned char const
        GetPixel(itkGPUImageUC2 self, itkIndex2 index) -> unsigned char &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageUC2_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageUC2 self)"""
        return _itkGPUImagePython.itkGPUImageUC2_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkGPUImageUC2 self) -> unsigned char
        GetBufferPointer(itkGPUImageUC2 self) -> unsigned char const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageUC2_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkGPUImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkGPUImageUC2 self) -> itk::DefaultPixelAccessor< unsigned char > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageUC2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned char,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned char,2 > >
        GetNeighborhoodAccessor(itkGPUImageUC2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned char,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageUC2_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned char > *') -> "void":
        """
        SetPixelContainer(itkGPUImageUC2 self, itk::ImportImageContainer< unsigned long,unsigned char > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageUC2_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned char > const *":
        """
        GetPixelContainer(itkGPUImageUC2 self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(itkGPUImageUC2 self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageUC2_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageUC2 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageUC2_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageUC2 self) -> int"""
        return _itkGPUImagePython.itkGPUImageUC2_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIUC2 *":
        """GetModifiableDataManager(itkGPUImageUC2 self) -> itkGPUImageDataManagerGIUC2"""
        return _itkGPUImagePython.itkGPUImageUC2_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIUC2 *":
        """
        GetDataManager(itkGPUImageUC2 self) -> itkGPUImageDataManagerGIUC2
        GetDataManager(itkGPUImageUC2 self) -> itkGPUImageDataManagerGIUC2
        """
        return _itkGPUImagePython.itkGPUImageUC2_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageUC2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageUC2_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageUC2') -> "void":
        """
        Graft(itkGPUImageUC2 self, itkGPUImageUC2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageUC2_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageUC2

    def cast(obj: 'itkLightObject') -> "itkGPUImageUC2 *":
        """cast(itkLightObject obj) -> itkGPUImageUC2"""
        return _itkGPUImagePython.itkGPUImageUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageUC2

        Create a new object of the class itkGPUImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageUC2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_Clone, None, itkGPUImageUC2)
itkGPUImageUC2.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_Allocate, None, itkGPUImageUC2)
itkGPUImageUC2.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_FillBuffer, None, itkGPUImageUC2)
itkGPUImageUC2.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_SetPixel, None, itkGPUImageUC2)
itkGPUImageUC2.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetPixel, None, itkGPUImageUC2)
itkGPUImageUC2.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_UpdateBuffers, None, itkGPUImageUC2)
itkGPUImageUC2.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetBufferPointer, None, itkGPUImageUC2)
itkGPUImageUC2.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetPixelAccessor, None, itkGPUImageUC2)
itkGPUImageUC2.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetNeighborhoodAccessor, None, itkGPUImageUC2)
itkGPUImageUC2.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_SetPixelContainer, None, itkGPUImageUC2)
itkGPUImageUC2.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetPixelContainer, None, itkGPUImageUC2)
itkGPUImageUC2.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_SetCurrentCommandQueue, None, itkGPUImageUC2)
itkGPUImageUC2.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetCurrentCommandQueueID, None, itkGPUImageUC2)
itkGPUImageUC2.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetModifiableDataManager, None, itkGPUImageUC2)
itkGPUImageUC2.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetDataManager, None, itkGPUImageUC2)
itkGPUImageUC2.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_GetGPUDataManager, None, itkGPUImageUC2)
itkGPUImageUC2.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageUC2_Graft, None, itkGPUImageUC2)
itkGPUImageUC2_swigregister = _itkGPUImagePython.itkGPUImageUC2_swigregister
itkGPUImageUC2_swigregister(itkGPUImageUC2)

def itkGPUImageUC2___New_orig__() -> "itkGPUImageUC2_Pointer":
    """itkGPUImageUC2___New_orig__() -> itkGPUImageUC2_Pointer"""
    return _itkGPUImagePython.itkGPUImageUC2___New_orig__()

def itkGPUImageUC2_cast(obj: 'itkLightObject') -> "itkGPUImageUC2 *":
    """itkGPUImageUC2_cast(itkLightObject obj) -> itkGPUImageUC2"""
    return _itkGPUImagePython.itkGPUImageUC2_cast(obj)

class itkGPUImageUC3(itkImagePython.itkImageUC3):
    """Proxy of C++ itkGPUImageUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageUC3_Pointer":
        """__New_orig__() -> itkGPUImageUC3_Pointer"""
        return _itkGPUImagePython.itkGPUImageUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageUC3_Pointer":
        """Clone(itkGPUImageUC3 self) -> itkGPUImageUC3_Pointer"""
        return _itkGPUImagePython.itkGPUImageUC3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageUC3 self, bool initialize=False)
        Allocate(itkGPUImageUC3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageUC3_Allocate(self, initialize)


    def FillBuffer(self, value: 'unsigned char const &') -> "void":
        """
        FillBuffer(itkGPUImageUC3 self, unsigned char const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageUC3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned char const &') -> "void":
        """
        SetPixel(itkGPUImageUC3 self, itkIndex3 index, unsigned char const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageUC3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned char &":
        """
        GetPixel(itkGPUImageUC3 self, itkIndex3 index) -> unsigned char const
        GetPixel(itkGPUImageUC3 self, itkIndex3 index) -> unsigned char &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageUC3_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageUC3 self)"""
        return _itkGPUImagePython.itkGPUImageUC3_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "unsigned char const *":
        """
        GetBufferPointer(itkGPUImageUC3 self) -> unsigned char
        GetBufferPointer(itkGPUImageUC3 self) -> unsigned char const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageUC3_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned char > const":
        """
        GetPixelAccessor(itkGPUImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(itkGPUImageUC3 self) -> itk::DefaultPixelAccessor< unsigned char > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageUC3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned char,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned char,3 > >
        GetNeighborhoodAccessor(itkGPUImageUC3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned char,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageUC3_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned char > *') -> "void":
        """
        SetPixelContainer(itkGPUImageUC3 self, itk::ImportImageContainer< unsigned long,unsigned char > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageUC3_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned char > const *":
        """
        GetPixelContainer(itkGPUImageUC3 self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(itkGPUImageUC3 self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageUC3_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageUC3 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageUC3_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageUC3 self) -> int"""
        return _itkGPUImagePython.itkGPUImageUC3_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIUC3 *":
        """GetModifiableDataManager(itkGPUImageUC3 self) -> itkGPUImageDataManagerGIUC3"""
        return _itkGPUImagePython.itkGPUImageUC3_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIUC3 *":
        """
        GetDataManager(itkGPUImageUC3 self) -> itkGPUImageDataManagerGIUC3
        GetDataManager(itkGPUImageUC3 self) -> itkGPUImageDataManagerGIUC3
        """
        return _itkGPUImagePython.itkGPUImageUC3_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageUC3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageUC3_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageUC3') -> "void":
        """
        Graft(itkGPUImageUC3 self, itkGPUImageUC3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageUC3_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageUC3

    def cast(obj: 'itkLightObject') -> "itkGPUImageUC3 *":
        """cast(itkLightObject obj) -> itkGPUImageUC3"""
        return _itkGPUImagePython.itkGPUImageUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageUC3

        Create a new object of the class itkGPUImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageUC3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_Clone, None, itkGPUImageUC3)
itkGPUImageUC3.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_Allocate, None, itkGPUImageUC3)
itkGPUImageUC3.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_FillBuffer, None, itkGPUImageUC3)
itkGPUImageUC3.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_SetPixel, None, itkGPUImageUC3)
itkGPUImageUC3.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetPixel, None, itkGPUImageUC3)
itkGPUImageUC3.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_UpdateBuffers, None, itkGPUImageUC3)
itkGPUImageUC3.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetBufferPointer, None, itkGPUImageUC3)
itkGPUImageUC3.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetPixelAccessor, None, itkGPUImageUC3)
itkGPUImageUC3.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetNeighborhoodAccessor, None, itkGPUImageUC3)
itkGPUImageUC3.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_SetPixelContainer, None, itkGPUImageUC3)
itkGPUImageUC3.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetPixelContainer, None, itkGPUImageUC3)
itkGPUImageUC3.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_SetCurrentCommandQueue, None, itkGPUImageUC3)
itkGPUImageUC3.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetCurrentCommandQueueID, None, itkGPUImageUC3)
itkGPUImageUC3.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetModifiableDataManager, None, itkGPUImageUC3)
itkGPUImageUC3.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetDataManager, None, itkGPUImageUC3)
itkGPUImageUC3.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_GetGPUDataManager, None, itkGPUImageUC3)
itkGPUImageUC3.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageUC3_Graft, None, itkGPUImageUC3)
itkGPUImageUC3_swigregister = _itkGPUImagePython.itkGPUImageUC3_swigregister
itkGPUImageUC3_swigregister(itkGPUImageUC3)

def itkGPUImageUC3___New_orig__() -> "itkGPUImageUC3_Pointer":
    """itkGPUImageUC3___New_orig__() -> itkGPUImageUC3_Pointer"""
    return _itkGPUImagePython.itkGPUImageUC3___New_orig__()

def itkGPUImageUC3_cast(obj: 'itkLightObject') -> "itkGPUImageUC3 *":
    """itkGPUImageUC3_cast(itkLightObject obj) -> itkGPUImageUC3"""
    return _itkGPUImagePython.itkGPUImageUC3_cast(obj)

class itkGPUImageUL2(itkImagePython.itkImageUL2):
    """Proxy of C++ itkGPUImageUL2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageUL2_Pointer":
        """__New_orig__() -> itkGPUImageUL2_Pointer"""
        return _itkGPUImagePython.itkGPUImageUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageUL2_Pointer":
        """Clone(itkGPUImageUL2 self) -> itkGPUImageUL2_Pointer"""
        return _itkGPUImagePython.itkGPUImageUL2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageUL2 self, bool initialize=False)
        Allocate(itkGPUImageUL2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageUL2_Allocate(self, initialize)


    def FillBuffer(self, value: 'unsigned long const &') -> "void":
        """
        FillBuffer(itkGPUImageUL2 self, unsigned long const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageUL2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned long const &') -> "void":
        """
        SetPixel(itkGPUImageUL2 self, itkIndex2 index, unsigned long const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageUL2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long &":
        """
        GetPixel(itkGPUImageUL2 self, itkIndex2 index) -> unsigned long const
        GetPixel(itkGPUImageUL2 self, itkIndex2 index) -> unsigned long &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageUL2_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageUL2 self)"""
        return _itkGPUImagePython.itkGPUImageUL2_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "unsigned long const *":
        """
        GetBufferPointer(itkGPUImageUL2 self) -> unsigned long
        GetBufferPointer(itkGPUImageUL2 self) -> unsigned long const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageUL2_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long > const":
        """
        GetPixelAccessor(itkGPUImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkGPUImageUL2 self) -> itk::DefaultPixelAccessor< unsigned long > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageUL2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned long,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned long,2 > >
        GetNeighborhoodAccessor(itkGPUImageUL2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned long,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageUL2_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned long > *') -> "void":
        """
        SetPixelContainer(itkGPUImageUL2 self, itk::ImportImageContainer< unsigned long,unsigned long > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageUL2_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned long > const *":
        """
        GetPixelContainer(itkGPUImageUL2 self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(itkGPUImageUL2 self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageUL2_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageUL2 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageUL2_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageUL2 self) -> int"""
        return _itkGPUImagePython.itkGPUImageUL2_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIUL2 *":
        """GetModifiableDataManager(itkGPUImageUL2 self) -> itkGPUImageDataManagerGIUL2"""
        return _itkGPUImagePython.itkGPUImageUL2_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIUL2 *":
        """
        GetDataManager(itkGPUImageUL2 self) -> itkGPUImageDataManagerGIUL2
        GetDataManager(itkGPUImageUL2 self) -> itkGPUImageDataManagerGIUL2
        """
        return _itkGPUImagePython.itkGPUImageUL2_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageUL2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageUL2_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageUL2') -> "void":
        """
        Graft(itkGPUImageUL2 self, itkGPUImageUL2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageUL2_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageUL2

    def cast(obj: 'itkLightObject') -> "itkGPUImageUL2 *":
        """cast(itkLightObject obj) -> itkGPUImageUL2"""
        return _itkGPUImagePython.itkGPUImageUL2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageUL2

        Create a new object of the class itkGPUImageUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageUL2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageUL2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_Clone, None, itkGPUImageUL2)
itkGPUImageUL2.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_Allocate, None, itkGPUImageUL2)
itkGPUImageUL2.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_FillBuffer, None, itkGPUImageUL2)
itkGPUImageUL2.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_SetPixel, None, itkGPUImageUL2)
itkGPUImageUL2.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetPixel, None, itkGPUImageUL2)
itkGPUImageUL2.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_UpdateBuffers, None, itkGPUImageUL2)
itkGPUImageUL2.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetBufferPointer, None, itkGPUImageUL2)
itkGPUImageUL2.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetPixelAccessor, None, itkGPUImageUL2)
itkGPUImageUL2.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetNeighborhoodAccessor, None, itkGPUImageUL2)
itkGPUImageUL2.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_SetPixelContainer, None, itkGPUImageUL2)
itkGPUImageUL2.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetPixelContainer, None, itkGPUImageUL2)
itkGPUImageUL2.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_SetCurrentCommandQueue, None, itkGPUImageUL2)
itkGPUImageUL2.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetCurrentCommandQueueID, None, itkGPUImageUL2)
itkGPUImageUL2.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetModifiableDataManager, None, itkGPUImageUL2)
itkGPUImageUL2.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetDataManager, None, itkGPUImageUL2)
itkGPUImageUL2.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_GetGPUDataManager, None, itkGPUImageUL2)
itkGPUImageUL2.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageUL2_Graft, None, itkGPUImageUL2)
itkGPUImageUL2_swigregister = _itkGPUImagePython.itkGPUImageUL2_swigregister
itkGPUImageUL2_swigregister(itkGPUImageUL2)

def itkGPUImageUL2___New_orig__() -> "itkGPUImageUL2_Pointer":
    """itkGPUImageUL2___New_orig__() -> itkGPUImageUL2_Pointer"""
    return _itkGPUImagePython.itkGPUImageUL2___New_orig__()

def itkGPUImageUL2_cast(obj: 'itkLightObject') -> "itkGPUImageUL2 *":
    """itkGPUImageUL2_cast(itkLightObject obj) -> itkGPUImageUL2"""
    return _itkGPUImagePython.itkGPUImageUL2_cast(obj)

class itkGPUImageUL3(itkImagePython.itkImageUL3):
    """Proxy of C++ itkGPUImageUL3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageUL3_Pointer":
        """__New_orig__() -> itkGPUImageUL3_Pointer"""
        return _itkGPUImagePython.itkGPUImageUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageUL3_Pointer":
        """Clone(itkGPUImageUL3 self) -> itkGPUImageUL3_Pointer"""
        return _itkGPUImagePython.itkGPUImageUL3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageUL3 self, bool initialize=False)
        Allocate(itkGPUImageUL3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageUL3_Allocate(self, initialize)


    def FillBuffer(self, value: 'unsigned long const &') -> "void":
        """
        FillBuffer(itkGPUImageUL3 self, unsigned long const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageUL3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned long const &') -> "void":
        """
        SetPixel(itkGPUImageUL3 self, itkIndex3 index, unsigned long const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageUL3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned long &":
        """
        GetPixel(itkGPUImageUL3 self, itkIndex3 index) -> unsigned long const
        GetPixel(itkGPUImageUL3 self, itkIndex3 index) -> unsigned long &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageUL3_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageUL3 self)"""
        return _itkGPUImagePython.itkGPUImageUL3_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "unsigned long const *":
        """
        GetBufferPointer(itkGPUImageUL3 self) -> unsigned long
        GetBufferPointer(itkGPUImageUL3 self) -> unsigned long const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageUL3_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned long > const":
        """
        GetPixelAccessor(itkGPUImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(itkGPUImageUL3 self) -> itk::DefaultPixelAccessor< unsigned long > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageUL3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned long,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned long,3 > >
        GetNeighborhoodAccessor(itkGPUImageUL3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned long,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageUL3_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned long > *') -> "void":
        """
        SetPixelContainer(itkGPUImageUL3 self, itk::ImportImageContainer< unsigned long,unsigned long > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageUL3_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned long > const *":
        """
        GetPixelContainer(itkGPUImageUL3 self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(itkGPUImageUL3 self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageUL3_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageUL3 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageUL3_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageUL3 self) -> int"""
        return _itkGPUImagePython.itkGPUImageUL3_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIUL3 *":
        """GetModifiableDataManager(itkGPUImageUL3 self) -> itkGPUImageDataManagerGIUL3"""
        return _itkGPUImagePython.itkGPUImageUL3_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIUL3 *":
        """
        GetDataManager(itkGPUImageUL3 self) -> itkGPUImageDataManagerGIUL3
        GetDataManager(itkGPUImageUL3 self) -> itkGPUImageDataManagerGIUL3
        """
        return _itkGPUImagePython.itkGPUImageUL3_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageUL3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageUL3_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageUL3') -> "void":
        """
        Graft(itkGPUImageUL3 self, itkGPUImageUL3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageUL3_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageUL3

    def cast(obj: 'itkLightObject') -> "itkGPUImageUL3 *":
        """cast(itkLightObject obj) -> itkGPUImageUL3"""
        return _itkGPUImagePython.itkGPUImageUL3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageUL3

        Create a new object of the class itkGPUImageUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageUL3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageUL3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_Clone, None, itkGPUImageUL3)
itkGPUImageUL3.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_Allocate, None, itkGPUImageUL3)
itkGPUImageUL3.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_FillBuffer, None, itkGPUImageUL3)
itkGPUImageUL3.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_SetPixel, None, itkGPUImageUL3)
itkGPUImageUL3.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetPixel, None, itkGPUImageUL3)
itkGPUImageUL3.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_UpdateBuffers, None, itkGPUImageUL3)
itkGPUImageUL3.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetBufferPointer, None, itkGPUImageUL3)
itkGPUImageUL3.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetPixelAccessor, None, itkGPUImageUL3)
itkGPUImageUL3.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetNeighborhoodAccessor, None, itkGPUImageUL3)
itkGPUImageUL3.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_SetPixelContainer, None, itkGPUImageUL3)
itkGPUImageUL3.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetPixelContainer, None, itkGPUImageUL3)
itkGPUImageUL3.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_SetCurrentCommandQueue, None, itkGPUImageUL3)
itkGPUImageUL3.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetCurrentCommandQueueID, None, itkGPUImageUL3)
itkGPUImageUL3.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetModifiableDataManager, None, itkGPUImageUL3)
itkGPUImageUL3.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetDataManager, None, itkGPUImageUL3)
itkGPUImageUL3.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_GetGPUDataManager, None, itkGPUImageUL3)
itkGPUImageUL3.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageUL3_Graft, None, itkGPUImageUL3)
itkGPUImageUL3_swigregister = _itkGPUImagePython.itkGPUImageUL3_swigregister
itkGPUImageUL3_swigregister(itkGPUImageUL3)

def itkGPUImageUL3___New_orig__() -> "itkGPUImageUL3_Pointer":
    """itkGPUImageUL3___New_orig__() -> itkGPUImageUL3_Pointer"""
    return _itkGPUImagePython.itkGPUImageUL3___New_orig__()

def itkGPUImageUL3_cast(obj: 'itkLightObject') -> "itkGPUImageUL3 *":
    """itkGPUImageUL3_cast(itkLightObject obj) -> itkGPUImageUL3"""
    return _itkGPUImagePython.itkGPUImageUL3_cast(obj)

class itkGPUImageUS2(itkImagePython.itkImageUS2):
    """Proxy of C++ itkGPUImageUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageUS2_Pointer":
        """__New_orig__() -> itkGPUImageUS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageUS2_Pointer":
        """Clone(itkGPUImageUS2 self) -> itkGPUImageUS2_Pointer"""
        return _itkGPUImagePython.itkGPUImageUS2_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageUS2 self, bool initialize=False)
        Allocate(itkGPUImageUS2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageUS2_Allocate(self, initialize)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """
        FillBuffer(itkGPUImageUS2 self, unsigned short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageUS2_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'unsigned short const &') -> "void":
        """
        SetPixel(itkGPUImageUS2 self, itkIndex2 index, unsigned short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageUS2_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkGPUImageUS2 self, itkIndex2 index) -> unsigned short const
        GetPixel(itkGPUImageUS2 self, itkIndex2 index) -> unsigned short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageUS2_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageUS2 self)"""
        return _itkGPUImagePython.itkGPUImageUS2_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkGPUImageUS2 self) -> unsigned short
        GetBufferPointer(itkGPUImageUS2 self) -> unsigned short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageUS2_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkGPUImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkGPUImageUS2 self) -> itk::DefaultPixelAccessor< unsigned short > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageUS2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned short,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned short,2 > >
        GetNeighborhoodAccessor(itkGPUImageUS2 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned short,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageUS2_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned short > *') -> "void":
        """
        SetPixelContainer(itkGPUImageUS2 self, itk::ImportImageContainer< unsigned long,unsigned short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageUS2_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned short > const *":
        """
        GetPixelContainer(itkGPUImageUS2 self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(itkGPUImageUS2 self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageUS2_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageUS2 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageUS2_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageUS2 self) -> int"""
        return _itkGPUImagePython.itkGPUImageUS2_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIUS2 *":
        """GetModifiableDataManager(itkGPUImageUS2 self) -> itkGPUImageDataManagerGIUS2"""
        return _itkGPUImagePython.itkGPUImageUS2_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIUS2 *":
        """
        GetDataManager(itkGPUImageUS2 self) -> itkGPUImageDataManagerGIUS2
        GetDataManager(itkGPUImageUS2 self) -> itkGPUImageDataManagerGIUS2
        """
        return _itkGPUImagePython.itkGPUImageUS2_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageUS2 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageUS2_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageUS2') -> "void":
        """
        Graft(itkGPUImageUS2 self, itkGPUImageUS2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageUS2_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageUS2

    def cast(obj: 'itkLightObject') -> "itkGPUImageUS2 *":
        """cast(itkLightObject obj) -> itkGPUImageUS2"""
        return _itkGPUImagePython.itkGPUImageUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageUS2

        Create a new object of the class itkGPUImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageUS2.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_Clone, None, itkGPUImageUS2)
itkGPUImageUS2.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_Allocate, None, itkGPUImageUS2)
itkGPUImageUS2.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_FillBuffer, None, itkGPUImageUS2)
itkGPUImageUS2.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_SetPixel, None, itkGPUImageUS2)
itkGPUImageUS2.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetPixel, None, itkGPUImageUS2)
itkGPUImageUS2.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_UpdateBuffers, None, itkGPUImageUS2)
itkGPUImageUS2.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetBufferPointer, None, itkGPUImageUS2)
itkGPUImageUS2.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetPixelAccessor, None, itkGPUImageUS2)
itkGPUImageUS2.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetNeighborhoodAccessor, None, itkGPUImageUS2)
itkGPUImageUS2.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_SetPixelContainer, None, itkGPUImageUS2)
itkGPUImageUS2.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetPixelContainer, None, itkGPUImageUS2)
itkGPUImageUS2.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_SetCurrentCommandQueue, None, itkGPUImageUS2)
itkGPUImageUS2.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetCurrentCommandQueueID, None, itkGPUImageUS2)
itkGPUImageUS2.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetModifiableDataManager, None, itkGPUImageUS2)
itkGPUImageUS2.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetDataManager, None, itkGPUImageUS2)
itkGPUImageUS2.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_GetGPUDataManager, None, itkGPUImageUS2)
itkGPUImageUS2.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageUS2_Graft, None, itkGPUImageUS2)
itkGPUImageUS2_swigregister = _itkGPUImagePython.itkGPUImageUS2_swigregister
itkGPUImageUS2_swigregister(itkGPUImageUS2)

def itkGPUImageUS2___New_orig__() -> "itkGPUImageUS2_Pointer":
    """itkGPUImageUS2___New_orig__() -> itkGPUImageUS2_Pointer"""
    return _itkGPUImagePython.itkGPUImageUS2___New_orig__()

def itkGPUImageUS2_cast(obj: 'itkLightObject') -> "itkGPUImageUS2 *":
    """itkGPUImageUS2_cast(itkLightObject obj) -> itkGPUImageUS2"""
    return _itkGPUImagePython.itkGPUImageUS2_cast(obj)

class itkGPUImageUS3(itkImagePython.itkImageUS3):
    """Proxy of C++ itkGPUImageUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageUS3_Pointer":
        """__New_orig__() -> itkGPUImageUS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageUS3_Pointer":
        """Clone(itkGPUImageUS3 self) -> itkGPUImageUS3_Pointer"""
        return _itkGPUImagePython.itkGPUImageUS3_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageUS3 self, bool initialize=False)
        Allocate(itkGPUImageUS3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageUS3_Allocate(self, initialize)


    def FillBuffer(self, value: 'unsigned short const &') -> "void":
        """
        FillBuffer(itkGPUImageUS3 self, unsigned short const & value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageUS3_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'unsigned short const &') -> "void":
        """
        SetPixel(itkGPUImageUS3 self, itkIndex3 index, unsigned short const & value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageUS3_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "unsigned short &":
        """
        GetPixel(itkGPUImageUS3 self, itkIndex3 index) -> unsigned short const
        GetPixel(itkGPUImageUS3 self, itkIndex3 index) -> unsigned short &

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageUS3_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageUS3 self)"""
        return _itkGPUImagePython.itkGPUImageUS3_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "unsigned short const *":
        """
        GetBufferPointer(itkGPUImageUS3 self) -> unsigned short
        GetBufferPointer(itkGPUImageUS3 self) -> unsigned short const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageUS3_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< unsigned short > const":
        """
        GetPixelAccessor(itkGPUImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(itkGPUImageUS3 self) -> itk::DefaultPixelAccessor< unsigned short > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageUS3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned short,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned short,3 > >
        GetNeighborhoodAccessor(itkGPUImageUS3 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< unsigned short,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageUS3_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,unsigned short > *') -> "void":
        """
        SetPixelContainer(itkGPUImageUS3 self, itk::ImportImageContainer< unsigned long,unsigned short > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageUS3_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,unsigned short > const *":
        """
        GetPixelContainer(itkGPUImageUS3 self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(itkGPUImageUS3 self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageUS3_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageUS3 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageUS3_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageUS3 self) -> int"""
        return _itkGPUImagePython.itkGPUImageUS3_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIUS3 *":
        """GetModifiableDataManager(itkGPUImageUS3 self) -> itkGPUImageDataManagerGIUS3"""
        return _itkGPUImagePython.itkGPUImageUS3_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIUS3 *":
        """
        GetDataManager(itkGPUImageUS3 self) -> itkGPUImageDataManagerGIUS3
        GetDataManager(itkGPUImageUS3 self) -> itkGPUImageDataManagerGIUS3
        """
        return _itkGPUImagePython.itkGPUImageUS3_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageUS3 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageUS3_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageUS3') -> "void":
        """
        Graft(itkGPUImageUS3 self, itkGPUImageUS3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageUS3_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageUS3

    def cast(obj: 'itkLightObject') -> "itkGPUImageUS3 *":
        """cast(itkLightObject obj) -> itkGPUImageUS3"""
        return _itkGPUImagePython.itkGPUImageUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageUS3

        Create a new object of the class itkGPUImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageUS3.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_Clone, None, itkGPUImageUS3)
itkGPUImageUS3.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_Allocate, None, itkGPUImageUS3)
itkGPUImageUS3.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_FillBuffer, None, itkGPUImageUS3)
itkGPUImageUS3.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_SetPixel, None, itkGPUImageUS3)
itkGPUImageUS3.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetPixel, None, itkGPUImageUS3)
itkGPUImageUS3.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_UpdateBuffers, None, itkGPUImageUS3)
itkGPUImageUS3.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetBufferPointer, None, itkGPUImageUS3)
itkGPUImageUS3.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetPixelAccessor, None, itkGPUImageUS3)
itkGPUImageUS3.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetNeighborhoodAccessor, None, itkGPUImageUS3)
itkGPUImageUS3.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_SetPixelContainer, None, itkGPUImageUS3)
itkGPUImageUS3.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetPixelContainer, None, itkGPUImageUS3)
itkGPUImageUS3.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_SetCurrentCommandQueue, None, itkGPUImageUS3)
itkGPUImageUS3.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetCurrentCommandQueueID, None, itkGPUImageUS3)
itkGPUImageUS3.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetModifiableDataManager, None, itkGPUImageUS3)
itkGPUImageUS3.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetDataManager, None, itkGPUImageUS3)
itkGPUImageUS3.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_GetGPUDataManager, None, itkGPUImageUS3)
itkGPUImageUS3.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageUS3_Graft, None, itkGPUImageUS3)
itkGPUImageUS3_swigregister = _itkGPUImagePython.itkGPUImageUS3_swigregister
itkGPUImageUS3_swigregister(itkGPUImageUS3)

def itkGPUImageUS3___New_orig__() -> "itkGPUImageUS3_Pointer":
    """itkGPUImageUS3___New_orig__() -> itkGPUImageUS3_Pointer"""
    return _itkGPUImagePython.itkGPUImageUS3___New_orig__()

def itkGPUImageUS3_cast(obj: 'itkLightObject') -> "itkGPUImageUS3 *":
    """itkGPUImageUS3_cast(itkLightObject obj) -> itkGPUImageUS3"""
    return _itkGPUImagePython.itkGPUImageUS3_cast(obj)

class itkGPUImageVF22(itkImagePython.itkImageVF22):
    """Proxy of C++ itkGPUImageVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageVF22_Pointer":
        """__New_orig__() -> itkGPUImageVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageVF22_Pointer":
        """Clone(itkGPUImageVF22 self) -> itkGPUImageVF22_Pointer"""
        return _itkGPUImagePython.itkGPUImageVF22_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageVF22 self, bool initialize=False)
        Allocate(itkGPUImageVF22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageVF22_Allocate(self, initialize)


    def FillBuffer(self, value: 'itkVectorF2') -> "void":
        """
        FillBuffer(itkGPUImageVF22 self, itkVectorF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageVF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkVectorF2') -> "void":
        """
        SetPixel(itkGPUImageVF22 self, itkIndex2 index, itkVectorF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageVF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF2 &":
        """
        GetPixel(itkGPUImageVF22 self, itkIndex2 index) -> itkVectorF2
        GetPixel(itkGPUImageVF22 self, itkIndex2 index) -> itkVectorF2

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageVF22_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageVF22 self)"""
        return _itkGPUImagePython.itkGPUImageVF22_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "itkVectorF2 const *":
        """
        GetBufferPointer(itkGPUImageVF22 self) -> itkVectorF2
        GetBufferPointer(itkGPUImageVF22 self) -> itkVectorF2

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageVF22_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,2 > > const":
        """
        GetPixelAccessor(itkGPUImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(itkGPUImageVF22 self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageVF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::Vector< float,2 >,2 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::Vector< float,2 >,2 > >
        GetNeighborhoodAccessor(itkGPUImageVF22 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::Vector< float,2 >,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageVF22_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > *') -> "void":
        """
        SetPixelContainer(itkGPUImageVF22 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageVF22_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *":
        """
        GetPixelContainer(itkGPUImageVF22 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(itkGPUImageVF22 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageVF22_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageVF22 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageVF22_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageVF22 self) -> int"""
        return _itkGPUImagePython.itkGPUImageVF22_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIVF22 *":
        """GetModifiableDataManager(itkGPUImageVF22 self) -> itkGPUImageDataManagerGIVF22"""
        return _itkGPUImagePython.itkGPUImageVF22_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIVF22 *":
        """
        GetDataManager(itkGPUImageVF22 self) -> itkGPUImageDataManagerGIVF22
        GetDataManager(itkGPUImageVF22 self) -> itkGPUImageDataManagerGIVF22
        """
        return _itkGPUImagePython.itkGPUImageVF22_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageVF22 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageVF22_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageVF22') -> "void":
        """
        Graft(itkGPUImageVF22 self, itkGPUImageVF22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageVF22_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageVF22

    def cast(obj: 'itkLightObject') -> "itkGPUImageVF22 *":
        """cast(itkLightObject obj) -> itkGPUImageVF22"""
        return _itkGPUImagePython.itkGPUImageVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageVF22

        Create a new object of the class itkGPUImageVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageVF22.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_Clone, None, itkGPUImageVF22)
itkGPUImageVF22.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_Allocate, None, itkGPUImageVF22)
itkGPUImageVF22.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_FillBuffer, None, itkGPUImageVF22)
itkGPUImageVF22.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_SetPixel, None, itkGPUImageVF22)
itkGPUImageVF22.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetPixel, None, itkGPUImageVF22)
itkGPUImageVF22.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_UpdateBuffers, None, itkGPUImageVF22)
itkGPUImageVF22.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetBufferPointer, None, itkGPUImageVF22)
itkGPUImageVF22.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetPixelAccessor, None, itkGPUImageVF22)
itkGPUImageVF22.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetNeighborhoodAccessor, None, itkGPUImageVF22)
itkGPUImageVF22.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_SetPixelContainer, None, itkGPUImageVF22)
itkGPUImageVF22.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetPixelContainer, None, itkGPUImageVF22)
itkGPUImageVF22.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_SetCurrentCommandQueue, None, itkGPUImageVF22)
itkGPUImageVF22.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetCurrentCommandQueueID, None, itkGPUImageVF22)
itkGPUImageVF22.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetModifiableDataManager, None, itkGPUImageVF22)
itkGPUImageVF22.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetDataManager, None, itkGPUImageVF22)
itkGPUImageVF22.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_GetGPUDataManager, None, itkGPUImageVF22)
itkGPUImageVF22.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageVF22_Graft, None, itkGPUImageVF22)
itkGPUImageVF22_swigregister = _itkGPUImagePython.itkGPUImageVF22_swigregister
itkGPUImageVF22_swigregister(itkGPUImageVF22)

def itkGPUImageVF22___New_orig__() -> "itkGPUImageVF22_Pointer":
    """itkGPUImageVF22___New_orig__() -> itkGPUImageVF22_Pointer"""
    return _itkGPUImagePython.itkGPUImageVF22___New_orig__()

def itkGPUImageVF22_cast(obj: 'itkLightObject') -> "itkGPUImageVF22 *":
    """itkGPUImageVF22_cast(itkLightObject obj) -> itkGPUImageVF22"""
    return _itkGPUImagePython.itkGPUImageVF22_cast(obj)

class itkGPUImageVF33(itkImagePython.itkImageVF33):
    """Proxy of C++ itkGPUImageVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGPUImageVF33_Pointer":
        """__New_orig__() -> itkGPUImageVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGPUImageVF33_Pointer":
        """Clone(itkGPUImageVF33 self) -> itkGPUImageVF33_Pointer"""
        return _itkGPUImagePython.itkGPUImageVF33_Clone(self)


    def Allocate(self, initialize: 'bool'=False) -> "void":
        """
        Allocate(itkGPUImageVF33 self, bool initialize=False)
        Allocate(itkGPUImageVF33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkGPUImagePython.itkGPUImageVF33_Allocate(self, initialize)


    def FillBuffer(self, value: 'itkVectorF3') -> "void":
        """
        FillBuffer(itkGPUImageVF33 self, itkVectorF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkGPUImagePython.itkGPUImageVF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkVectorF3') -> "void":
        """
        SetPixel(itkGPUImageVF33 self, itkIndex3 index, itkVectorF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkGPUImagePython.itkGPUImageVF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkVectorF3 &":
        """
        GetPixel(itkGPUImageVF33 self, itkIndex3 index) -> itkVectorF3
        GetPixel(itkGPUImageVF33 self, itkIndex3 index) -> itkVectorF3

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkGPUImagePython.itkGPUImageVF33_GetPixel(self, *args)


    def UpdateBuffers(self) -> "void":
        """UpdateBuffers(itkGPUImageVF33 self)"""
        return _itkGPUImagePython.itkGPUImageVF33_UpdateBuffers(self)


    def GetBufferPointer(self, *args) -> "itkVectorF3 const *":
        """
        GetBufferPointer(itkGPUImageVF33 self) -> itkVectorF3
        GetBufferPointer(itkGPUImageVF33 self) -> itkVectorF3

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkGPUImagePython.itkGPUImageVF33_GetBufferPointer(self, *args)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::Vector< float,3 > > const":
        """
        GetPixelAccessor(itkGPUImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > >
        GetPixelAccessor(itkGPUImageVF33 self) -> itk::DefaultPixelAccessor< itk::Vector< float,3 > > const

        Return the Pixel
        Accesor object 
        """
        return _itkGPUImagePython.itkGPUImageVF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::Vector< float,3 >,3 > > const":
        """
        GetNeighborhoodAccessor(itkGPUImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::Vector< float,3 >,3 > >
        GetNeighborhoodAccessor(itkGPUImageVF33 self) -> itk::NeighborhoodAccessorFunctor< itk::GPUImage< itk::Vector< float,3 >,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkGPUImagePython.itkGPUImageVF33_GetNeighborhoodAccessor(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > *') -> "void":
        """
        SetPixelContainer(itkGPUImageVF33 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkGPUImagePython.itkGPUImageVF33_SetPixelContainer(self, container)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *":
        """
        GetPixelContainer(itkGPUImageVF33 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > >
        GetPixelContainer(itkGPUImageVF33 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,3 > > const *

        Return a pointer
        to the container. 
        """
        return _itkGPUImagePython.itkGPUImageVF33_GetPixelContainer(self, *args)


    def SetCurrentCommandQueue(self, queueid: 'int') -> "void":
        """SetCurrentCommandQueue(itkGPUImageVF33 self, int queueid)"""
        return _itkGPUImagePython.itkGPUImageVF33_SetCurrentCommandQueue(self, queueid)


    def GetCurrentCommandQueueID(self) -> "int":
        """GetCurrentCommandQueueID(itkGPUImageVF33 self) -> int"""
        return _itkGPUImagePython.itkGPUImageVF33_GetCurrentCommandQueueID(self)


    def GetModifiableDataManager(self) -> "itkGPUImageDataManagerGIVF33 *":
        """GetModifiableDataManager(itkGPUImageVF33 self) -> itkGPUImageDataManagerGIVF33"""
        return _itkGPUImagePython.itkGPUImageVF33_GetModifiableDataManager(self)


    def GetDataManager(self, *args) -> "itkGPUImageDataManagerGIVF33 *":
        """
        GetDataManager(itkGPUImageVF33 self) -> itkGPUImageDataManagerGIVF33
        GetDataManager(itkGPUImageVF33 self) -> itkGPUImageDataManagerGIVF33
        """
        return _itkGPUImagePython.itkGPUImageVF33_GetDataManager(self, *args)


    def GetGPUDataManager(self) -> "itkGPUDataManager *":
        """GetGPUDataManager(itkGPUImageVF33 self) -> itkGPUDataManager"""
        return _itkGPUImagePython.itkGPUImageVF33_GetGPUDataManager(self)


    def Graft(self, data: 'itkGPUImageVF33') -> "void":
        """
        Graft(itkGPUImageVF33 self, itkGPUImageVF33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkGPUImagePython.itkGPUImageVF33_Graft(self, data)

    __swig_destroy__ = _itkGPUImagePython.delete_itkGPUImageVF33

    def cast(obj: 'itkLightObject') -> "itkGPUImageVF33 *":
        """cast(itkLightObject obj) -> itkGPUImageVF33"""
        return _itkGPUImagePython.itkGPUImageVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGPUImageVF33

        Create a new object of the class itkGPUImageVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGPUImageVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGPUImageVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGPUImageVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGPUImageVF33.Clone = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_Clone, None, itkGPUImageVF33)
itkGPUImageVF33.Allocate = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_Allocate, None, itkGPUImageVF33)
itkGPUImageVF33.FillBuffer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_FillBuffer, None, itkGPUImageVF33)
itkGPUImageVF33.SetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_SetPixel, None, itkGPUImageVF33)
itkGPUImageVF33.GetPixel = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetPixel, None, itkGPUImageVF33)
itkGPUImageVF33.UpdateBuffers = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_UpdateBuffers, None, itkGPUImageVF33)
itkGPUImageVF33.GetBufferPointer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetBufferPointer, None, itkGPUImageVF33)
itkGPUImageVF33.GetPixelAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetPixelAccessor, None, itkGPUImageVF33)
itkGPUImageVF33.GetNeighborhoodAccessor = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetNeighborhoodAccessor, None, itkGPUImageVF33)
itkGPUImageVF33.SetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_SetPixelContainer, None, itkGPUImageVF33)
itkGPUImageVF33.GetPixelContainer = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetPixelContainer, None, itkGPUImageVF33)
itkGPUImageVF33.SetCurrentCommandQueue = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_SetCurrentCommandQueue, None, itkGPUImageVF33)
itkGPUImageVF33.GetCurrentCommandQueueID = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetCurrentCommandQueueID, None, itkGPUImageVF33)
itkGPUImageVF33.GetModifiableDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetModifiableDataManager, None, itkGPUImageVF33)
itkGPUImageVF33.GetDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetDataManager, None, itkGPUImageVF33)
itkGPUImageVF33.GetGPUDataManager = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_GetGPUDataManager, None, itkGPUImageVF33)
itkGPUImageVF33.Graft = new_instancemethod(_itkGPUImagePython.itkGPUImageVF33_Graft, None, itkGPUImageVF33)
itkGPUImageVF33_swigregister = _itkGPUImagePython.itkGPUImageVF33_swigregister
itkGPUImageVF33_swigregister(itkGPUImageVF33)

def itkGPUImageVF33___New_orig__() -> "itkGPUImageVF33_Pointer":
    """itkGPUImageVF33___New_orig__() -> itkGPUImageVF33_Pointer"""
    return _itkGPUImagePython.itkGPUImageVF33___New_orig__()

def itkGPUImageVF33_cast(obj: 'itkLightObject') -> "itkGPUImageVF33 *":
    """itkGPUImageVF33_cast(itkLightObject obj) -> itkGPUImageVF33"""
    return _itkGPUImagePython.itkGPUImageVF33_cast(obj)



