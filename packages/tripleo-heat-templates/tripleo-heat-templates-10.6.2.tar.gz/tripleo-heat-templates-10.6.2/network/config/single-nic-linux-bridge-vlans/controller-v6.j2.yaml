heat_template_version: rocky
description: >
  Software Config to drive os-net-config to configure VLANs for the controller role with IPv6 on the External network. The
  IPv6 default route is on the External network, and the IPv4 default route is on the Control Plane.
parameters:
  ControlPlaneIp:
    default: ''
    description: IP address/subnet on the ctlplane network
    type: string
  ControlPlaneSubnetCidr:
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlPlaneDefaultRoute:
    default: ''
    description: The default route of the control plane network. (The parameter
      is automatically resolved from the ctlplane subnet's gateway_ip attribute.)
    type: string
  ControlPlaneStaticRoutes:
    default: []
    description: >
      Routes for the ctlplane network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
  ControlPlaneMtu:
    default: 1500
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the network.
      (The parameter is automatically resolved from the ctlplane network's mtu attribute.)
    type: number
{% for network in networks %}
  {{network.name}}IpSubnet:
    default: ''
    description: IP address/subnet on the {{network.name_lower}} network
    type: string
  {{network.name}}NetworkVlanID:
    default: {{network.vlan|default(1)}}
    description: Vlan ID for the {{network.name_lower}} network traffic.
    type: number
  {{network.name}}Mtu:
    default: {{network.mtu|default('1500')}}
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the
      {{network.name}} network.
    type: number
  {{network.name}}InterfaceRoutes:
    default: []
    description: >
      Routes for the {{network.name_lower}} network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
{%- endfor %}
  ExternalInterfaceDefaultRoute:
    default: ''
    description: default route for the external network
    type: string
  DnsServers: # Override this via parameter_defaults
    default: []
    description: >
      DNS servers to use for the Overcloud (2 max for some implementations).
      If not set the nameservers configured in the ctlplane subnet's
      dns_nameservers attribute will be used.
    type: comma_delimited_list
  DnsSearchDomains: # Override this via parameter_defaults
    default: []
    description: A list of DNS search domains to be added (in order) to resolv.conf.
    type: comma_delimited_list
  EC2MetadataIp:
    default: ''
    description: The IP address of the EC2 metadata server. (The parameter
      is automatically resolved from the ctlplane subnet's host_routes attribute.)
    type: string
resources:

  MinViableMtu:
    # This resource resolves the minimum viable MTU for interfaces, bonds and
    # bridges that carry multiple VLANs. Each VLAN may have different MTU. The
    # bridge, bond or interface must have an MTU to allow the VLAN with the
    # largest MTU.
    type: OS::Heat::Value
    properties:
      type: number
      value:
        yaql:
          expression: $.data.max()
          data:
            - {get_param: ControlPlaneMtu}
{%- for network in networks if network.enabled|default(true) %}
            - {get_param: {{network.name}}Mtu}
{%- endfor %}

  OsNetConfigImpl:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template:
            get_file: ../../scripts/run-os-net-config.sh
          params:
            $network_config:
              network_config:
              - type: linux_bridge
                name: bridge_name
                mtu:
                  get_attr: [MinViableMtu, value]
                use_dhcp: false
                dns_servers:
                  get_param: DnsServers
                domain:
                  get_param: DnsSearchDomains
                addresses:
                - ip_netmask:
                    list_join:
                    - /
                    - - get_param: ControlPlaneIp
                      - get_param: ControlPlaneSubnetCidr
                routes:
                  list_concat_unique:
                    - get_param: ControlPlaneStaticRoutes
                    - - ip_netmask: 169.254.169.254/32
                        next_hop:
                          get_param: EC2MetadataIp
                      - default: true  # NOTE(hjensas): This is the IPv4 default route
                        next_hop:
                          get_param: ControlPlaneDefaultRoute
                members:
                - type: interface
                  name: interface_name
                  mtu:
                    get_attr: [MinViableMtu, value]
                  primary: true
              - type: vlan
                mtu:
                  get_attr: [MinViableMtu, value]
                vlan_id:
                  get_param: ExternalNetworkVlanID
                device: bridge_name
                addresses:
                - ip_netmask:
                    get_param: ExternalIpSubnet
                routes:
                  list_concat_unique:
                    - get_param: ExternalInterfaceRoutes
                    - - default: true  # NOTE(hjensas): This is the IPv6 default route
                        next_hop:
                          get_param: ExternalInterfaceDefaultRoute
              - type: vlan
                mtu:
                  get_attr: [MinViableMtu, value]
                vlan_id:
                  get_param: InternalApiNetworkVlanID
                device: bridge_name
                addresses:
                - ip_netmask:
                    get_param: InternalApiIpSubnet
                routes:
                  get_param: InternalApiInterfaceRoutes
              - type: vlan
                mtu:
                  get_attr: [MinViableMtu, value]
                vlan_id:
                  get_param: StorageNetworkVlanID
                device: bridge_name
                addresses:
                - ip_netmask:
                    get_param: StorageIpSubnet
                routes:
                  get_param: StorageInterfaceRoutes
              - type: vlan
                mtu:
                  get_attr: [MinViableMtu, value]
                vlan_id:
                  get_param: StorageMgmtNetworkVlanID
                device: bridge_name
                addresses:
                - ip_netmask:
                    get_param: StorageMgmtIpSubnet
                routes:
                  get_param: StorageMgmtInterfaceRoutes
              - type: vlan
                mtu:
                  get_attr: [MinViableMtu, value]
                vlan_id:
                  get_param: TenantNetworkVlanID
                device: bridge_name
                addresses:
                - ip_netmask:
                    get_param: TenantIpSubnet
                routes:
                  get_param: TenantInterfaceRoutes
              # Uncomment when including environments/network-management.yaml
              # If setting default route on the Management interface, comment
              # out the default route on the External interface. This will
              # make the External API unreachable from remote subnets.
              #- type: vlan
              #  mtu:
              #    get_attr: [MinViableMtu, value]
              #  vlan_id:
              #    get_param: ManagementNetworkVlanID
              #  device: bridge_name
              #  addresses:
              #  - ip_netmask:
              #      get_param: ManagementIpSubnet
              #  routes:
              #    list_concat_unique:
              #      - get_param: ManagementInterfaceRoutes
              #      - - default: true
              #          next_hop:
              #            get_param: ManagementInterfaceDefaultRoute
outputs:
  OS::stack_id:
    description: The OsNetConfigImpl resource.
    value:
      get_resource: OsNetConfigImpl

