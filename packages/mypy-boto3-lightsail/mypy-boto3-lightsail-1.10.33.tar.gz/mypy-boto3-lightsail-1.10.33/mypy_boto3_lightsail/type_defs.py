"Main interface for lightsail service type defs"
from __future__ import annotations

from datetime import datetime
import sys
from typing import Any, Dict, List

if sys.version_info >= (3, 8):
    from typing import Literal
else:
    from typing_extensions import Literal
if sys.version_info >= (3, 8):
    from typing import TypedDict
else:
    from typing_extensions import TypedDict


ClientAllocateStaticIpResponseoperationslocationTypeDef = TypedDict(
    "ClientAllocateStaticIpResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientAllocateStaticIpResponseoperationsTypeDef = TypedDict(
    "ClientAllocateStaticIpResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientAllocateStaticIpResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientAllocateStaticIpResponseTypeDef = TypedDict(
    "ClientAllocateStaticIpResponseTypeDef",
    {"operations": List[ClientAllocateStaticIpResponseoperationsTypeDef]},
    total=False,
)

ClientAttachDiskResponseoperationslocationTypeDef = TypedDict(
    "ClientAttachDiskResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientAttachDiskResponseoperationsTypeDef = TypedDict(
    "ClientAttachDiskResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientAttachDiskResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientAttachDiskResponseTypeDef = TypedDict(
    "ClientAttachDiskResponseTypeDef",
    {"operations": List[ClientAttachDiskResponseoperationsTypeDef]},
    total=False,
)

ClientAttachInstancesToLoadBalancerResponseoperationslocationTypeDef = TypedDict(
    "ClientAttachInstancesToLoadBalancerResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientAttachInstancesToLoadBalancerResponseoperationsTypeDef = TypedDict(
    "ClientAttachInstancesToLoadBalancerResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientAttachInstancesToLoadBalancerResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientAttachInstancesToLoadBalancerResponseTypeDef = TypedDict(
    "ClientAttachInstancesToLoadBalancerResponseTypeDef",
    {"operations": List[ClientAttachInstancesToLoadBalancerResponseoperationsTypeDef]},
    total=False,
)

ClientAttachLoadBalancerTlsCertificateResponseoperationslocationTypeDef = TypedDict(
    "ClientAttachLoadBalancerTlsCertificateResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientAttachLoadBalancerTlsCertificateResponseoperationsTypeDef = TypedDict(
    "ClientAttachLoadBalancerTlsCertificateResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientAttachLoadBalancerTlsCertificateResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientAttachLoadBalancerTlsCertificateResponseTypeDef = TypedDict(
    "ClientAttachLoadBalancerTlsCertificateResponseTypeDef",
    {"operations": List[ClientAttachLoadBalancerTlsCertificateResponseoperationsTypeDef]},
    total=False,
)

ClientAttachStaticIpResponseoperationslocationTypeDef = TypedDict(
    "ClientAttachStaticIpResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientAttachStaticIpResponseoperationsTypeDef = TypedDict(
    "ClientAttachStaticIpResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientAttachStaticIpResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientAttachStaticIpResponseTypeDef = TypedDict(
    "ClientAttachStaticIpResponseTypeDef",
    {"operations": List[ClientAttachStaticIpResponseoperationsTypeDef]},
    total=False,
)

ClientCloseInstancePublicPortsPortInfoTypeDef = TypedDict(
    "ClientCloseInstancePublicPortsPortInfoTypeDef",
    {"fromPort": int, "toPort": int, "protocol": Literal["tcp", "all", "udp"]},
    total=False,
)

ClientCloseInstancePublicPortsResponseoperationlocationTypeDef = TypedDict(
    "ClientCloseInstancePublicPortsResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCloseInstancePublicPortsResponseoperationTypeDef = TypedDict(
    "ClientCloseInstancePublicPortsResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCloseInstancePublicPortsResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCloseInstancePublicPortsResponseTypeDef = TypedDict(
    "ClientCloseInstancePublicPortsResponseTypeDef",
    {"operation": ClientCloseInstancePublicPortsResponseoperationTypeDef},
    total=False,
)

ClientCopySnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCopySnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCopySnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCopySnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCopySnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCopySnapshotResponseTypeDef = TypedDict(
    "ClientCopySnapshotResponseTypeDef",
    {"operations": List[ClientCopySnapshotResponseoperationsTypeDef]},
    total=False,
)

_RequiredClientCreateCloudFormationStackInstancesTypeDef = TypedDict(
    "_RequiredClientCreateCloudFormationStackInstancesTypeDef", {"sourceName": str}
)
_OptionalClientCreateCloudFormationStackInstancesTypeDef = TypedDict(
    "_OptionalClientCreateCloudFormationStackInstancesTypeDef",
    {
        "instanceType": str,
        "portInfoSource": Literal["DEFAULT", "INSTANCE", "NONE", "CLOSED"],
        "userData": str,
        "availabilityZone": str,
    },
    total=False,
)


class ClientCreateCloudFormationStackInstancesTypeDef(
    _RequiredClientCreateCloudFormationStackInstancesTypeDef,
    _OptionalClientCreateCloudFormationStackInstancesTypeDef,
):
    pass


ClientCreateCloudFormationStackResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateCloudFormationStackResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateCloudFormationStackResponseoperationsTypeDef = TypedDict(
    "ClientCreateCloudFormationStackResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateCloudFormationStackResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateCloudFormationStackResponseTypeDef = TypedDict(
    "ClientCreateCloudFormationStackResponseTypeDef",
    {"operations": List[ClientCreateCloudFormationStackResponseoperationsTypeDef]},
    total=False,
)

ClientCreateDiskAddOnsautoSnapshotAddOnRequestTypeDef = TypedDict(
    "ClientCreateDiskAddOnsautoSnapshotAddOnRequestTypeDef", {"snapshotTimeOfDay": str}, total=False
)

ClientCreateDiskAddOnsTypeDef = TypedDict(
    "ClientCreateDiskAddOnsTypeDef",
    {
        "addOnType": str,
        "autoSnapshotAddOnRequest": ClientCreateDiskAddOnsautoSnapshotAddOnRequestTypeDef,
    },
    total=False,
)

ClientCreateDiskFromSnapshotAddOnsautoSnapshotAddOnRequestTypeDef = TypedDict(
    "ClientCreateDiskFromSnapshotAddOnsautoSnapshotAddOnRequestTypeDef",
    {"snapshotTimeOfDay": str},
    total=False,
)

ClientCreateDiskFromSnapshotAddOnsTypeDef = TypedDict(
    "ClientCreateDiskFromSnapshotAddOnsTypeDef",
    {
        "addOnType": str,
        "autoSnapshotAddOnRequest": ClientCreateDiskFromSnapshotAddOnsautoSnapshotAddOnRequestTypeDef,
    },
    total=False,
)

ClientCreateDiskFromSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateDiskFromSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateDiskFromSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCreateDiskFromSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateDiskFromSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateDiskFromSnapshotResponseTypeDef = TypedDict(
    "ClientCreateDiskFromSnapshotResponseTypeDef",
    {"operations": List[ClientCreateDiskFromSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientCreateDiskFromSnapshotTagsTypeDef = TypedDict(
    "ClientCreateDiskFromSnapshotTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateDiskResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateDiskResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateDiskResponseoperationsTypeDef = TypedDict(
    "ClientCreateDiskResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateDiskResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateDiskResponseTypeDef = TypedDict(
    "ClientCreateDiskResponseTypeDef",
    {"operations": List[ClientCreateDiskResponseoperationsTypeDef]},
    total=False,
)

ClientCreateDiskSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateDiskSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateDiskSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCreateDiskSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateDiskSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateDiskSnapshotResponseTypeDef = TypedDict(
    "ClientCreateDiskSnapshotResponseTypeDef",
    {"operations": List[ClientCreateDiskSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientCreateDiskSnapshotTagsTypeDef = TypedDict(
    "ClientCreateDiskSnapshotTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateDiskTagsTypeDef = TypedDict(
    "ClientCreateDiskTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateDomainEntryDomainEntryTypeDef = TypedDict(
    "ClientCreateDomainEntryDomainEntryTypeDef",
    {
        "id": str,
        "name": str,
        "target": str,
        "isAlias": bool,
        "type": str,
        "options": Dict[str, str],
    },
    total=False,
)

ClientCreateDomainEntryResponseoperationlocationTypeDef = TypedDict(
    "ClientCreateDomainEntryResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateDomainEntryResponseoperationTypeDef = TypedDict(
    "ClientCreateDomainEntryResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateDomainEntryResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateDomainEntryResponseTypeDef = TypedDict(
    "ClientCreateDomainEntryResponseTypeDef",
    {"operation": ClientCreateDomainEntryResponseoperationTypeDef},
    total=False,
)

ClientCreateDomainResponseoperationlocationTypeDef = TypedDict(
    "ClientCreateDomainResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateDomainResponseoperationTypeDef = TypedDict(
    "ClientCreateDomainResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateDomainResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateDomainResponseTypeDef = TypedDict(
    "ClientCreateDomainResponseTypeDef",
    {"operation": ClientCreateDomainResponseoperationTypeDef},
    total=False,
)

ClientCreateDomainTagsTypeDef = TypedDict(
    "ClientCreateDomainTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateInstanceSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateInstanceSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateInstanceSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCreateInstanceSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateInstanceSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateInstanceSnapshotResponseTypeDef = TypedDict(
    "ClientCreateInstanceSnapshotResponseTypeDef",
    {"operations": List[ClientCreateInstanceSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientCreateInstanceSnapshotTagsTypeDef = TypedDict(
    "ClientCreateInstanceSnapshotTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateInstancesAddOnsautoSnapshotAddOnRequestTypeDef = TypedDict(
    "ClientCreateInstancesAddOnsautoSnapshotAddOnRequestTypeDef",
    {"snapshotTimeOfDay": str},
    total=False,
)

ClientCreateInstancesAddOnsTypeDef = TypedDict(
    "ClientCreateInstancesAddOnsTypeDef",
    {
        "addOnType": str,
        "autoSnapshotAddOnRequest": ClientCreateInstancesAddOnsautoSnapshotAddOnRequestTypeDef,
    },
    total=False,
)

ClientCreateInstancesFromSnapshotAddOnsautoSnapshotAddOnRequestTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotAddOnsautoSnapshotAddOnRequestTypeDef",
    {"snapshotTimeOfDay": str},
    total=False,
)

ClientCreateInstancesFromSnapshotAddOnsTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotAddOnsTypeDef",
    {
        "addOnType": str,
        "autoSnapshotAddOnRequest": ClientCreateInstancesFromSnapshotAddOnsautoSnapshotAddOnRequestTypeDef,
    },
    total=False,
)

ClientCreateInstancesFromSnapshotAttachedDiskMappingTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotAttachedDiskMappingTypeDef",
    {"originalDiskPath": str, "newDiskName": str},
    total=False,
)

ClientCreateInstancesFromSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateInstancesFromSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateInstancesFromSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateInstancesFromSnapshotResponseTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotResponseTypeDef",
    {"operations": List[ClientCreateInstancesFromSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientCreateInstancesFromSnapshotTagsTypeDef = TypedDict(
    "ClientCreateInstancesFromSnapshotTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateInstancesResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateInstancesResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateInstancesResponseoperationsTypeDef = TypedDict(
    "ClientCreateInstancesResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateInstancesResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateInstancesResponseTypeDef = TypedDict(
    "ClientCreateInstancesResponseTypeDef",
    {"operations": List[ClientCreateInstancesResponseoperationsTypeDef]},
    total=False,
)

ClientCreateInstancesTagsTypeDef = TypedDict(
    "ClientCreateInstancesTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateKeyPairResponsekeyPairlocationTypeDef = TypedDict(
    "ClientCreateKeyPairResponsekeyPairlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateKeyPairResponsekeyPairtagsTypeDef = TypedDict(
    "ClientCreateKeyPairResponsekeyPairtagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateKeyPairResponsekeyPairTypeDef = TypedDict(
    "ClientCreateKeyPairResponsekeyPairTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientCreateKeyPairResponsekeyPairlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientCreateKeyPairResponsekeyPairtagsTypeDef],
        "fingerprint": str,
    },
    total=False,
)

ClientCreateKeyPairResponseoperationlocationTypeDef = TypedDict(
    "ClientCreateKeyPairResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateKeyPairResponseoperationTypeDef = TypedDict(
    "ClientCreateKeyPairResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateKeyPairResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateKeyPairResponseTypeDef = TypedDict(
    "ClientCreateKeyPairResponseTypeDef",
    {
        "keyPair": ClientCreateKeyPairResponsekeyPairTypeDef,
        "publicKeyBase64": str,
        "privateKeyBase64": str,
        "operation": ClientCreateKeyPairResponseoperationTypeDef,
    },
    total=False,
)

ClientCreateKeyPairTagsTypeDef = TypedDict(
    "ClientCreateKeyPairTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateLoadBalancerResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateLoadBalancerResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateLoadBalancerResponseoperationsTypeDef = TypedDict(
    "ClientCreateLoadBalancerResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateLoadBalancerResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateLoadBalancerResponseTypeDef = TypedDict(
    "ClientCreateLoadBalancerResponseTypeDef",
    {"operations": List[ClientCreateLoadBalancerResponseoperationsTypeDef]},
    total=False,
)

ClientCreateLoadBalancerTagsTypeDef = TypedDict(
    "ClientCreateLoadBalancerTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateLoadBalancerTlsCertificateResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateLoadBalancerTlsCertificateResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateLoadBalancerTlsCertificateResponseoperationsTypeDef = TypedDict(
    "ClientCreateLoadBalancerTlsCertificateResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateLoadBalancerTlsCertificateResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateLoadBalancerTlsCertificateResponseTypeDef = TypedDict(
    "ClientCreateLoadBalancerTlsCertificateResponseTypeDef",
    {"operations": List[ClientCreateLoadBalancerTlsCertificateResponseoperationsTypeDef]},
    total=False,
)

ClientCreateLoadBalancerTlsCertificateTagsTypeDef = TypedDict(
    "ClientCreateLoadBalancerTlsCertificateTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateRelationalDatabaseFromSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseFromSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateRelationalDatabaseFromSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseFromSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateRelationalDatabaseFromSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateRelationalDatabaseFromSnapshotResponseTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseFromSnapshotResponseTypeDef",
    {"operations": List[ClientCreateRelationalDatabaseFromSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientCreateRelationalDatabaseFromSnapshotTagsTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseFromSnapshotTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateRelationalDatabaseResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateRelationalDatabaseResponseoperationsTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateRelationalDatabaseResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseResponseTypeDef",
    {"operations": List[ClientCreateRelationalDatabaseResponseoperationsTypeDef]},
    total=False,
)

ClientCreateRelationalDatabaseSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientCreateRelationalDatabaseSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientCreateRelationalDatabaseSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientCreateRelationalDatabaseSnapshotResponseTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseSnapshotResponseTypeDef",
    {"operations": List[ClientCreateRelationalDatabaseSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientCreateRelationalDatabaseSnapshotTagsTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseSnapshotTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientCreateRelationalDatabaseTagsTypeDef = TypedDict(
    "ClientCreateRelationalDatabaseTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientDeleteAutoSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteAutoSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteAutoSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientDeleteAutoSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteAutoSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteAutoSnapshotResponseTypeDef = TypedDict(
    "ClientDeleteAutoSnapshotResponseTypeDef",
    {"operations": List[ClientDeleteAutoSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteDiskResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteDiskResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteDiskResponseoperationsTypeDef = TypedDict(
    "ClientDeleteDiskResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteDiskResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteDiskResponseTypeDef = TypedDict(
    "ClientDeleteDiskResponseTypeDef",
    {"operations": List[ClientDeleteDiskResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteDiskSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteDiskSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteDiskSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientDeleteDiskSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteDiskSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteDiskSnapshotResponseTypeDef = TypedDict(
    "ClientDeleteDiskSnapshotResponseTypeDef",
    {"operations": List[ClientDeleteDiskSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteDomainEntryDomainEntryTypeDef = TypedDict(
    "ClientDeleteDomainEntryDomainEntryTypeDef",
    {
        "id": str,
        "name": str,
        "target": str,
        "isAlias": bool,
        "type": str,
        "options": Dict[str, str],
    },
    total=False,
)

ClientDeleteDomainEntryResponseoperationlocationTypeDef = TypedDict(
    "ClientDeleteDomainEntryResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteDomainEntryResponseoperationTypeDef = TypedDict(
    "ClientDeleteDomainEntryResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteDomainEntryResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteDomainEntryResponseTypeDef = TypedDict(
    "ClientDeleteDomainEntryResponseTypeDef",
    {"operation": ClientDeleteDomainEntryResponseoperationTypeDef},
    total=False,
)

ClientDeleteDomainResponseoperationlocationTypeDef = TypedDict(
    "ClientDeleteDomainResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteDomainResponseoperationTypeDef = TypedDict(
    "ClientDeleteDomainResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteDomainResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteDomainResponseTypeDef = TypedDict(
    "ClientDeleteDomainResponseTypeDef",
    {"operation": ClientDeleteDomainResponseoperationTypeDef},
    total=False,
)

ClientDeleteInstanceResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteInstanceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteInstanceResponseoperationsTypeDef = TypedDict(
    "ClientDeleteInstanceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteInstanceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteInstanceResponseTypeDef = TypedDict(
    "ClientDeleteInstanceResponseTypeDef",
    {"operations": List[ClientDeleteInstanceResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteInstanceSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteInstanceSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteInstanceSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientDeleteInstanceSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteInstanceSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteInstanceSnapshotResponseTypeDef = TypedDict(
    "ClientDeleteInstanceSnapshotResponseTypeDef",
    {"operations": List[ClientDeleteInstanceSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteKeyPairResponseoperationlocationTypeDef = TypedDict(
    "ClientDeleteKeyPairResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteKeyPairResponseoperationTypeDef = TypedDict(
    "ClientDeleteKeyPairResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteKeyPairResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteKeyPairResponseTypeDef = TypedDict(
    "ClientDeleteKeyPairResponseTypeDef",
    {"operation": ClientDeleteKeyPairResponseoperationTypeDef},
    total=False,
)

ClientDeleteKnownHostKeysResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteKnownHostKeysResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteKnownHostKeysResponseoperationsTypeDef = TypedDict(
    "ClientDeleteKnownHostKeysResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteKnownHostKeysResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteKnownHostKeysResponseTypeDef = TypedDict(
    "ClientDeleteKnownHostKeysResponseTypeDef",
    {"operations": List[ClientDeleteKnownHostKeysResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteLoadBalancerResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteLoadBalancerResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteLoadBalancerResponseoperationsTypeDef = TypedDict(
    "ClientDeleteLoadBalancerResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteLoadBalancerResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteLoadBalancerResponseTypeDef = TypedDict(
    "ClientDeleteLoadBalancerResponseTypeDef",
    {"operations": List[ClientDeleteLoadBalancerResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteLoadBalancerTlsCertificateResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteLoadBalancerTlsCertificateResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteLoadBalancerTlsCertificateResponseoperationsTypeDef = TypedDict(
    "ClientDeleteLoadBalancerTlsCertificateResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteLoadBalancerTlsCertificateResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteLoadBalancerTlsCertificateResponseTypeDef = TypedDict(
    "ClientDeleteLoadBalancerTlsCertificateResponseTypeDef",
    {"operations": List[ClientDeleteLoadBalancerTlsCertificateResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteRelationalDatabaseResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteRelationalDatabaseResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteRelationalDatabaseResponseoperationsTypeDef = TypedDict(
    "ClientDeleteRelationalDatabaseResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteRelationalDatabaseResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientDeleteRelationalDatabaseResponseTypeDef",
    {"operations": List[ClientDeleteRelationalDatabaseResponseoperationsTypeDef]},
    total=False,
)

ClientDeleteRelationalDatabaseSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientDeleteRelationalDatabaseSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDeleteRelationalDatabaseSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientDeleteRelationalDatabaseSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDeleteRelationalDatabaseSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDeleteRelationalDatabaseSnapshotResponseTypeDef = TypedDict(
    "ClientDeleteRelationalDatabaseSnapshotResponseTypeDef",
    {"operations": List[ClientDeleteRelationalDatabaseSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientDetachDiskResponseoperationslocationTypeDef = TypedDict(
    "ClientDetachDiskResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDetachDiskResponseoperationsTypeDef = TypedDict(
    "ClientDetachDiskResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDetachDiskResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDetachDiskResponseTypeDef = TypedDict(
    "ClientDetachDiskResponseTypeDef",
    {"operations": List[ClientDetachDiskResponseoperationsTypeDef]},
    total=False,
)

ClientDetachInstancesFromLoadBalancerResponseoperationslocationTypeDef = TypedDict(
    "ClientDetachInstancesFromLoadBalancerResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDetachInstancesFromLoadBalancerResponseoperationsTypeDef = TypedDict(
    "ClientDetachInstancesFromLoadBalancerResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDetachInstancesFromLoadBalancerResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDetachInstancesFromLoadBalancerResponseTypeDef = TypedDict(
    "ClientDetachInstancesFromLoadBalancerResponseTypeDef",
    {"operations": List[ClientDetachInstancesFromLoadBalancerResponseoperationsTypeDef]},
    total=False,
)

ClientDetachStaticIpResponseoperationslocationTypeDef = TypedDict(
    "ClientDetachStaticIpResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDetachStaticIpResponseoperationsTypeDef = TypedDict(
    "ClientDetachStaticIpResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDetachStaticIpResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDetachStaticIpResponseTypeDef = TypedDict(
    "ClientDetachStaticIpResponseTypeDef",
    {"operations": List[ClientDetachStaticIpResponseoperationsTypeDef]},
    total=False,
)

ClientDisableAddOnResponseoperationslocationTypeDef = TypedDict(
    "ClientDisableAddOnResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientDisableAddOnResponseoperationsTypeDef = TypedDict(
    "ClientDisableAddOnResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientDisableAddOnResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientDisableAddOnResponseTypeDef = TypedDict(
    "ClientDisableAddOnResponseTypeDef",
    {"operations": List[ClientDisableAddOnResponseoperationsTypeDef]},
    total=False,
)

ClientDownloadDefaultKeyPairResponseTypeDef = TypedDict(
    "ClientDownloadDefaultKeyPairResponseTypeDef",
    {"publicKeyBase64": str, "privateKeyBase64": str},
    total=False,
)

ClientEnableAddOnAddOnRequestautoSnapshotAddOnRequestTypeDef = TypedDict(
    "ClientEnableAddOnAddOnRequestautoSnapshotAddOnRequestTypeDef",
    {"snapshotTimeOfDay": str},
    total=False,
)

_RequiredClientEnableAddOnAddOnRequestTypeDef = TypedDict(
    "_RequiredClientEnableAddOnAddOnRequestTypeDef", {"addOnType": str}
)
_OptionalClientEnableAddOnAddOnRequestTypeDef = TypedDict(
    "_OptionalClientEnableAddOnAddOnRequestTypeDef",
    {"autoSnapshotAddOnRequest": ClientEnableAddOnAddOnRequestautoSnapshotAddOnRequestTypeDef},
    total=False,
)


class ClientEnableAddOnAddOnRequestTypeDef(
    _RequiredClientEnableAddOnAddOnRequestTypeDef, _OptionalClientEnableAddOnAddOnRequestTypeDef
):
    pass


ClientEnableAddOnResponseoperationslocationTypeDef = TypedDict(
    "ClientEnableAddOnResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientEnableAddOnResponseoperationsTypeDef = TypedDict(
    "ClientEnableAddOnResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientEnableAddOnResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientEnableAddOnResponseTypeDef = TypedDict(
    "ClientEnableAddOnResponseTypeDef",
    {"operations": List[ClientEnableAddOnResponseoperationsTypeDef]},
    total=False,
)

ClientExportSnapshotResponseoperationslocationTypeDef = TypedDict(
    "ClientExportSnapshotResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientExportSnapshotResponseoperationsTypeDef = TypedDict(
    "ClientExportSnapshotResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientExportSnapshotResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientExportSnapshotResponseTypeDef = TypedDict(
    "ClientExportSnapshotResponseTypeDef",
    {"operations": List[ClientExportSnapshotResponseoperationsTypeDef]},
    total=False,
)

ClientGetActiveNamesResponseTypeDef = TypedDict(
    "ClientGetActiveNamesResponseTypeDef",
    {"activeNames": List[str], "nextPageToken": str},
    total=False,
)

ClientGetAutoSnapshotsResponseautoSnapshotsfromAttachedDisksTypeDef = TypedDict(
    "ClientGetAutoSnapshotsResponseautoSnapshotsfromAttachedDisksTypeDef",
    {"path": str, "sizeInGb": int},
    total=False,
)

ClientGetAutoSnapshotsResponseautoSnapshotsTypeDef = TypedDict(
    "ClientGetAutoSnapshotsResponseautoSnapshotsTypeDef",
    {
        "date": str,
        "createdAt": datetime,
        "status": Literal["Success", "Failed", "InProgress", "NotFound"],
        "fromAttachedDisks": List[
            ClientGetAutoSnapshotsResponseautoSnapshotsfromAttachedDisksTypeDef
        ],
    },
    total=False,
)

ClientGetAutoSnapshotsResponseTypeDef = TypedDict(
    "ClientGetAutoSnapshotsResponseTypeDef",
    {
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "autoSnapshots": List[ClientGetAutoSnapshotsResponseautoSnapshotsTypeDef],
    },
    total=False,
)

ClientGetBlueprintsResponseblueprintsTypeDef = TypedDict(
    "ClientGetBlueprintsResponseblueprintsTypeDef",
    {
        "blueprintId": str,
        "name": str,
        "group": str,
        "type": Literal["os", "app"],
        "description": str,
        "isActive": bool,
        "minPower": int,
        "version": str,
        "versionCode": str,
        "productUrl": str,
        "licenseUrl": str,
        "platform": Literal["LINUX_UNIX", "WINDOWS"],
    },
    total=False,
)

ClientGetBlueprintsResponseTypeDef = TypedDict(
    "ClientGetBlueprintsResponseTypeDef",
    {"blueprints": List[ClientGetBlueprintsResponseblueprintsTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetBundlesResponsebundlesTypeDef = TypedDict(
    "ClientGetBundlesResponsebundlesTypeDef",
    {
        "price": float,
        "cpuCount": int,
        "diskSizeInGb": int,
        "bundleId": str,
        "instanceType": str,
        "isActive": bool,
        "name": str,
        "power": int,
        "ramSizeInGb": Any,
        "transferPerMonthInGb": int,
        "supportedPlatforms": List[Literal["LINUX_UNIX", "WINDOWS"]],
    },
    total=False,
)

ClientGetBundlesResponseTypeDef = TypedDict(
    "ClientGetBundlesResponseTypeDef",
    {"bundles": List[ClientGetBundlesResponsebundlesTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordsdestinationInfoTypeDef = TypedDict(
    "ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordsdestinationInfoTypeDef",
    {"id": str, "service": str},
    total=False,
)

ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordslocationTypeDef = TypedDict(
    "ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordssourceInfoTypeDef = TypedDict(
    "ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordssourceInfoTypeDef",
    {"resourceType": str, "name": str, "arn": str},
    total=False,
)

ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordsTypeDef = TypedDict(
    "ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordsTypeDef",
    {
        "name": str,
        "arn": str,
        "createdAt": datetime,
        "location": ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "state": Literal["Started", "Succeeded", "Failed"],
        "sourceInfo": List[
            ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordssourceInfoTypeDef
        ],
        "destinationInfo": ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordsdestinationInfoTypeDef,
    },
    total=False,
)

ClientGetCloudFormationStackRecordsResponseTypeDef = TypedDict(
    "ClientGetCloudFormationStackRecordsResponseTypeDef",
    {
        "cloudFormationStackRecords": List[
            ClientGetCloudFormationStackRecordsResponsecloudFormationStackRecordsTypeDef
        ],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetDiskResponsediskaddOnsTypeDef = TypedDict(
    "ClientGetDiskResponsediskaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetDiskResponsedisklocationTypeDef = TypedDict(
    "ClientGetDiskResponsedisklocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetDiskResponsedisktagsTypeDef = TypedDict(
    "ClientGetDiskResponsedisktagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetDiskResponsediskTypeDef = TypedDict(
    "ClientGetDiskResponsediskTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetDiskResponsedisklocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetDiskResponsedisktagsTypeDef],
        "addOns": List[ClientGetDiskResponsediskaddOnsTypeDef],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

ClientGetDiskResponseTypeDef = TypedDict(
    "ClientGetDiskResponseTypeDef", {"disk": ClientGetDiskResponsediskTypeDef}, total=False
)

ClientGetDiskSnapshotResponsediskSnapshotlocationTypeDef = TypedDict(
    "ClientGetDiskSnapshotResponsediskSnapshotlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetDiskSnapshotResponsediskSnapshottagsTypeDef = TypedDict(
    "ClientGetDiskSnapshotResponsediskSnapshottagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetDiskSnapshotResponsediskSnapshotTypeDef = TypedDict(
    "ClientGetDiskSnapshotResponsediskSnapshotTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetDiskSnapshotResponsediskSnapshotlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetDiskSnapshotResponsediskSnapshottagsTypeDef],
        "sizeInGb": int,
        "state": Literal["pending", "completed", "error", "unknown"],
        "progress": str,
        "fromDiskName": str,
        "fromDiskArn": str,
        "fromInstanceName": str,
        "fromInstanceArn": str,
        "isFromAutoSnapshot": bool,
    },
    total=False,
)

ClientGetDiskSnapshotResponseTypeDef = TypedDict(
    "ClientGetDiskSnapshotResponseTypeDef",
    {"diskSnapshot": ClientGetDiskSnapshotResponsediskSnapshotTypeDef},
    total=False,
)

ClientGetDiskSnapshotsResponsediskSnapshotslocationTypeDef = TypedDict(
    "ClientGetDiskSnapshotsResponsediskSnapshotslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetDiskSnapshotsResponsediskSnapshotstagsTypeDef = TypedDict(
    "ClientGetDiskSnapshotsResponsediskSnapshotstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetDiskSnapshotsResponsediskSnapshotsTypeDef = TypedDict(
    "ClientGetDiskSnapshotsResponsediskSnapshotsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetDiskSnapshotsResponsediskSnapshotslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetDiskSnapshotsResponsediskSnapshotstagsTypeDef],
        "sizeInGb": int,
        "state": Literal["pending", "completed", "error", "unknown"],
        "progress": str,
        "fromDiskName": str,
        "fromDiskArn": str,
        "fromInstanceName": str,
        "fromInstanceArn": str,
        "isFromAutoSnapshot": bool,
    },
    total=False,
)

ClientGetDiskSnapshotsResponseTypeDef = TypedDict(
    "ClientGetDiskSnapshotsResponseTypeDef",
    {
        "diskSnapshots": List[ClientGetDiskSnapshotsResponsediskSnapshotsTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetDisksResponsedisksaddOnsTypeDef = TypedDict(
    "ClientGetDisksResponsedisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetDisksResponsediskslocationTypeDef = TypedDict(
    "ClientGetDisksResponsediskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetDisksResponsediskstagsTypeDef = TypedDict(
    "ClientGetDisksResponsediskstagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetDisksResponsedisksTypeDef = TypedDict(
    "ClientGetDisksResponsedisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetDisksResponsediskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetDisksResponsediskstagsTypeDef],
        "addOns": List[ClientGetDisksResponsedisksaddOnsTypeDef],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

ClientGetDisksResponseTypeDef = TypedDict(
    "ClientGetDisksResponseTypeDef",
    {"disks": List[ClientGetDisksResponsedisksTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetDomainResponsedomaindomainEntriesTypeDef = TypedDict(
    "ClientGetDomainResponsedomaindomainEntriesTypeDef",
    {
        "id": str,
        "name": str,
        "target": str,
        "isAlias": bool,
        "type": str,
        "options": Dict[str, str],
    },
    total=False,
)

ClientGetDomainResponsedomainlocationTypeDef = TypedDict(
    "ClientGetDomainResponsedomainlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetDomainResponsedomaintagsTypeDef = TypedDict(
    "ClientGetDomainResponsedomaintagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetDomainResponsedomainTypeDef = TypedDict(
    "ClientGetDomainResponsedomainTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetDomainResponsedomainlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetDomainResponsedomaintagsTypeDef],
        "domainEntries": List[ClientGetDomainResponsedomaindomainEntriesTypeDef],
    },
    total=False,
)

ClientGetDomainResponseTypeDef = TypedDict(
    "ClientGetDomainResponseTypeDef", {"domain": ClientGetDomainResponsedomainTypeDef}, total=False
)

ClientGetDomainsResponsedomainsdomainEntriesTypeDef = TypedDict(
    "ClientGetDomainsResponsedomainsdomainEntriesTypeDef",
    {
        "id": str,
        "name": str,
        "target": str,
        "isAlias": bool,
        "type": str,
        "options": Dict[str, str],
    },
    total=False,
)

ClientGetDomainsResponsedomainslocationTypeDef = TypedDict(
    "ClientGetDomainsResponsedomainslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetDomainsResponsedomainstagsTypeDef = TypedDict(
    "ClientGetDomainsResponsedomainstagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetDomainsResponsedomainsTypeDef = TypedDict(
    "ClientGetDomainsResponsedomainsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetDomainsResponsedomainslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetDomainsResponsedomainstagsTypeDef],
        "domainEntries": List[ClientGetDomainsResponsedomainsdomainEntriesTypeDef],
    },
    total=False,
)

ClientGetDomainsResponseTypeDef = TypedDict(
    "ClientGetDomainsResponseTypeDef",
    {"domains": List[ClientGetDomainsResponsedomainsTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordsdestinationInfoTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordsdestinationInfoTypeDef",
    {"id": str, "service": str},
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordslocationTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfodiskSnapshotInfoTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfodiskSnapshotInfoTypeDef",
    {"sizeInGb": int},
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfofromDiskInfoTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfofromDiskInfoTypeDef",
    {"name": str, "path": str, "sizeInGb": int, "isSystemDisk": bool},
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfoTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfoTypeDef",
    {
        "fromBundleId": str,
        "fromBlueprintId": str,
        "fromDiskInfo": List[
            ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfofromDiskInfoTypeDef
        ],
    },
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoTypeDef",
    {
        "resourceType": Literal["InstanceSnapshot", "DiskSnapshot"],
        "createdAt": datetime,
        "name": str,
        "arn": str,
        "fromResourceName": str,
        "fromResourceArn": str,
        "instanceSnapshotInfo": ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfoTypeDef,
        "diskSnapshotInfo": ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfodiskSnapshotInfoTypeDef,
    },
    total=False,
)

ClientGetExportSnapshotRecordsResponseexportSnapshotRecordsTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseexportSnapshotRecordsTypeDef",
    {
        "name": str,
        "arn": str,
        "createdAt": datetime,
        "location": ClientGetExportSnapshotRecordsResponseexportSnapshotRecordslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "state": Literal["Started", "Succeeded", "Failed"],
        "sourceInfo": ClientGetExportSnapshotRecordsResponseexportSnapshotRecordssourceInfoTypeDef,
        "destinationInfo": ClientGetExportSnapshotRecordsResponseexportSnapshotRecordsdestinationInfoTypeDef,
    },
    total=False,
)

ClientGetExportSnapshotRecordsResponseTypeDef = TypedDict(
    "ClientGetExportSnapshotRecordsResponseTypeDef",
    {
        "exportSnapshotRecords": List[
            ClientGetExportSnapshotRecordsResponseexportSnapshotRecordsTypeDef
        ],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetInstanceAccessDetailsResponseaccessDetailshostKeysTypeDef = TypedDict(
    "ClientGetInstanceAccessDetailsResponseaccessDetailshostKeysTypeDef",
    {
        "algorithm": str,
        "publicKey": str,
        "witnessedAt": datetime,
        "fingerprintSHA1": str,
        "fingerprintSHA256": str,
        "notValidBefore": datetime,
        "notValidAfter": datetime,
    },
    total=False,
)

ClientGetInstanceAccessDetailsResponseaccessDetailspasswordDataTypeDef = TypedDict(
    "ClientGetInstanceAccessDetailsResponseaccessDetailspasswordDataTypeDef",
    {"ciphertext": str, "keyPairName": str},
    total=False,
)

ClientGetInstanceAccessDetailsResponseaccessDetailsTypeDef = TypedDict(
    "ClientGetInstanceAccessDetailsResponseaccessDetailsTypeDef",
    {
        "certKey": str,
        "expiresAt": datetime,
        "ipAddress": str,
        "password": str,
        "passwordData": ClientGetInstanceAccessDetailsResponseaccessDetailspasswordDataTypeDef,
        "privateKey": str,
        "protocol": Literal["ssh", "rdp"],
        "instanceName": str,
        "username": str,
        "hostKeys": List[ClientGetInstanceAccessDetailsResponseaccessDetailshostKeysTypeDef],
    },
    total=False,
)

ClientGetInstanceAccessDetailsResponseTypeDef = TypedDict(
    "ClientGetInstanceAccessDetailsResponseTypeDef",
    {"accessDetails": ClientGetInstanceAccessDetailsResponseaccessDetailsTypeDef},
    total=False,
)

ClientGetInstanceMetricDataResponsemetricDataTypeDef = TypedDict(
    "ClientGetInstanceMetricDataResponsemetricDataTypeDef",
    {
        "average": float,
        "maximum": float,
        "minimum": float,
        "sampleCount": float,
        "sum": float,
        "timestamp": datetime,
        "unit": Literal[
            "Seconds",
            "Microseconds",
            "Milliseconds",
            "Bytes",
            "Kilobytes",
            "Megabytes",
            "Gigabytes",
            "Terabytes",
            "Bits",
            "Kilobits",
            "Megabits",
            "Gigabits",
            "Terabits",
            "Percent",
            "Count",
            "Bytes/Second",
            "Kilobytes/Second",
            "Megabytes/Second",
            "Gigabytes/Second",
            "Terabytes/Second",
            "Bits/Second",
            "Kilobits/Second",
            "Megabits/Second",
            "Gigabits/Second",
            "Terabits/Second",
            "Count/Second",
            "None",
        ],
    },
    total=False,
)

ClientGetInstanceMetricDataResponseTypeDef = TypedDict(
    "ClientGetInstanceMetricDataResponseTypeDef",
    {
        "metricName": Literal[
            "CPUUtilization",
            "NetworkIn",
            "NetworkOut",
            "StatusCheckFailed",
            "StatusCheckFailed_Instance",
            "StatusCheckFailed_System",
        ],
        "metricData": List[ClientGetInstanceMetricDataResponsemetricDataTypeDef],
    },
    total=False,
)

ClientGetInstancePortStatesResponseportStatesTypeDef = TypedDict(
    "ClientGetInstancePortStatesResponseportStatesTypeDef",
    {
        "fromPort": int,
        "toPort": int,
        "protocol": Literal["tcp", "all", "udp"],
        "state": Literal["open", "closed"],
    },
    total=False,
)

ClientGetInstancePortStatesResponseTypeDef = TypedDict(
    "ClientGetInstancePortStatesResponseTypeDef",
    {"portStates": List[ClientGetInstancePortStatesResponseportStatesTypeDef]},
    total=False,
)

ClientGetInstanceResponseinstanceaddOnsTypeDef = TypedDict(
    "ClientGetInstanceResponseinstanceaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetInstanceResponseinstancehardwaredisksaddOnsTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancehardwaredisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetInstanceResponseinstancehardwarediskslocationTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancehardwarediskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstanceResponseinstancehardwarediskstagsTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancehardwarediskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetInstanceResponseinstancehardwaredisksTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancehardwaredisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstanceResponseinstancehardwarediskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstanceResponseinstancehardwarediskstagsTypeDef],
        "addOns": List[ClientGetInstanceResponseinstancehardwaredisksaddOnsTypeDef],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

ClientGetInstanceResponseinstancehardwareTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancehardwareTypeDef",
    {
        "cpuCount": int,
        "disks": List[ClientGetInstanceResponseinstancehardwaredisksTypeDef],
        "ramSizeInGb": Any,
    },
    total=False,
)

ClientGetInstanceResponseinstancelocationTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancelocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstanceResponseinstancenetworkingmonthlyTransferTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancenetworkingmonthlyTransferTypeDef",
    {"gbPerMonthAllocated": int},
    total=False,
)

ClientGetInstanceResponseinstancenetworkingportsTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancenetworkingportsTypeDef",
    {
        "fromPort": int,
        "toPort": int,
        "protocol": Literal["tcp", "all", "udp"],
        "accessFrom": str,
        "accessType": Literal["Public", "Private"],
        "commonName": str,
        "accessDirection": Literal["inbound", "outbound"],
    },
    total=False,
)

ClientGetInstanceResponseinstancenetworkingTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancenetworkingTypeDef",
    {
        "monthlyTransfer": ClientGetInstanceResponseinstancenetworkingmonthlyTransferTypeDef,
        "ports": List[ClientGetInstanceResponseinstancenetworkingportsTypeDef],
    },
    total=False,
)

ClientGetInstanceResponseinstancestateTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancestateTypeDef", {"code": int, "name": str}, total=False
)

ClientGetInstanceResponseinstancetagsTypeDef = TypedDict(
    "ClientGetInstanceResponseinstancetagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetInstanceResponseinstanceTypeDef = TypedDict(
    "ClientGetInstanceResponseinstanceTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstanceResponseinstancelocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstanceResponseinstancetagsTypeDef],
        "blueprintId": str,
        "blueprintName": str,
        "bundleId": str,
        "addOns": List[ClientGetInstanceResponseinstanceaddOnsTypeDef],
        "isStaticIp": bool,
        "privateIpAddress": str,
        "publicIpAddress": str,
        "ipv6Address": str,
        "hardware": ClientGetInstanceResponseinstancehardwareTypeDef,
        "networking": ClientGetInstanceResponseinstancenetworkingTypeDef,
        "state": ClientGetInstanceResponseinstancestateTypeDef,
        "username": str,
        "sshKeyName": str,
    },
    total=False,
)

ClientGetInstanceResponseTypeDef = TypedDict(
    "ClientGetInstanceResponseTypeDef",
    {"instance": ClientGetInstanceResponseinstanceTypeDef},
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDisksaddOnsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDiskslocationTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDiskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDiskstagsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDiskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDisksTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDiskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDiskstagsTypeDef],
        "addOns": List[
            ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDisksaddOnsTypeDef
        ],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshotlocationTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshotlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshottagsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshottagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetInstanceSnapshotResponseinstanceSnapshotTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseinstanceSnapshotTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstanceSnapshotResponseinstanceSnapshotlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstanceSnapshotResponseinstanceSnapshottagsTypeDef],
        "state": Literal["pending", "error", "available"],
        "progress": str,
        "fromAttachedDisks": List[
            ClientGetInstanceSnapshotResponseinstanceSnapshotfromAttachedDisksTypeDef
        ],
        "fromInstanceName": str,
        "fromInstanceArn": str,
        "fromBlueprintId": str,
        "fromBundleId": str,
        "isFromAutoSnapshot": bool,
        "sizeInGb": int,
    },
    total=False,
)

ClientGetInstanceSnapshotResponseTypeDef = TypedDict(
    "ClientGetInstanceSnapshotResponseTypeDef",
    {"instanceSnapshot": ClientGetInstanceSnapshotResponseinstanceSnapshotTypeDef},
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDisksaddOnsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDiskslocationTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDiskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDiskstagsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDiskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDisksTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDiskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[
            ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDiskstagsTypeDef
        ],
        "addOns": List[
            ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDisksaddOnsTypeDef
        ],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotslocationTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotstagsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetInstanceSnapshotsResponseinstanceSnapshotsTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseinstanceSnapshotsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstanceSnapshotsResponseinstanceSnapshotslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstanceSnapshotsResponseinstanceSnapshotstagsTypeDef],
        "state": Literal["pending", "error", "available"],
        "progress": str,
        "fromAttachedDisks": List[
            ClientGetInstanceSnapshotsResponseinstanceSnapshotsfromAttachedDisksTypeDef
        ],
        "fromInstanceName": str,
        "fromInstanceArn": str,
        "fromBlueprintId": str,
        "fromBundleId": str,
        "isFromAutoSnapshot": bool,
        "sizeInGb": int,
    },
    total=False,
)

ClientGetInstanceSnapshotsResponseTypeDef = TypedDict(
    "ClientGetInstanceSnapshotsResponseTypeDef",
    {
        "instanceSnapshots": List[ClientGetInstanceSnapshotsResponseinstanceSnapshotsTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetInstanceStateResponsestateTypeDef = TypedDict(
    "ClientGetInstanceStateResponsestateTypeDef", {"code": int, "name": str}, total=False
)

ClientGetInstanceStateResponseTypeDef = TypedDict(
    "ClientGetInstanceStateResponseTypeDef",
    {"state": ClientGetInstanceStateResponsestateTypeDef},
    total=False,
)

ClientGetInstancesResponseinstancesaddOnsTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancesaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetInstancesResponseinstanceshardwaredisksaddOnsTypeDef = TypedDict(
    "ClientGetInstancesResponseinstanceshardwaredisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

ClientGetInstancesResponseinstanceshardwarediskslocationTypeDef = TypedDict(
    "ClientGetInstancesResponseinstanceshardwarediskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstancesResponseinstanceshardwarediskstagsTypeDef = TypedDict(
    "ClientGetInstancesResponseinstanceshardwarediskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetInstancesResponseinstanceshardwaredisksTypeDef = TypedDict(
    "ClientGetInstancesResponseinstanceshardwaredisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstancesResponseinstanceshardwarediskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstancesResponseinstanceshardwarediskstagsTypeDef],
        "addOns": List[ClientGetInstancesResponseinstanceshardwaredisksaddOnsTypeDef],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

ClientGetInstancesResponseinstanceshardwareTypeDef = TypedDict(
    "ClientGetInstancesResponseinstanceshardwareTypeDef",
    {
        "cpuCount": int,
        "disks": List[ClientGetInstancesResponseinstanceshardwaredisksTypeDef],
        "ramSizeInGb": Any,
    },
    total=False,
)

ClientGetInstancesResponseinstanceslocationTypeDef = TypedDict(
    "ClientGetInstancesResponseinstanceslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetInstancesResponseinstancesnetworkingmonthlyTransferTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancesnetworkingmonthlyTransferTypeDef",
    {"gbPerMonthAllocated": int},
    total=False,
)

ClientGetInstancesResponseinstancesnetworkingportsTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancesnetworkingportsTypeDef",
    {
        "fromPort": int,
        "toPort": int,
        "protocol": Literal["tcp", "all", "udp"],
        "accessFrom": str,
        "accessType": Literal["Public", "Private"],
        "commonName": str,
        "accessDirection": Literal["inbound", "outbound"],
    },
    total=False,
)

ClientGetInstancesResponseinstancesnetworkingTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancesnetworkingTypeDef",
    {
        "monthlyTransfer": ClientGetInstancesResponseinstancesnetworkingmonthlyTransferTypeDef,
        "ports": List[ClientGetInstancesResponseinstancesnetworkingportsTypeDef],
    },
    total=False,
)

ClientGetInstancesResponseinstancesstateTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancesstateTypeDef", {"code": int, "name": str}, total=False
)

ClientGetInstancesResponseinstancestagsTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancestagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetInstancesResponseinstancesTypeDef = TypedDict(
    "ClientGetInstancesResponseinstancesTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetInstancesResponseinstanceslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetInstancesResponseinstancestagsTypeDef],
        "blueprintId": str,
        "blueprintName": str,
        "bundleId": str,
        "addOns": List[ClientGetInstancesResponseinstancesaddOnsTypeDef],
        "isStaticIp": bool,
        "privateIpAddress": str,
        "publicIpAddress": str,
        "ipv6Address": str,
        "hardware": ClientGetInstancesResponseinstanceshardwareTypeDef,
        "networking": ClientGetInstancesResponseinstancesnetworkingTypeDef,
        "state": ClientGetInstancesResponseinstancesstateTypeDef,
        "username": str,
        "sshKeyName": str,
    },
    total=False,
)

ClientGetInstancesResponseTypeDef = TypedDict(
    "ClientGetInstancesResponseTypeDef",
    {"instances": List[ClientGetInstancesResponseinstancesTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetKeyPairResponsekeyPairlocationTypeDef = TypedDict(
    "ClientGetKeyPairResponsekeyPairlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetKeyPairResponsekeyPairtagsTypeDef = TypedDict(
    "ClientGetKeyPairResponsekeyPairtagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetKeyPairResponsekeyPairTypeDef = TypedDict(
    "ClientGetKeyPairResponsekeyPairTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetKeyPairResponsekeyPairlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetKeyPairResponsekeyPairtagsTypeDef],
        "fingerprint": str,
    },
    total=False,
)

ClientGetKeyPairResponseTypeDef = TypedDict(
    "ClientGetKeyPairResponseTypeDef",
    {"keyPair": ClientGetKeyPairResponsekeyPairTypeDef},
    total=False,
)

ClientGetKeyPairsResponsekeyPairslocationTypeDef = TypedDict(
    "ClientGetKeyPairsResponsekeyPairslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetKeyPairsResponsekeyPairstagsTypeDef = TypedDict(
    "ClientGetKeyPairsResponsekeyPairstagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetKeyPairsResponsekeyPairsTypeDef = TypedDict(
    "ClientGetKeyPairsResponsekeyPairsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetKeyPairsResponsekeyPairslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetKeyPairsResponsekeyPairstagsTypeDef],
        "fingerprint": str,
    },
    total=False,
)

ClientGetKeyPairsResponseTypeDef = TypedDict(
    "ClientGetKeyPairsResponseTypeDef",
    {"keyPairs": List[ClientGetKeyPairsResponsekeyPairsTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetLoadBalancerMetricDataResponsemetricDataTypeDef = TypedDict(
    "ClientGetLoadBalancerMetricDataResponsemetricDataTypeDef",
    {
        "average": float,
        "maximum": float,
        "minimum": float,
        "sampleCount": float,
        "sum": float,
        "timestamp": datetime,
        "unit": Literal[
            "Seconds",
            "Microseconds",
            "Milliseconds",
            "Bytes",
            "Kilobytes",
            "Megabytes",
            "Gigabytes",
            "Terabytes",
            "Bits",
            "Kilobits",
            "Megabits",
            "Gigabits",
            "Terabits",
            "Percent",
            "Count",
            "Bytes/Second",
            "Kilobytes/Second",
            "Megabytes/Second",
            "Gigabytes/Second",
            "Terabytes/Second",
            "Bits/Second",
            "Kilobits/Second",
            "Megabits/Second",
            "Gigabits/Second",
            "Terabits/Second",
            "Count/Second",
            "None",
        ],
    },
    total=False,
)

ClientGetLoadBalancerMetricDataResponseTypeDef = TypedDict(
    "ClientGetLoadBalancerMetricDataResponseTypeDef",
    {
        "metricName": Literal[
            "ClientTLSNegotiationErrorCount",
            "HealthyHostCount",
            "UnhealthyHostCount",
            "HTTPCode_LB_4XX_Count",
            "HTTPCode_LB_5XX_Count",
            "HTTPCode_Instance_2XX_Count",
            "HTTPCode_Instance_3XX_Count",
            "HTTPCode_Instance_4XX_Count",
            "HTTPCode_Instance_5XX_Count",
            "InstanceResponseTime",
            "RejectedConnectionCount",
            "RequestCount",
        ],
        "metricData": List[ClientGetLoadBalancerMetricDataResponsemetricDataTypeDef],
    },
    total=False,
)

ClientGetLoadBalancerResponseloadBalancerinstanceHealthSummaryTypeDef = TypedDict(
    "ClientGetLoadBalancerResponseloadBalancerinstanceHealthSummaryTypeDef",
    {
        "instanceName": str,
        "instanceHealth": Literal[
            "initial", "healthy", "unhealthy", "unused", "draining", "unavailable"
        ],
        "instanceHealthReason": Literal[
            "Lb.RegistrationInProgress",
            "Lb.InitialHealthChecking",
            "Lb.InternalError",
            "Instance.ResponseCodeMismatch",
            "Instance.Timeout",
            "Instance.FailedHealthChecks",
            "Instance.NotRegistered",
            "Instance.NotInUse",
            "Instance.DeregistrationInProgress",
            "Instance.InvalidState",
            "Instance.IpUnusable",
        ],
    },
    total=False,
)

ClientGetLoadBalancerResponseloadBalancerlocationTypeDef = TypedDict(
    "ClientGetLoadBalancerResponseloadBalancerlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetLoadBalancerResponseloadBalancertagsTypeDef = TypedDict(
    "ClientGetLoadBalancerResponseloadBalancertagsTypeDef", {"key": str, "value": str}, total=False
)

ClientGetLoadBalancerResponseloadBalancertlsCertificateSummariesTypeDef = TypedDict(
    "ClientGetLoadBalancerResponseloadBalancertlsCertificateSummariesTypeDef",
    {"name": str, "isAttached": bool},
    total=False,
)

ClientGetLoadBalancerResponseloadBalancerTypeDef = TypedDict(
    "ClientGetLoadBalancerResponseloadBalancerTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetLoadBalancerResponseloadBalancerlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetLoadBalancerResponseloadBalancertagsTypeDef],
        "dnsName": str,
        "state": Literal["active", "provisioning", "active_impaired", "failed", "unknown"],
        "protocol": Literal["HTTP_HTTPS", "HTTP"],
        "publicPorts": List[int],
        "healthCheckPath": str,
        "instancePort": int,
        "instanceHealthSummary": List[
            ClientGetLoadBalancerResponseloadBalancerinstanceHealthSummaryTypeDef
        ],
        "tlsCertificateSummaries": List[
            ClientGetLoadBalancerResponseloadBalancertlsCertificateSummariesTypeDef
        ],
        "configurationOptions": Dict[str, str],
    },
    total=False,
)

ClientGetLoadBalancerResponseTypeDef = TypedDict(
    "ClientGetLoadBalancerResponseTypeDef",
    {"loadBalancer": ClientGetLoadBalancerResponseloadBalancerTypeDef},
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesdomainValidationRecordsTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesdomainValidationRecordsTypeDef",
    {
        "name": str,
        "type": str,
        "value": str,
        "validationStatus": Literal["PENDING_VALIDATION", "FAILED", "SUCCESS"],
        "domainName": str,
    },
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponsetlsCertificateslocationTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponsetlsCertificateslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesrenewalSummarydomainValidationOptionsTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesrenewalSummarydomainValidationOptionsTypeDef",
    {"domainName": str, "validationStatus": Literal["PENDING_VALIDATION", "FAILED", "SUCCESS"]},
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesrenewalSummaryTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesrenewalSummaryTypeDef",
    {
        "renewalStatus": Literal["PENDING_AUTO_RENEWAL", "PENDING_VALIDATION", "SUCCESS", "FAILED"],
        "domainValidationOptions": List[
            ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesrenewalSummarydomainValidationOptionsTypeDef
        ],
    },
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatestagsTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatestagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetLoadBalancerTlsCertificatesResponsetlsCertificateslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatestagsTypeDef],
        "loadBalancerName": str,
        "isAttached": bool,
        "status": Literal[
            "PENDING_VALIDATION",
            "ISSUED",
            "INACTIVE",
            "EXPIRED",
            "VALIDATION_TIMED_OUT",
            "REVOKED",
            "FAILED",
            "UNKNOWN",
        ],
        "domainName": str,
        "domainValidationRecords": List[
            ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesdomainValidationRecordsTypeDef
        ],
        "failureReason": Literal[
            "NO_AVAILABLE_CONTACTS",
            "ADDITIONAL_VERIFICATION_REQUIRED",
            "DOMAIN_NOT_ALLOWED",
            "INVALID_PUBLIC_DOMAIN",
            "OTHER",
        ],
        "issuedAt": datetime,
        "issuer": str,
        "keyAlgorithm": str,
        "notAfter": datetime,
        "notBefore": datetime,
        "renewalSummary": ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesrenewalSummaryTypeDef,
        "revocationReason": Literal[
            "UNSPECIFIED",
            "KEY_COMPROMISE",
            "CA_COMPROMISE",
            "AFFILIATION_CHANGED",
            "SUPERCEDED",
            "CESSATION_OF_OPERATION",
            "CERTIFICATE_HOLD",
            "REMOVE_FROM_CRL",
            "PRIVILEGE_WITHDRAWN",
            "A_A_COMPROMISE",
        ],
        "revokedAt": datetime,
        "serial": str,
        "signatureAlgorithm": str,
        "subject": str,
        "subjectAlternativeNames": List[str],
    },
    total=False,
)

ClientGetLoadBalancerTlsCertificatesResponseTypeDef = TypedDict(
    "ClientGetLoadBalancerTlsCertificatesResponseTypeDef",
    {"tlsCertificates": List[ClientGetLoadBalancerTlsCertificatesResponsetlsCertificatesTypeDef]},
    total=False,
)

ClientGetLoadBalancersResponseloadBalancersinstanceHealthSummaryTypeDef = TypedDict(
    "ClientGetLoadBalancersResponseloadBalancersinstanceHealthSummaryTypeDef",
    {
        "instanceName": str,
        "instanceHealth": Literal[
            "initial", "healthy", "unhealthy", "unused", "draining", "unavailable"
        ],
        "instanceHealthReason": Literal[
            "Lb.RegistrationInProgress",
            "Lb.InitialHealthChecking",
            "Lb.InternalError",
            "Instance.ResponseCodeMismatch",
            "Instance.Timeout",
            "Instance.FailedHealthChecks",
            "Instance.NotRegistered",
            "Instance.NotInUse",
            "Instance.DeregistrationInProgress",
            "Instance.InvalidState",
            "Instance.IpUnusable",
        ],
    },
    total=False,
)

ClientGetLoadBalancersResponseloadBalancerslocationTypeDef = TypedDict(
    "ClientGetLoadBalancersResponseloadBalancerslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetLoadBalancersResponseloadBalancerstagsTypeDef = TypedDict(
    "ClientGetLoadBalancersResponseloadBalancerstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetLoadBalancersResponseloadBalancerstlsCertificateSummariesTypeDef = TypedDict(
    "ClientGetLoadBalancersResponseloadBalancerstlsCertificateSummariesTypeDef",
    {"name": str, "isAttached": bool},
    total=False,
)

ClientGetLoadBalancersResponseloadBalancersTypeDef = TypedDict(
    "ClientGetLoadBalancersResponseloadBalancersTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetLoadBalancersResponseloadBalancerslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetLoadBalancersResponseloadBalancerstagsTypeDef],
        "dnsName": str,
        "state": Literal["active", "provisioning", "active_impaired", "failed", "unknown"],
        "protocol": Literal["HTTP_HTTPS", "HTTP"],
        "publicPorts": List[int],
        "healthCheckPath": str,
        "instancePort": int,
        "instanceHealthSummary": List[
            ClientGetLoadBalancersResponseloadBalancersinstanceHealthSummaryTypeDef
        ],
        "tlsCertificateSummaries": List[
            ClientGetLoadBalancersResponseloadBalancerstlsCertificateSummariesTypeDef
        ],
        "configurationOptions": Dict[str, str],
    },
    total=False,
)

ClientGetLoadBalancersResponseTypeDef = TypedDict(
    "ClientGetLoadBalancersResponseTypeDef",
    {
        "loadBalancers": List[ClientGetLoadBalancersResponseloadBalancersTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetOperationResponseoperationlocationTypeDef = TypedDict(
    "ClientGetOperationResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetOperationResponseoperationTypeDef = TypedDict(
    "ClientGetOperationResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientGetOperationResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientGetOperationResponseTypeDef = TypedDict(
    "ClientGetOperationResponseTypeDef",
    {"operation": ClientGetOperationResponseoperationTypeDef},
    total=False,
)

ClientGetOperationsForResourceResponseoperationslocationTypeDef = TypedDict(
    "ClientGetOperationsForResourceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetOperationsForResourceResponseoperationsTypeDef = TypedDict(
    "ClientGetOperationsForResourceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientGetOperationsForResourceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientGetOperationsForResourceResponseTypeDef = TypedDict(
    "ClientGetOperationsForResourceResponseTypeDef",
    {
        "operations": List[ClientGetOperationsForResourceResponseoperationsTypeDef],
        "nextPageCount": str,
        "nextPageToken": str,
    },
    total=False,
)

ClientGetOperationsResponseoperationslocationTypeDef = TypedDict(
    "ClientGetOperationsResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetOperationsResponseoperationsTypeDef = TypedDict(
    "ClientGetOperationsResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientGetOperationsResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientGetOperationsResponseTypeDef = TypedDict(
    "ClientGetOperationsResponseTypeDef",
    {"operations": List[ClientGetOperationsResponseoperationsTypeDef], "nextPageToken": str},
    total=False,
)

ClientGetRegionsResponseregionsavailabilityZonesTypeDef = TypedDict(
    "ClientGetRegionsResponseregionsavailabilityZonesTypeDef",
    {"zoneName": str, "state": str},
    total=False,
)

ClientGetRegionsResponseregionsrelationalDatabaseAvailabilityZonesTypeDef = TypedDict(
    "ClientGetRegionsResponseregionsrelationalDatabaseAvailabilityZonesTypeDef",
    {"zoneName": str, "state": str},
    total=False,
)

ClientGetRegionsResponseregionsTypeDef = TypedDict(
    "ClientGetRegionsResponseregionsTypeDef",
    {
        "continentCode": str,
        "description": str,
        "displayName": str,
        "name": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
        "availabilityZones": List[ClientGetRegionsResponseregionsavailabilityZonesTypeDef],
        "relationalDatabaseAvailabilityZones": List[
            ClientGetRegionsResponseregionsrelationalDatabaseAvailabilityZonesTypeDef
        ],
    },
    total=False,
)

ClientGetRegionsResponseTypeDef = TypedDict(
    "ClientGetRegionsResponseTypeDef",
    {"regions": List[ClientGetRegionsResponseregionsTypeDef]},
    total=False,
)

ClientGetRelationalDatabaseBlueprintsResponseblueprintsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseBlueprintsResponseblueprintsTypeDef",
    {
        "blueprintId": str,
        "engine": str,
        "engineVersion": str,
        "engineDescription": str,
        "engineVersionDescription": str,
        "isEngineDefault": bool,
    },
    total=False,
)

ClientGetRelationalDatabaseBlueprintsResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseBlueprintsResponseTypeDef",
    {
        "blueprints": List[ClientGetRelationalDatabaseBlueprintsResponseblueprintsTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetRelationalDatabaseBundlesResponsebundlesTypeDef = TypedDict(
    "ClientGetRelationalDatabaseBundlesResponsebundlesTypeDef",
    {
        "bundleId": str,
        "name": str,
        "price": Any,
        "ramSizeInGb": Any,
        "diskSizeInGb": int,
        "transferPerMonthInGb": int,
        "cpuCount": int,
        "isEncrypted": bool,
        "isActive": bool,
    },
    total=False,
)

ClientGetRelationalDatabaseBundlesResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseBundlesResponseTypeDef",
    {
        "bundles": List[ClientGetRelationalDatabaseBundlesResponsebundlesTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetRelationalDatabaseEventsResponserelationalDatabaseEventsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseEventsResponserelationalDatabaseEventsTypeDef",
    {"resource": str, "createdAt": datetime, "message": str, "eventCategories": List[str]},
    total=False,
)

ClientGetRelationalDatabaseEventsResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseEventsResponseTypeDef",
    {
        "relationalDatabaseEvents": List[
            ClientGetRelationalDatabaseEventsResponserelationalDatabaseEventsTypeDef
        ],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetRelationalDatabaseLogEventsResponseresourceLogEventsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseLogEventsResponseresourceLogEventsTypeDef",
    {"createdAt": datetime, "message": str},
    total=False,
)

ClientGetRelationalDatabaseLogEventsResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseLogEventsResponseTypeDef",
    {
        "resourceLogEvents": List[
            ClientGetRelationalDatabaseLogEventsResponseresourceLogEventsTypeDef
        ],
        "nextBackwardToken": str,
        "nextForwardToken": str,
    },
    total=False,
)

ClientGetRelationalDatabaseLogStreamsResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseLogStreamsResponseTypeDef", {"logStreams": List[str]}, total=False
)

ClientGetRelationalDatabaseMasterUserPasswordResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseMasterUserPasswordResponseTypeDef",
    {"masterUserPassword": str, "createdAt": datetime},
    total=False,
)

ClientGetRelationalDatabaseMetricDataResponsemetricDataTypeDef = TypedDict(
    "ClientGetRelationalDatabaseMetricDataResponsemetricDataTypeDef",
    {
        "average": float,
        "maximum": float,
        "minimum": float,
        "sampleCount": float,
        "sum": float,
        "timestamp": datetime,
        "unit": Literal[
            "Seconds",
            "Microseconds",
            "Milliseconds",
            "Bytes",
            "Kilobytes",
            "Megabytes",
            "Gigabytes",
            "Terabytes",
            "Bits",
            "Kilobits",
            "Megabits",
            "Gigabits",
            "Terabits",
            "Percent",
            "Count",
            "Bytes/Second",
            "Kilobytes/Second",
            "Megabytes/Second",
            "Gigabytes/Second",
            "Terabytes/Second",
            "Bits/Second",
            "Kilobits/Second",
            "Megabits/Second",
            "Gigabits/Second",
            "Terabits/Second",
            "Count/Second",
            "None",
        ],
    },
    total=False,
)

ClientGetRelationalDatabaseMetricDataResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseMetricDataResponseTypeDef",
    {
        "metricName": Literal[
            "CPUUtilization",
            "DatabaseConnections",
            "DiskQueueDepth",
            "FreeStorageSpace",
            "NetworkReceiveThroughput",
            "NetworkTransmitThroughput",
        ],
        "metricData": List[ClientGetRelationalDatabaseMetricDataResponsemetricDataTypeDef],
    },
    total=False,
)

ClientGetRelationalDatabaseParametersResponseparametersTypeDef = TypedDict(
    "ClientGetRelationalDatabaseParametersResponseparametersTypeDef",
    {
        "allowedValues": str,
        "applyMethod": str,
        "applyType": str,
        "dataType": str,
        "description": str,
        "isModifiable": bool,
        "parameterName": str,
        "parameterValue": str,
    },
    total=False,
)

ClientGetRelationalDatabaseParametersResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseParametersResponseTypeDef",
    {
        "parameters": List[ClientGetRelationalDatabaseParametersResponseparametersTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabasehardwareTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabasehardwareTypeDef",
    {"cpuCount": int, "diskSizeInGb": int, "ramSizeInGb": Any},
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabaselocationTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabaselocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabasemasterEndpointTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabasemasterEndpointTypeDef",
    {"port": int, "address": str},
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabasependingMaintenanceActionsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabasependingMaintenanceActionsTypeDef",
    {"action": str, "description": str, "currentApplyDate": datetime},
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabasependingModifiedValuesTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabasependingModifiedValuesTypeDef",
    {"masterUserPassword": str, "engineVersion": str, "backupRetentionEnabled": bool},
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabasetagsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabasetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetRelationalDatabaseResponserelationalDatabaseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponserelationalDatabaseTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetRelationalDatabaseResponserelationalDatabaselocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetRelationalDatabaseResponserelationalDatabasetagsTypeDef],
        "relationalDatabaseBlueprintId": str,
        "relationalDatabaseBundleId": str,
        "masterDatabaseName": str,
        "hardware": ClientGetRelationalDatabaseResponserelationalDatabasehardwareTypeDef,
        "state": str,
        "secondaryAvailabilityZone": str,
        "backupRetentionEnabled": bool,
        "pendingModifiedValues": ClientGetRelationalDatabaseResponserelationalDatabasependingModifiedValuesTypeDef,
        "engine": str,
        "engineVersion": str,
        "latestRestorableTime": datetime,
        "masterUsername": str,
        "parameterApplyStatus": str,
        "preferredBackupWindow": str,
        "preferredMaintenanceWindow": str,
        "publiclyAccessible": bool,
        "masterEndpoint": ClientGetRelationalDatabaseResponserelationalDatabasemasterEndpointTypeDef,
        "pendingMaintenanceActions": List[
            ClientGetRelationalDatabaseResponserelationalDatabasependingMaintenanceActionsTypeDef
        ],
    },
    total=False,
)

ClientGetRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseResponseTypeDef",
    {"relationalDatabase": ClientGetRelationalDatabaseResponserelationalDatabaseTypeDef},
    total=False,
)

ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshotlocationTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshotlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshottagsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshottagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshotTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshotTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshotlocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[
            ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshottagsTypeDef
        ],
        "engine": str,
        "engineVersion": str,
        "sizeInGb": int,
        "state": str,
        "fromRelationalDatabaseName": str,
        "fromRelationalDatabaseArn": str,
        "fromRelationalDatabaseBundleId": str,
        "fromRelationalDatabaseBlueprintId": str,
    },
    total=False,
)

ClientGetRelationalDatabaseSnapshotResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotResponseTypeDef",
    {
        "relationalDatabaseSnapshot": ClientGetRelationalDatabaseSnapshotResponserelationalDatabaseSnapshotTypeDef
    },
    total=False,
)

ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotslocationTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotstagsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotsTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[
            ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotstagsTypeDef
        ],
        "engine": str,
        "engineVersion": str,
        "sizeInGb": int,
        "state": str,
        "fromRelationalDatabaseName": str,
        "fromRelationalDatabaseArn": str,
        "fromRelationalDatabaseBundleId": str,
        "fromRelationalDatabaseBlueprintId": str,
    },
    total=False,
)

ClientGetRelationalDatabaseSnapshotsResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabaseSnapshotsResponseTypeDef",
    {
        "relationalDatabaseSnapshots": List[
            ClientGetRelationalDatabaseSnapshotsResponserelationalDatabaseSnapshotsTypeDef
        ],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabaseshardwareTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabaseshardwareTypeDef",
    {"cpuCount": int, "diskSizeInGb": int, "ramSizeInGb": Any},
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabaseslocationTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabaseslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabasesmasterEndpointTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabasesmasterEndpointTypeDef",
    {"port": int, "address": str},
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabasespendingMaintenanceActionsTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabasespendingMaintenanceActionsTypeDef",
    {"action": str, "description": str, "currentApplyDate": datetime},
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabasespendingModifiedValuesTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabasespendingModifiedValuesTypeDef",
    {"masterUserPassword": str, "engineVersion": str, "backupRetentionEnabled": bool},
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabasestagsTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabasestagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

ClientGetRelationalDatabasesResponserelationalDatabasesTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponserelationalDatabasesTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetRelationalDatabasesResponserelationalDatabaseslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[ClientGetRelationalDatabasesResponserelationalDatabasestagsTypeDef],
        "relationalDatabaseBlueprintId": str,
        "relationalDatabaseBundleId": str,
        "masterDatabaseName": str,
        "hardware": ClientGetRelationalDatabasesResponserelationalDatabaseshardwareTypeDef,
        "state": str,
        "secondaryAvailabilityZone": str,
        "backupRetentionEnabled": bool,
        "pendingModifiedValues": ClientGetRelationalDatabasesResponserelationalDatabasespendingModifiedValuesTypeDef,
        "engine": str,
        "engineVersion": str,
        "latestRestorableTime": datetime,
        "masterUsername": str,
        "parameterApplyStatus": str,
        "preferredBackupWindow": str,
        "preferredMaintenanceWindow": str,
        "publiclyAccessible": bool,
        "masterEndpoint": ClientGetRelationalDatabasesResponserelationalDatabasesmasterEndpointTypeDef,
        "pendingMaintenanceActions": List[
            ClientGetRelationalDatabasesResponserelationalDatabasespendingMaintenanceActionsTypeDef
        ],
    },
    total=False,
)

ClientGetRelationalDatabasesResponseTypeDef = TypedDict(
    "ClientGetRelationalDatabasesResponseTypeDef",
    {
        "relationalDatabases": List[ClientGetRelationalDatabasesResponserelationalDatabasesTypeDef],
        "nextPageToken": str,
    },
    total=False,
)

ClientGetStaticIpResponsestaticIplocationTypeDef = TypedDict(
    "ClientGetStaticIpResponsestaticIplocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetStaticIpResponsestaticIpTypeDef = TypedDict(
    "ClientGetStaticIpResponsestaticIpTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetStaticIpResponsestaticIplocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "ipAddress": str,
        "attachedTo": str,
        "isAttached": bool,
    },
    total=False,
)

ClientGetStaticIpResponseTypeDef = TypedDict(
    "ClientGetStaticIpResponseTypeDef",
    {"staticIp": ClientGetStaticIpResponsestaticIpTypeDef},
    total=False,
)

ClientGetStaticIpsResponsestaticIpslocationTypeDef = TypedDict(
    "ClientGetStaticIpsResponsestaticIpslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientGetStaticIpsResponsestaticIpsTypeDef = TypedDict(
    "ClientGetStaticIpsResponsestaticIpsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": ClientGetStaticIpsResponsestaticIpslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "ipAddress": str,
        "attachedTo": str,
        "isAttached": bool,
    },
    total=False,
)

ClientGetStaticIpsResponseTypeDef = TypedDict(
    "ClientGetStaticIpsResponseTypeDef",
    {"staticIps": List[ClientGetStaticIpsResponsestaticIpsTypeDef], "nextPageToken": str},
    total=False,
)

ClientImportKeyPairResponseoperationlocationTypeDef = TypedDict(
    "ClientImportKeyPairResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientImportKeyPairResponseoperationTypeDef = TypedDict(
    "ClientImportKeyPairResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientImportKeyPairResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientImportKeyPairResponseTypeDef = TypedDict(
    "ClientImportKeyPairResponseTypeDef",
    {"operation": ClientImportKeyPairResponseoperationTypeDef},
    total=False,
)

ClientIsVpcPeeredResponseTypeDef = TypedDict(
    "ClientIsVpcPeeredResponseTypeDef", {"isPeered": bool}, total=False
)

ClientOpenInstancePublicPortsPortInfoTypeDef = TypedDict(
    "ClientOpenInstancePublicPortsPortInfoTypeDef",
    {"fromPort": int, "toPort": int, "protocol": Literal["tcp", "all", "udp"]},
    total=False,
)

ClientOpenInstancePublicPortsResponseoperationlocationTypeDef = TypedDict(
    "ClientOpenInstancePublicPortsResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientOpenInstancePublicPortsResponseoperationTypeDef = TypedDict(
    "ClientOpenInstancePublicPortsResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientOpenInstancePublicPortsResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientOpenInstancePublicPortsResponseTypeDef = TypedDict(
    "ClientOpenInstancePublicPortsResponseTypeDef",
    {"operation": ClientOpenInstancePublicPortsResponseoperationTypeDef},
    total=False,
)

ClientPeerVpcResponseoperationlocationTypeDef = TypedDict(
    "ClientPeerVpcResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientPeerVpcResponseoperationTypeDef = TypedDict(
    "ClientPeerVpcResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientPeerVpcResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientPeerVpcResponseTypeDef = TypedDict(
    "ClientPeerVpcResponseTypeDef",
    {"operation": ClientPeerVpcResponseoperationTypeDef},
    total=False,
)

ClientPutInstancePublicPortsPortInfosTypeDef = TypedDict(
    "ClientPutInstancePublicPortsPortInfosTypeDef",
    {"fromPort": int, "toPort": int, "protocol": Literal["tcp", "all", "udp"]},
    total=False,
)

ClientPutInstancePublicPortsResponseoperationlocationTypeDef = TypedDict(
    "ClientPutInstancePublicPortsResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientPutInstancePublicPortsResponseoperationTypeDef = TypedDict(
    "ClientPutInstancePublicPortsResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientPutInstancePublicPortsResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientPutInstancePublicPortsResponseTypeDef = TypedDict(
    "ClientPutInstancePublicPortsResponseTypeDef",
    {"operation": ClientPutInstancePublicPortsResponseoperationTypeDef},
    total=False,
)

ClientRebootInstanceResponseoperationslocationTypeDef = TypedDict(
    "ClientRebootInstanceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientRebootInstanceResponseoperationsTypeDef = TypedDict(
    "ClientRebootInstanceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientRebootInstanceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientRebootInstanceResponseTypeDef = TypedDict(
    "ClientRebootInstanceResponseTypeDef",
    {"operations": List[ClientRebootInstanceResponseoperationsTypeDef]},
    total=False,
)

ClientRebootRelationalDatabaseResponseoperationslocationTypeDef = TypedDict(
    "ClientRebootRelationalDatabaseResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientRebootRelationalDatabaseResponseoperationsTypeDef = TypedDict(
    "ClientRebootRelationalDatabaseResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientRebootRelationalDatabaseResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientRebootRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientRebootRelationalDatabaseResponseTypeDef",
    {"operations": List[ClientRebootRelationalDatabaseResponseoperationsTypeDef]},
    total=False,
)

ClientReleaseStaticIpResponseoperationslocationTypeDef = TypedDict(
    "ClientReleaseStaticIpResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientReleaseStaticIpResponseoperationsTypeDef = TypedDict(
    "ClientReleaseStaticIpResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientReleaseStaticIpResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientReleaseStaticIpResponseTypeDef = TypedDict(
    "ClientReleaseStaticIpResponseTypeDef",
    {"operations": List[ClientReleaseStaticIpResponseoperationsTypeDef]},
    total=False,
)

ClientStartInstanceResponseoperationslocationTypeDef = TypedDict(
    "ClientStartInstanceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientStartInstanceResponseoperationsTypeDef = TypedDict(
    "ClientStartInstanceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientStartInstanceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientStartInstanceResponseTypeDef = TypedDict(
    "ClientStartInstanceResponseTypeDef",
    {"operations": List[ClientStartInstanceResponseoperationsTypeDef]},
    total=False,
)

ClientStartRelationalDatabaseResponseoperationslocationTypeDef = TypedDict(
    "ClientStartRelationalDatabaseResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientStartRelationalDatabaseResponseoperationsTypeDef = TypedDict(
    "ClientStartRelationalDatabaseResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientStartRelationalDatabaseResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientStartRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientStartRelationalDatabaseResponseTypeDef",
    {"operations": List[ClientStartRelationalDatabaseResponseoperationsTypeDef]},
    total=False,
)

ClientStopInstanceResponseoperationslocationTypeDef = TypedDict(
    "ClientStopInstanceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientStopInstanceResponseoperationsTypeDef = TypedDict(
    "ClientStopInstanceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientStopInstanceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientStopInstanceResponseTypeDef = TypedDict(
    "ClientStopInstanceResponseTypeDef",
    {"operations": List[ClientStopInstanceResponseoperationsTypeDef]},
    total=False,
)

ClientStopRelationalDatabaseResponseoperationslocationTypeDef = TypedDict(
    "ClientStopRelationalDatabaseResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientStopRelationalDatabaseResponseoperationsTypeDef = TypedDict(
    "ClientStopRelationalDatabaseResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientStopRelationalDatabaseResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientStopRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientStopRelationalDatabaseResponseTypeDef",
    {"operations": List[ClientStopRelationalDatabaseResponseoperationsTypeDef]},
    total=False,
)

ClientTagResourceResponseoperationslocationTypeDef = TypedDict(
    "ClientTagResourceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientTagResourceResponseoperationsTypeDef = TypedDict(
    "ClientTagResourceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientTagResourceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientTagResourceResponseTypeDef = TypedDict(
    "ClientTagResourceResponseTypeDef",
    {"operations": List[ClientTagResourceResponseoperationsTypeDef]},
    total=False,
)

ClientTagResourceTagsTypeDef = TypedDict(
    "ClientTagResourceTagsTypeDef", {"key": str, "value": str}, total=False
)

ClientUnpeerVpcResponseoperationlocationTypeDef = TypedDict(
    "ClientUnpeerVpcResponseoperationlocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientUnpeerVpcResponseoperationTypeDef = TypedDict(
    "ClientUnpeerVpcResponseoperationTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientUnpeerVpcResponseoperationlocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientUnpeerVpcResponseTypeDef = TypedDict(
    "ClientUnpeerVpcResponseTypeDef",
    {"operation": ClientUnpeerVpcResponseoperationTypeDef},
    total=False,
)

ClientUntagResourceResponseoperationslocationTypeDef = TypedDict(
    "ClientUntagResourceResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientUntagResourceResponseoperationsTypeDef = TypedDict(
    "ClientUntagResourceResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientUntagResourceResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientUntagResourceResponseTypeDef = TypedDict(
    "ClientUntagResourceResponseTypeDef",
    {"operations": List[ClientUntagResourceResponseoperationsTypeDef]},
    total=False,
)

ClientUpdateDomainEntryDomainEntryTypeDef = TypedDict(
    "ClientUpdateDomainEntryDomainEntryTypeDef",
    {
        "id": str,
        "name": str,
        "target": str,
        "isAlias": bool,
        "type": str,
        "options": Dict[str, str],
    },
    total=False,
)

ClientUpdateDomainEntryResponseoperationslocationTypeDef = TypedDict(
    "ClientUpdateDomainEntryResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientUpdateDomainEntryResponseoperationsTypeDef = TypedDict(
    "ClientUpdateDomainEntryResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientUpdateDomainEntryResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientUpdateDomainEntryResponseTypeDef = TypedDict(
    "ClientUpdateDomainEntryResponseTypeDef",
    {"operations": List[ClientUpdateDomainEntryResponseoperationsTypeDef]},
    total=False,
)

ClientUpdateLoadBalancerAttributeResponseoperationslocationTypeDef = TypedDict(
    "ClientUpdateLoadBalancerAttributeResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientUpdateLoadBalancerAttributeResponseoperationsTypeDef = TypedDict(
    "ClientUpdateLoadBalancerAttributeResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientUpdateLoadBalancerAttributeResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientUpdateLoadBalancerAttributeResponseTypeDef = TypedDict(
    "ClientUpdateLoadBalancerAttributeResponseTypeDef",
    {"operations": List[ClientUpdateLoadBalancerAttributeResponseoperationsTypeDef]},
    total=False,
)

ClientUpdateRelationalDatabaseParametersParametersTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseParametersParametersTypeDef",
    {
        "allowedValues": str,
        "applyMethod": str,
        "applyType": str,
        "dataType": str,
        "description": str,
        "isModifiable": bool,
        "parameterName": str,
        "parameterValue": str,
    },
    total=False,
)

ClientUpdateRelationalDatabaseParametersResponseoperationslocationTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseParametersResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientUpdateRelationalDatabaseParametersResponseoperationsTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseParametersResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientUpdateRelationalDatabaseParametersResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientUpdateRelationalDatabaseParametersResponseTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseParametersResponseTypeDef",
    {"operations": List[ClientUpdateRelationalDatabaseParametersResponseoperationsTypeDef]},
    total=False,
)

ClientUpdateRelationalDatabaseResponseoperationslocationTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

ClientUpdateRelationalDatabaseResponseoperationsTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": ClientUpdateRelationalDatabaseResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

ClientUpdateRelationalDatabaseResponseTypeDef = TypedDict(
    "ClientUpdateRelationalDatabaseResponseTypeDef",
    {"operations": List[ClientUpdateRelationalDatabaseResponseoperationsTypeDef]},
    total=False,
)

GetActiveNamesPaginatePaginationConfigTypeDef = TypedDict(
    "GetActiveNamesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetActiveNamesPaginateResponseTypeDef = TypedDict(
    "GetActiveNamesPaginateResponseTypeDef",
    {"activeNames": List[str], "NextToken": str},
    total=False,
)

GetBlueprintsPaginatePaginationConfigTypeDef = TypedDict(
    "GetBlueprintsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetBlueprintsPaginateResponseblueprintsTypeDef = TypedDict(
    "GetBlueprintsPaginateResponseblueprintsTypeDef",
    {
        "blueprintId": str,
        "name": str,
        "group": str,
        "type": Literal["os", "app"],
        "description": str,
        "isActive": bool,
        "minPower": int,
        "version": str,
        "versionCode": str,
        "productUrl": str,
        "licenseUrl": str,
        "platform": Literal["LINUX_UNIX", "WINDOWS"],
    },
    total=False,
)

GetBlueprintsPaginateResponseTypeDef = TypedDict(
    "GetBlueprintsPaginateResponseTypeDef",
    {"blueprints": List[GetBlueprintsPaginateResponseblueprintsTypeDef], "NextToken": str},
    total=False,
)

GetBundlesPaginatePaginationConfigTypeDef = TypedDict(
    "GetBundlesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetBundlesPaginateResponsebundlesTypeDef = TypedDict(
    "GetBundlesPaginateResponsebundlesTypeDef",
    {
        "price": float,
        "cpuCount": int,
        "diskSizeInGb": int,
        "bundleId": str,
        "instanceType": str,
        "isActive": bool,
        "name": str,
        "power": int,
        "ramSizeInGb": Any,
        "transferPerMonthInGb": int,
        "supportedPlatforms": List[Literal["LINUX_UNIX", "WINDOWS"]],
    },
    total=False,
)

GetBundlesPaginateResponseTypeDef = TypedDict(
    "GetBundlesPaginateResponseTypeDef",
    {"bundles": List[GetBundlesPaginateResponsebundlesTypeDef], "NextToken": str},
    total=False,
)

GetCloudFormationStackRecordsPaginatePaginationConfigTypeDef = TypedDict(
    "GetCloudFormationStackRecordsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordsdestinationInfoTypeDef = TypedDict(
    "GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordsdestinationInfoTypeDef",
    {"id": str, "service": str},
    total=False,
)

GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordslocationTypeDef = TypedDict(
    "GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordssourceInfoTypeDef = TypedDict(
    "GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordssourceInfoTypeDef",
    {"resourceType": str, "name": str, "arn": str},
    total=False,
)

GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordsTypeDef = TypedDict(
    "GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordsTypeDef",
    {
        "name": str,
        "arn": str,
        "createdAt": datetime,
        "location": GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "state": Literal["Started", "Succeeded", "Failed"],
        "sourceInfo": List[
            GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordssourceInfoTypeDef
        ],
        "destinationInfo": GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordsdestinationInfoTypeDef,
    },
    total=False,
)

GetCloudFormationStackRecordsPaginateResponseTypeDef = TypedDict(
    "GetCloudFormationStackRecordsPaginateResponseTypeDef",
    {
        "cloudFormationStackRecords": List[
            GetCloudFormationStackRecordsPaginateResponsecloudFormationStackRecordsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

GetDiskSnapshotsPaginatePaginationConfigTypeDef = TypedDict(
    "GetDiskSnapshotsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetDiskSnapshotsPaginateResponsediskSnapshotslocationTypeDef = TypedDict(
    "GetDiskSnapshotsPaginateResponsediskSnapshotslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetDiskSnapshotsPaginateResponsediskSnapshotstagsTypeDef = TypedDict(
    "GetDiskSnapshotsPaginateResponsediskSnapshotstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetDiskSnapshotsPaginateResponsediskSnapshotsTypeDef = TypedDict(
    "GetDiskSnapshotsPaginateResponsediskSnapshotsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetDiskSnapshotsPaginateResponsediskSnapshotslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetDiskSnapshotsPaginateResponsediskSnapshotstagsTypeDef],
        "sizeInGb": int,
        "state": Literal["pending", "completed", "error", "unknown"],
        "progress": str,
        "fromDiskName": str,
        "fromDiskArn": str,
        "fromInstanceName": str,
        "fromInstanceArn": str,
        "isFromAutoSnapshot": bool,
    },
    total=False,
)

GetDiskSnapshotsPaginateResponseTypeDef = TypedDict(
    "GetDiskSnapshotsPaginateResponseTypeDef",
    {"diskSnapshots": List[GetDiskSnapshotsPaginateResponsediskSnapshotsTypeDef], "NextToken": str},
    total=False,
)

GetDisksPaginatePaginationConfigTypeDef = TypedDict(
    "GetDisksPaginatePaginationConfigTypeDef", {"MaxItems": int, "StartingToken": str}, total=False
)

GetDisksPaginateResponsedisksaddOnsTypeDef = TypedDict(
    "GetDisksPaginateResponsedisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

GetDisksPaginateResponsediskslocationTypeDef = TypedDict(
    "GetDisksPaginateResponsediskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetDisksPaginateResponsediskstagsTypeDef = TypedDict(
    "GetDisksPaginateResponsediskstagsTypeDef", {"key": str, "value": str}, total=False
)

GetDisksPaginateResponsedisksTypeDef = TypedDict(
    "GetDisksPaginateResponsedisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetDisksPaginateResponsediskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetDisksPaginateResponsediskstagsTypeDef],
        "addOns": List[GetDisksPaginateResponsedisksaddOnsTypeDef],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

GetDisksPaginateResponseTypeDef = TypedDict(
    "GetDisksPaginateResponseTypeDef",
    {"disks": List[GetDisksPaginateResponsedisksTypeDef], "NextToken": str},
    total=False,
)

GetDomainsPaginatePaginationConfigTypeDef = TypedDict(
    "GetDomainsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetDomainsPaginateResponsedomainsdomainEntriesTypeDef = TypedDict(
    "GetDomainsPaginateResponsedomainsdomainEntriesTypeDef",
    {
        "id": str,
        "name": str,
        "target": str,
        "isAlias": bool,
        "type": str,
        "options": Dict[str, str],
    },
    total=False,
)

GetDomainsPaginateResponsedomainslocationTypeDef = TypedDict(
    "GetDomainsPaginateResponsedomainslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetDomainsPaginateResponsedomainstagsTypeDef = TypedDict(
    "GetDomainsPaginateResponsedomainstagsTypeDef", {"key": str, "value": str}, total=False
)

GetDomainsPaginateResponsedomainsTypeDef = TypedDict(
    "GetDomainsPaginateResponsedomainsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetDomainsPaginateResponsedomainslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetDomainsPaginateResponsedomainstagsTypeDef],
        "domainEntries": List[GetDomainsPaginateResponsedomainsdomainEntriesTypeDef],
    },
    total=False,
)

GetDomainsPaginateResponseTypeDef = TypedDict(
    "GetDomainsPaginateResponseTypeDef",
    {"domains": List[GetDomainsPaginateResponsedomainsTypeDef], "NextToken": str},
    total=False,
)

GetExportSnapshotRecordsPaginatePaginationConfigTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordsdestinationInfoTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordsdestinationInfoTypeDef",
    {"id": str, "service": str},
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordslocationTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfodiskSnapshotInfoTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfodiskSnapshotInfoTypeDef",
    {"sizeInGb": int},
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfofromDiskInfoTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfofromDiskInfoTypeDef",
    {"name": str, "path": str, "sizeInGb": int, "isSystemDisk": bool},
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfoTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfoTypeDef",
    {
        "fromBundleId": str,
        "fromBlueprintId": str,
        "fromDiskInfo": List[
            GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfofromDiskInfoTypeDef
        ],
    },
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoTypeDef",
    {
        "resourceType": Literal["InstanceSnapshot", "DiskSnapshot"],
        "createdAt": datetime,
        "name": str,
        "arn": str,
        "fromResourceName": str,
        "fromResourceArn": str,
        "instanceSnapshotInfo": GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoinstanceSnapshotInfoTypeDef,
        "diskSnapshotInfo": GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfodiskSnapshotInfoTypeDef,
    },
    total=False,
)

GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordsTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordsTypeDef",
    {
        "name": str,
        "arn": str,
        "createdAt": datetime,
        "location": GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "state": Literal["Started", "Succeeded", "Failed"],
        "sourceInfo": GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordssourceInfoTypeDef,
        "destinationInfo": GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordsdestinationInfoTypeDef,
    },
    total=False,
)

GetExportSnapshotRecordsPaginateResponseTypeDef = TypedDict(
    "GetExportSnapshotRecordsPaginateResponseTypeDef",
    {
        "exportSnapshotRecords": List[
            GetExportSnapshotRecordsPaginateResponseexportSnapshotRecordsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

GetInstanceSnapshotsPaginatePaginationConfigTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDisksaddOnsTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDiskslocationTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDiskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDiskstagsTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDiskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDisksTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDiskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[
            GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDiskstagsTypeDef
        ],
        "addOns": List[
            GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDisksaddOnsTypeDef
        ],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotslocationTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotstagsTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetInstanceSnapshotsPaginateResponseinstanceSnapshotsTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseinstanceSnapshotsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetInstanceSnapshotsPaginateResponseinstanceSnapshotslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetInstanceSnapshotsPaginateResponseinstanceSnapshotstagsTypeDef],
        "state": Literal["pending", "error", "available"],
        "progress": str,
        "fromAttachedDisks": List[
            GetInstanceSnapshotsPaginateResponseinstanceSnapshotsfromAttachedDisksTypeDef
        ],
        "fromInstanceName": str,
        "fromInstanceArn": str,
        "fromBlueprintId": str,
        "fromBundleId": str,
        "isFromAutoSnapshot": bool,
        "sizeInGb": int,
    },
    total=False,
)

GetInstanceSnapshotsPaginateResponseTypeDef = TypedDict(
    "GetInstanceSnapshotsPaginateResponseTypeDef",
    {
        "instanceSnapshots": List[GetInstanceSnapshotsPaginateResponseinstanceSnapshotsTypeDef],
        "NextToken": str,
    },
    total=False,
)

GetInstancesPaginatePaginationConfigTypeDef = TypedDict(
    "GetInstancesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetInstancesPaginateResponseinstancesaddOnsTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancesaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

GetInstancesPaginateResponseinstanceshardwaredisksaddOnsTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstanceshardwaredisksaddOnsTypeDef",
    {"name": str, "status": str, "snapshotTimeOfDay": str, "nextSnapshotTimeOfDay": str},
    total=False,
)

GetInstancesPaginateResponseinstanceshardwarediskslocationTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstanceshardwarediskslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetInstancesPaginateResponseinstanceshardwarediskstagsTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstanceshardwarediskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetInstancesPaginateResponseinstanceshardwaredisksTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstanceshardwaredisksTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetInstancesPaginateResponseinstanceshardwarediskslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetInstancesPaginateResponseinstanceshardwarediskstagsTypeDef],
        "addOns": List[GetInstancesPaginateResponseinstanceshardwaredisksaddOnsTypeDef],
        "sizeInGb": int,
        "isSystemDisk": bool,
        "iops": int,
        "path": str,
        "state": Literal["pending", "error", "available", "in-use", "unknown"],
        "attachedTo": str,
        "isAttached": bool,
        "attachmentState": str,
        "gbInUse": int,
    },
    total=False,
)

GetInstancesPaginateResponseinstanceshardwareTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstanceshardwareTypeDef",
    {
        "cpuCount": int,
        "disks": List[GetInstancesPaginateResponseinstanceshardwaredisksTypeDef],
        "ramSizeInGb": Any,
    },
    total=False,
)

GetInstancesPaginateResponseinstanceslocationTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstanceslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetInstancesPaginateResponseinstancesnetworkingmonthlyTransferTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancesnetworkingmonthlyTransferTypeDef",
    {"gbPerMonthAllocated": int},
    total=False,
)

GetInstancesPaginateResponseinstancesnetworkingportsTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancesnetworkingportsTypeDef",
    {
        "fromPort": int,
        "toPort": int,
        "protocol": Literal["tcp", "all", "udp"],
        "accessFrom": str,
        "accessType": Literal["Public", "Private"],
        "commonName": str,
        "accessDirection": Literal["inbound", "outbound"],
    },
    total=False,
)

GetInstancesPaginateResponseinstancesnetworkingTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancesnetworkingTypeDef",
    {
        "monthlyTransfer": GetInstancesPaginateResponseinstancesnetworkingmonthlyTransferTypeDef,
        "ports": List[GetInstancesPaginateResponseinstancesnetworkingportsTypeDef],
    },
    total=False,
)

GetInstancesPaginateResponseinstancesstateTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancesstateTypeDef", {"code": int, "name": str}, total=False
)

GetInstancesPaginateResponseinstancestagsTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancestagsTypeDef", {"key": str, "value": str}, total=False
)

GetInstancesPaginateResponseinstancesTypeDef = TypedDict(
    "GetInstancesPaginateResponseinstancesTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetInstancesPaginateResponseinstanceslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetInstancesPaginateResponseinstancestagsTypeDef],
        "blueprintId": str,
        "blueprintName": str,
        "bundleId": str,
        "addOns": List[GetInstancesPaginateResponseinstancesaddOnsTypeDef],
        "isStaticIp": bool,
        "privateIpAddress": str,
        "publicIpAddress": str,
        "ipv6Address": str,
        "hardware": GetInstancesPaginateResponseinstanceshardwareTypeDef,
        "networking": GetInstancesPaginateResponseinstancesnetworkingTypeDef,
        "state": GetInstancesPaginateResponseinstancesstateTypeDef,
        "username": str,
        "sshKeyName": str,
    },
    total=False,
)

GetInstancesPaginateResponseTypeDef = TypedDict(
    "GetInstancesPaginateResponseTypeDef",
    {"instances": List[GetInstancesPaginateResponseinstancesTypeDef], "NextToken": str},
    total=False,
)

GetKeyPairsPaginatePaginationConfigTypeDef = TypedDict(
    "GetKeyPairsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetKeyPairsPaginateResponsekeyPairslocationTypeDef = TypedDict(
    "GetKeyPairsPaginateResponsekeyPairslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetKeyPairsPaginateResponsekeyPairstagsTypeDef = TypedDict(
    "GetKeyPairsPaginateResponsekeyPairstagsTypeDef", {"key": str, "value": str}, total=False
)

GetKeyPairsPaginateResponsekeyPairsTypeDef = TypedDict(
    "GetKeyPairsPaginateResponsekeyPairsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetKeyPairsPaginateResponsekeyPairslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetKeyPairsPaginateResponsekeyPairstagsTypeDef],
        "fingerprint": str,
    },
    total=False,
)

GetKeyPairsPaginateResponseTypeDef = TypedDict(
    "GetKeyPairsPaginateResponseTypeDef",
    {"keyPairs": List[GetKeyPairsPaginateResponsekeyPairsTypeDef], "NextToken": str},
    total=False,
)

GetLoadBalancersPaginatePaginationConfigTypeDef = TypedDict(
    "GetLoadBalancersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetLoadBalancersPaginateResponseloadBalancersinstanceHealthSummaryTypeDef = TypedDict(
    "GetLoadBalancersPaginateResponseloadBalancersinstanceHealthSummaryTypeDef",
    {
        "instanceName": str,
        "instanceHealth": Literal[
            "initial", "healthy", "unhealthy", "unused", "draining", "unavailable"
        ],
        "instanceHealthReason": Literal[
            "Lb.RegistrationInProgress",
            "Lb.InitialHealthChecking",
            "Lb.InternalError",
            "Instance.ResponseCodeMismatch",
            "Instance.Timeout",
            "Instance.FailedHealthChecks",
            "Instance.NotRegistered",
            "Instance.NotInUse",
            "Instance.DeregistrationInProgress",
            "Instance.InvalidState",
            "Instance.IpUnusable",
        ],
    },
    total=False,
)

GetLoadBalancersPaginateResponseloadBalancerslocationTypeDef = TypedDict(
    "GetLoadBalancersPaginateResponseloadBalancerslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetLoadBalancersPaginateResponseloadBalancerstagsTypeDef = TypedDict(
    "GetLoadBalancersPaginateResponseloadBalancerstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetLoadBalancersPaginateResponseloadBalancerstlsCertificateSummariesTypeDef = TypedDict(
    "GetLoadBalancersPaginateResponseloadBalancerstlsCertificateSummariesTypeDef",
    {"name": str, "isAttached": bool},
    total=False,
)

GetLoadBalancersPaginateResponseloadBalancersTypeDef = TypedDict(
    "GetLoadBalancersPaginateResponseloadBalancersTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetLoadBalancersPaginateResponseloadBalancerslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetLoadBalancersPaginateResponseloadBalancerstagsTypeDef],
        "dnsName": str,
        "state": Literal["active", "provisioning", "active_impaired", "failed", "unknown"],
        "protocol": Literal["HTTP_HTTPS", "HTTP"],
        "publicPorts": List[int],
        "healthCheckPath": str,
        "instancePort": int,
        "instanceHealthSummary": List[
            GetLoadBalancersPaginateResponseloadBalancersinstanceHealthSummaryTypeDef
        ],
        "tlsCertificateSummaries": List[
            GetLoadBalancersPaginateResponseloadBalancerstlsCertificateSummariesTypeDef
        ],
        "configurationOptions": Dict[str, str],
    },
    total=False,
)

GetLoadBalancersPaginateResponseTypeDef = TypedDict(
    "GetLoadBalancersPaginateResponseTypeDef",
    {"loadBalancers": List[GetLoadBalancersPaginateResponseloadBalancersTypeDef], "NextToken": str},
    total=False,
)

GetOperationsPaginatePaginationConfigTypeDef = TypedDict(
    "GetOperationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetOperationsPaginateResponseoperationslocationTypeDef = TypedDict(
    "GetOperationsPaginateResponseoperationslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetOperationsPaginateResponseoperationsTypeDef = TypedDict(
    "GetOperationsPaginateResponseoperationsTypeDef",
    {
        "id": str,
        "resourceName": str,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "createdAt": datetime,
        "location": GetOperationsPaginateResponseoperationslocationTypeDef,
        "isTerminal": bool,
        "operationDetails": str,
        "operationType": Literal[
            "DeleteKnownHostKeys",
            "DeleteInstance",
            "CreateInstance",
            "StopInstance",
            "StartInstance",
            "RebootInstance",
            "OpenInstancePublicPorts",
            "PutInstancePublicPorts",
            "CloseInstancePublicPorts",
            "AllocateStaticIp",
            "ReleaseStaticIp",
            "AttachStaticIp",
            "DetachStaticIp",
            "UpdateDomainEntry",
            "DeleteDomainEntry",
            "CreateDomain",
            "DeleteDomain",
            "CreateInstanceSnapshot",
            "DeleteInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "DeleteLoadBalancer",
            "AttachInstancesToLoadBalancer",
            "DetachInstancesFromLoadBalancer",
            "UpdateLoadBalancerAttribute",
            "CreateLoadBalancerTlsCertificate",
            "DeleteLoadBalancerTlsCertificate",
            "AttachLoadBalancerTlsCertificate",
            "CreateDisk",
            "DeleteDisk",
            "AttachDisk",
            "DetachDisk",
            "CreateDiskSnapshot",
            "DeleteDiskSnapshot",
            "CreateDiskFromSnapshot",
            "CreateRelationalDatabase",
            "UpdateRelationalDatabase",
            "DeleteRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteRelationalDatabaseSnapshot",
            "UpdateRelationalDatabaseParameters",
            "StartRelationalDatabase",
            "RebootRelationalDatabase",
            "StopRelationalDatabase",
            "EnableAddOn",
            "DisableAddOn",
        ],
        "status": Literal["NotStarted", "Started", "Failed", "Completed", "Succeeded"],
        "statusChangedAt": datetime,
        "errorCode": str,
        "errorDetails": str,
    },
    total=False,
)

GetOperationsPaginateResponseTypeDef = TypedDict(
    "GetOperationsPaginateResponseTypeDef",
    {"operations": List[GetOperationsPaginateResponseoperationsTypeDef], "NextToken": str},
    total=False,
)

GetRelationalDatabaseBlueprintsPaginatePaginationConfigTypeDef = TypedDict(
    "GetRelationalDatabaseBlueprintsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetRelationalDatabaseBlueprintsPaginateResponseblueprintsTypeDef = TypedDict(
    "GetRelationalDatabaseBlueprintsPaginateResponseblueprintsTypeDef",
    {
        "blueprintId": str,
        "engine": str,
        "engineVersion": str,
        "engineDescription": str,
        "engineVersionDescription": str,
        "isEngineDefault": bool,
    },
    total=False,
)

GetRelationalDatabaseBlueprintsPaginateResponseTypeDef = TypedDict(
    "GetRelationalDatabaseBlueprintsPaginateResponseTypeDef",
    {
        "blueprints": List[GetRelationalDatabaseBlueprintsPaginateResponseblueprintsTypeDef],
        "NextToken": str,
    },
    total=False,
)

GetRelationalDatabaseBundlesPaginatePaginationConfigTypeDef = TypedDict(
    "GetRelationalDatabaseBundlesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetRelationalDatabaseBundlesPaginateResponsebundlesTypeDef = TypedDict(
    "GetRelationalDatabaseBundlesPaginateResponsebundlesTypeDef",
    {
        "bundleId": str,
        "name": str,
        "price": Any,
        "ramSizeInGb": Any,
        "diskSizeInGb": int,
        "transferPerMonthInGb": int,
        "cpuCount": int,
        "isEncrypted": bool,
        "isActive": bool,
    },
    total=False,
)

GetRelationalDatabaseBundlesPaginateResponseTypeDef = TypedDict(
    "GetRelationalDatabaseBundlesPaginateResponseTypeDef",
    {"bundles": List[GetRelationalDatabaseBundlesPaginateResponsebundlesTypeDef], "NextToken": str},
    total=False,
)

GetRelationalDatabaseEventsPaginatePaginationConfigTypeDef = TypedDict(
    "GetRelationalDatabaseEventsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetRelationalDatabaseEventsPaginateResponserelationalDatabaseEventsTypeDef = TypedDict(
    "GetRelationalDatabaseEventsPaginateResponserelationalDatabaseEventsTypeDef",
    {"resource": str, "createdAt": datetime, "message": str, "eventCategories": List[str]},
    total=False,
)

GetRelationalDatabaseEventsPaginateResponseTypeDef = TypedDict(
    "GetRelationalDatabaseEventsPaginateResponseTypeDef",
    {
        "relationalDatabaseEvents": List[
            GetRelationalDatabaseEventsPaginateResponserelationalDatabaseEventsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

GetRelationalDatabaseParametersPaginatePaginationConfigTypeDef = TypedDict(
    "GetRelationalDatabaseParametersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetRelationalDatabaseParametersPaginateResponseparametersTypeDef = TypedDict(
    "GetRelationalDatabaseParametersPaginateResponseparametersTypeDef",
    {
        "allowedValues": str,
        "applyMethod": str,
        "applyType": str,
        "dataType": str,
        "description": str,
        "isModifiable": bool,
        "parameterName": str,
        "parameterValue": str,
    },
    total=False,
)

GetRelationalDatabaseParametersPaginateResponseTypeDef = TypedDict(
    "GetRelationalDatabaseParametersPaginateResponseTypeDef",
    {
        "parameters": List[GetRelationalDatabaseParametersPaginateResponseparametersTypeDef],
        "NextToken": str,
    },
    total=False,
)

GetRelationalDatabaseSnapshotsPaginatePaginationConfigTypeDef = TypedDict(
    "GetRelationalDatabaseSnapshotsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotslocationTypeDef = TypedDict(
    "GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotstagsTypeDef = TypedDict(
    "GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotsTypeDef = TypedDict(
    "GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[
            GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotstagsTypeDef
        ],
        "engine": str,
        "engineVersion": str,
        "sizeInGb": int,
        "state": str,
        "fromRelationalDatabaseName": str,
        "fromRelationalDatabaseArn": str,
        "fromRelationalDatabaseBundleId": str,
        "fromRelationalDatabaseBlueprintId": str,
    },
    total=False,
)

GetRelationalDatabaseSnapshotsPaginateResponseTypeDef = TypedDict(
    "GetRelationalDatabaseSnapshotsPaginateResponseTypeDef",
    {
        "relationalDatabaseSnapshots": List[
            GetRelationalDatabaseSnapshotsPaginateResponserelationalDatabaseSnapshotsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

GetRelationalDatabasesPaginatePaginationConfigTypeDef = TypedDict(
    "GetRelationalDatabasesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabaseshardwareTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabaseshardwareTypeDef",
    {"cpuCount": int, "diskSizeInGb": int, "ramSizeInGb": Any},
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabaseslocationTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabaseslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabasesmasterEndpointTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabasesmasterEndpointTypeDef",
    {"port": int, "address": str},
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabasespendingMaintenanceActionsTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabasespendingMaintenanceActionsTypeDef",
    {"action": str, "description": str, "currentApplyDate": datetime},
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabasespendingModifiedValuesTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabasespendingModifiedValuesTypeDef",
    {"masterUserPassword": str, "engineVersion": str, "backupRetentionEnabled": bool},
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabasestagsTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabasestagsTypeDef",
    {"key": str, "value": str},
    total=False,
)

GetRelationalDatabasesPaginateResponserelationalDatabasesTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponserelationalDatabasesTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetRelationalDatabasesPaginateResponserelationalDatabaseslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "tags": List[GetRelationalDatabasesPaginateResponserelationalDatabasestagsTypeDef],
        "relationalDatabaseBlueprintId": str,
        "relationalDatabaseBundleId": str,
        "masterDatabaseName": str,
        "hardware": GetRelationalDatabasesPaginateResponserelationalDatabaseshardwareTypeDef,
        "state": str,
        "secondaryAvailabilityZone": str,
        "backupRetentionEnabled": bool,
        "pendingModifiedValues": GetRelationalDatabasesPaginateResponserelationalDatabasespendingModifiedValuesTypeDef,
        "engine": str,
        "engineVersion": str,
        "latestRestorableTime": datetime,
        "masterUsername": str,
        "parameterApplyStatus": str,
        "preferredBackupWindow": str,
        "preferredMaintenanceWindow": str,
        "publiclyAccessible": bool,
        "masterEndpoint": GetRelationalDatabasesPaginateResponserelationalDatabasesmasterEndpointTypeDef,
        "pendingMaintenanceActions": List[
            GetRelationalDatabasesPaginateResponserelationalDatabasespendingMaintenanceActionsTypeDef
        ],
    },
    total=False,
)

GetRelationalDatabasesPaginateResponseTypeDef = TypedDict(
    "GetRelationalDatabasesPaginateResponseTypeDef",
    {
        "relationalDatabases": List[
            GetRelationalDatabasesPaginateResponserelationalDatabasesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)

GetStaticIpsPaginatePaginationConfigTypeDef = TypedDict(
    "GetStaticIpsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)

GetStaticIpsPaginateResponsestaticIpslocationTypeDef = TypedDict(
    "GetStaticIpsPaginateResponsestaticIpslocationTypeDef",
    {
        "availabilityZone": str,
        "regionName": Literal[
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "ca-central-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-northeast-1",
            "ap-northeast-2",
        ],
    },
    total=False,
)

GetStaticIpsPaginateResponsestaticIpsTypeDef = TypedDict(
    "GetStaticIpsPaginateResponsestaticIpsTypeDef",
    {
        "name": str,
        "arn": str,
        "supportCode": str,
        "createdAt": datetime,
        "location": GetStaticIpsPaginateResponsestaticIpslocationTypeDef,
        "resourceType": Literal[
            "Instance",
            "StaticIp",
            "KeyPair",
            "InstanceSnapshot",
            "Domain",
            "PeeredVpc",
            "LoadBalancer",
            "LoadBalancerTlsCertificate",
            "Disk",
            "DiskSnapshot",
            "RelationalDatabase",
            "RelationalDatabaseSnapshot",
            "ExportSnapshotRecord",
            "CloudFormationStackRecord",
        ],
        "ipAddress": str,
        "attachedTo": str,
        "isAttached": bool,
    },
    total=False,
)

GetStaticIpsPaginateResponseTypeDef = TypedDict(
    "GetStaticIpsPaginateResponseTypeDef",
    {"staticIps": List[GetStaticIpsPaginateResponsestaticIpsTypeDef], "NextToken": str},
    total=False,
)
