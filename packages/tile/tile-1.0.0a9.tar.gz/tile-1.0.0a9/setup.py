# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['tile']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['tile = tile.cli:main']}

setup_kwargs = {
    'name': 'tile',
    'version': '1.0.0a9',
    'description': 'Syntax and config generator for tiling window managers',
    'long_description': '# tile\n[![forthebadge](https://forthebadge.com/images/badges/made-with-python.svg)](https://forthebadge.com)\n[![forthebadge](https://forthebadge.com/images/badges/no-ragrets.svg)](https://forthebadge.com)\n\nSyntax and config generator for tiling window managers.\n\n## TL;DR\nIf you are using [i3](https://i3wm.org/) or [Sway](https://swaywm.org/)\ncheck out the [example](#Example) below.\n\n## Installation\n`pip install tile`\n\n## Usage\n1. Create *input_file* using [Concepts](#Concepts) below.\n2. Try it with `tile input_file`\n3. Write it to i3 config using `tile --write input_file`\n4. Write it to Sway config using `tile --write --sway input_file`\n\nCheck out `tile --help` for more options.\n\n## Concepts\n### Mapping types\n*tile* supports two types of mappings:\n1. Command bindings for WM built-in commands:\n```sh\nINPUT:\n$mod+f -> fullscreen toggle\n\nOUTPUT:\nbindsym $mod+f fullscreen toggle\n```\n2. Exec bindings, which are self-explanatory\n```sh\nINPUT:\n$mod+Return => xterm\n\nOUTPUT:\nbindsym $mod+Return exec --no-startup-id xterm\n```\n\n### Alternatives\n*Alternatives* express the idea that the same action should be bound to multiple key-bindings.\n\nFor example:\n\n```sh\nINPUT:\n$mod+h/Left -> focus left\n\nOUTPUT:\nbindsym $mod+h focus left\nbindsym $mod+Left focus left\n```\n\n### Variables\n*Variables* are shorter way to write bindings that have a similar structure.\n\nE.g.:\n```sh\nINPUT:\n$mod+{f,s} -> {fullscreen,split} toggle\n\nOUTPUT:\nbindsym $mod+f fullscreen toggle\nbindsym $mod+s split toggle\n```\n\n#### Range expansion\nInside variables you can write `1-10` and it will be expanded to `1,2,3...`.\n```sh\nINPUT:\n$mod+{1-4} -> workspace {100-103}\n\nOUTPUT:\nbindsym $mod+1 workspace 100\nbindsym $mod+2 workspace 101\nbindsym $mod+3 workspace 102\nbindsym $mod+4 workspace 103\n```\n\n#### Variable reference\nYou can reference current value of the variable using `@n` syntax, where `n` is the variable index.\nEvery variable is numbered (starting from 0) from left to right. E.g.:\n```\nfoo {bar,{foo,bar}} {0-1} ...\n    ^    ^          ^\n    0    1          2\n```\n\nUse it like this:\n```sh\nINPUT:\n$mod+Control+Shift {8-9,0} -> move container to workspace {8-10}; workspace @1\n\nOUTPUT:\nbindsym $mod+Control+Shift 8 move container to workspace 8; workspace 8\nbindsym $mod+Control+Shift 9 move container to workspace 9; workspace 9\nbindsym $mod+Control+Shift 0 move container to workspace 10; workspace 10\n```\n\nOr to avoid repeating long sequences:\n\n```sh\nINPUT:\n$mod+x -> {[instance="calculator"]} scratchpad show; @0 move position center\n\nOUTPUT:\nbindsym $mod+x [instance="calculator"] scratchpad show; [instance="calculator"] move position center\n```\n\n#### Empty value\nYou can use empty value inside *Variable*, denoted by `_`. E.g.\n```sh\nINPUT:\n$mod+{_,Shift+}h/Left -> {focus,move} left\n\nOUTPUT:\nbindsym $mod+h focus left\nbindsym $mod+Left focus left\nbindsym $mod+Shift+h move left\nbindsym $mod+Shift+Left move left\n```\n\n### Nesting\nYou can use *Alternatives* and *Variables* inside *Variable* to create many bindings at once.\n```sh\nINPUT:\nthe {{quick,brown},{fox,dog/beast}} => {xterm,kitty} -e echo {jumps,over}\n\nOUTPUT:\nbindsym the quick exec --no-startup-id xterm -e echo jumps\nbindsym the brown exec --no-startup-id xterm -e echo over\nbindsym the fox exec --no-startup-id kitty -e echo jumps\nbindsym the dog exec --no-startup-id kitty -e echo over\nbindsym the beast exec --no-startup-id kitty -e echo over\n```\n\n## Additional syntax\n### Parenthesis\nBy default, special characters like space, plus sign, etc. are *token* separators.\n```sh\nINPUT:\n$mod+p/Print => scrot\n\nOUTPUT:\nbindsym $mod+p exec --no-startup-id scrot\nbindsym $mod+Print exec --no-startup-id scrot\n```\nYou can use parenthesis to modify the behavior:\n```sh\nINPUT:\n($mod+p/Print) => scrot\n\nOUTPUT:\nbindsym $mod+p exec --no-startup-id scrot\nbindsym Print exec --no-startup-id scrot\n```\n\n### Comments\nEmpty lines or lines starting with `#` will be ignored.\n```sh\nINPUT:\n# This is a comment\n\nOUTPUT:\n\n```\n\n## Example\n```sh\nINPUT:\n$mod+{_,Shift+}{h/Left,j/Down,k/Up,l/Right}         -> {focus,move} {left,down,up,right}\n$mod+Control+Shift+{{h/Left,k/Up},{l/Right,j/Down}} -> resize {shrink,grow} {width,height} 5px or 5ppt\n$mod+{_,Shift+}{1-9,0}                              -> {_,move container to }workspace {1-10}\n$mod+Control+Shift {1-9,0}                          -> move container to workspace {1-10}; workspace @1\n\nOUTPUT:\nbindsym $mod+h focus left\nbindsym $mod+Left focus left\nbindsym $mod+j focus down\nbindsym $mod+Down focus down\nbindsym $mod+k focus up\nbindsym $mod+Up focus up\nbindsym $mod+l focus right\nbindsym $mod+Right focus right\nbindsym $mod+Shift+h move left\nbindsym $mod+Shift+Left move left\nbindsym $mod+Shift+j move down\nbindsym $mod+Shift+Down move down\nbindsym $mod+Shift+k move up\nbindsym $mod+Shift+Up move up\nbindsym $mod+Shift+l move right\nbindsym $mod+Shift+Right move right\nbindsym $mod+Control+Shift+h resize shrink width 5px or 5ppt\nbindsym $mod+Control+Shift+Left resize shrink width 5px or 5ppt\nbindsym $mod+Control+Shift+k resize shrink height 5px or 5ppt\nbindsym $mod+Control+Shift+Up resize shrink height 5px or 5ppt\nbindsym $mod+Control+Shift+l resize grow width 5px or 5ppt\nbindsym $mod+Control+Shift+Right resize grow width 5px or 5ppt\nbindsym $mod+Control+Shift+j resize grow height 5px or 5ppt\nbindsym $mod+Control+Shift+Down resize grow height 5px or 5ppt\nbindsym $mod+1 workspace 1\nbindsym $mod+2 workspace 2\nbindsym $mod+3 workspace 3\nbindsym $mod+4 workspace 4\nbindsym $mod+5 workspace 5\nbindsym $mod+6 workspace 6\nbindsym $mod+7 workspace 7\nbindsym $mod+8 workspace 8\nbindsym $mod+9 workspace 9\nbindsym $mod+0 workspace 10\nbindsym $mod+Shift+1 move container to workspace 1\nbindsym $mod+Shift+2 move container to workspace 2\nbindsym $mod+Shift+3 move container to workspace 3\nbindsym $mod+Shift+4 move container to workspace 4\nbindsym $mod+Shift+5 move container to workspace 5\nbindsym $mod+Shift+6 move container to workspace 6\nbindsym $mod+Shift+7 move container to workspace 7\nbindsym $mod+Shift+8 move container to workspace 8\nbindsym $mod+Shift+9 move container to workspace 9\nbindsym $mod+Shift+0 move container to workspace 10\nbindsym $mod+Control+Shift 1 move container to workspace 1; workspace 1\nbindsym $mod+Control+Shift 2 move container to workspace 2; workspace 2\nbindsym $mod+Control+Shift 3 move container to workspace 3; workspace 3\nbindsym $mod+Control+Shift 4 move container to workspace 4; workspace 4\nbindsym $mod+Control+Shift 5 move container to workspace 5; workspace 5\nbindsym $mod+Control+Shift 6 move container to workspace 6; workspace 6\nbindsym $mod+Control+Shift 7 move container to workspace 7; workspace 7\nbindsym $mod+Control+Shift 8 move container to workspace 8; workspace 8\nbindsym $mod+Control+Shift 9 move container to workspace 9; workspace 9\nbindsym $mod+Control+Shift 0 move container to workspace 10; workspace 10\n```\n\n## Background\n[i3](https://i3wm.org/) is a great windows manager but its config is pretty verbose.\nI tried [bspwm](https://github.com/baskerville/bspwm) with its hotkey daemon [sxhkd](https://github.com/baskerville/sxhkd) and I much prefer that syntax.\nThat\'s why I wrote *tile*.\n',
    'author': 'Viliam Valent',
    'author_email': 'tile@viliamvalent.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/ViliamV/tile',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
