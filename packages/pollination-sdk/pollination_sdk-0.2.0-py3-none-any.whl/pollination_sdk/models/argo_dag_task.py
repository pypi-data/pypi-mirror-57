# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class ArgoDAGTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'template': 'str',
        'arguments': 'ArgoArguments',
        'with_items': 'list[object]',
        'with_param': 'str',
        'dependencies': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'template': 'template',
        'arguments': 'arguments',
        'with_items': 'withItems',
        'with_param': 'withParam',
        'dependencies': 'dependencies'
    }

    def __init__(self, name=None, template=None, arguments=None, with_items=None, with_param=None, dependencies=None, local_vars_configuration=None):  # noqa: E501
        """ArgoDAGTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._template = None
        self._arguments = None
        self._with_items = None
        self._with_param = None
        self._dependencies = None
        self.discriminator = None

        self.name = name
        self.template = template
        if arguments is not None:
            self.arguments = arguments
        if with_items is not None:
            self.with_items = with_items
        if with_param is not None:
            self.with_param = with_param
        if dependencies is not None:
            self.dependencies = dependencies

    @property
    def name(self):
        """Gets the name of this ArgoDAGTask.  # noqa: E501


        :return: The name of this ArgoDAGTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArgoDAGTask.


        :param name: The name of this ArgoDAGTask.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def template(self):
        """Gets the template of this ArgoDAGTask.  # noqa: E501


        :return: The template of this ArgoDAGTask.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ArgoDAGTask.


        :param template: The template of this ArgoDAGTask.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and template is None:  # noqa: E501
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def arguments(self):
        """Gets the arguments of this ArgoDAGTask.  # noqa: E501


        :return: The arguments of this ArgoDAGTask.  # noqa: E501
        :rtype: ArgoArguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ArgoDAGTask.


        :param arguments: The arguments of this ArgoDAGTask.  # noqa: E501
        :type: ArgoArguments
        """

        self._arguments = arguments

    @property
    def with_items(self):
        """Gets the with_items of this ArgoDAGTask.  # noqa: E501


        :return: The with_items of this ArgoDAGTask.  # noqa: E501
        :rtype: list[object]
        """
        return self._with_items

    @with_items.setter
    def with_items(self, with_items):
        """Sets the with_items of this ArgoDAGTask.


        :param with_items: The with_items of this ArgoDAGTask.  # noqa: E501
        :type: list[object]
        """

        self._with_items = with_items

    @property
    def with_param(self):
        """Gets the with_param of this ArgoDAGTask.  # noqa: E501


        :return: The with_param of this ArgoDAGTask.  # noqa: E501
        :rtype: str
        """
        return self._with_param

    @with_param.setter
    def with_param(self, with_param):
        """Sets the with_param of this ArgoDAGTask.


        :param with_param: The with_param of this ArgoDAGTask.  # noqa: E501
        :type: str
        """

        self._with_param = with_param

    @property
    def dependencies(self):
        """Gets the dependencies of this ArgoDAGTask.  # noqa: E501


        :return: The dependencies of this ArgoDAGTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ArgoDAGTask.


        :param dependencies: The dependencies of this ArgoDAGTask.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArgoDAGTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArgoDAGTask):
            return True

        return self.to_dict() != other.to_dict()
