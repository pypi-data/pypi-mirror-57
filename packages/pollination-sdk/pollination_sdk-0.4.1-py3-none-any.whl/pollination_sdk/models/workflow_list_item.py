# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class WorkflowListItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'workflow_ref': 'ReferenceWorkflow',
        'inputs': 'Arguments',
        'phase': 'str',
        'completed': 'bool',
        'started_at': 'datetime',
        'self_link': 'str',
        'status': 'ArgoStatus',
        'finished_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'workflow_ref': 'workflow_ref',
        'inputs': 'inputs',
        'phase': 'phase',
        'completed': 'completed',
        'started_at': 'started_at',
        'self_link': 'self_link',
        'status': 'status',
        'finished_at': 'finished_at'
    }

    def __init__(self, id=None, workflow_ref=None, inputs=None, phase=None, completed=None, started_at=None, self_link=None, status=None, finished_at=None, local_vars_configuration=None):  # noqa: E501
        """WorkflowListItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._workflow_ref = None
        self._inputs = None
        self._phase = None
        self._completed = None
        self._started_at = None
        self._self_link = None
        self._status = None
        self._finished_at = None
        self.discriminator = None

        self.id = id
        self.workflow_ref = workflow_ref
        self.inputs = inputs
        self.phase = phase
        self.completed = completed
        self.started_at = started_at
        self.self_link = self_link
        if status is not None:
            self.status = status
        if finished_at is not None:
            self.finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this WorkflowListItem.  # noqa: E501


        :return: The id of this WorkflowListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowListItem.


        :param id: The id of this WorkflowListItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def workflow_ref(self):
        """Gets the workflow_ref of this WorkflowListItem.  # noqa: E501


        :return: The workflow_ref of this WorkflowListItem.  # noqa: E501
        :rtype: ReferenceWorkflow
        """
        return self._workflow_ref

    @workflow_ref.setter
    def workflow_ref(self, workflow_ref):
        """Sets the workflow_ref of this WorkflowListItem.


        :param workflow_ref: The workflow_ref of this WorkflowListItem.  # noqa: E501
        :type: ReferenceWorkflow
        """
        if self.local_vars_configuration.client_side_validation and workflow_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `workflow_ref`, must not be `None`")  # noqa: E501

        self._workflow_ref = workflow_ref

    @property
    def inputs(self):
        """Gets the inputs of this WorkflowListItem.  # noqa: E501


        :return: The inputs of this WorkflowListItem.  # noqa: E501
        :rtype: Arguments
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this WorkflowListItem.


        :param inputs: The inputs of this WorkflowListItem.  # noqa: E501
        :type: Arguments
        """
        if self.local_vars_configuration.client_side_validation and inputs is None:  # noqa: E501
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def phase(self):
        """Gets the phase of this WorkflowListItem.  # noqa: E501


        :return: The phase of this WorkflowListItem.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this WorkflowListItem.


        :param phase: The phase of this WorkflowListItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and phase is None:  # noqa: E501
            raise ValueError("Invalid value for `phase`, must not be `None`")  # noqa: E501

        self._phase = phase

    @property
    def completed(self):
        """Gets the completed of this WorkflowListItem.  # noqa: E501


        :return: The completed of this WorkflowListItem.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this WorkflowListItem.


        :param completed: The completed of this WorkflowListItem.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and completed is None:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def started_at(self):
        """Gets the started_at of this WorkflowListItem.  # noqa: E501


        :return: The started_at of this WorkflowListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this WorkflowListItem.


        :param started_at: The started_at of this WorkflowListItem.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and started_at is None:  # noqa: E501
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def self_link(self):
        """Gets the self_link of this WorkflowListItem.  # noqa: E501


        :return: The self_link of this WorkflowListItem.  # noqa: E501
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this WorkflowListItem.


        :param self_link: The self_link of this WorkflowListItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and self_link is None:  # noqa: E501
            raise ValueError("Invalid value for `self_link`, must not be `None`")  # noqa: E501

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this WorkflowListItem.  # noqa: E501


        :return: The status of this WorkflowListItem.  # noqa: E501
        :rtype: ArgoStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowListItem.


        :param status: The status of this WorkflowListItem.  # noqa: E501
        :type: ArgoStatus
        """

        self._status = status

    @property
    def finished_at(self):
        """Gets the finished_at of this WorkflowListItem.  # noqa: E501


        :return: The finished_at of this WorkflowListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this WorkflowListItem.


        :param finished_at: The finished_at of this WorkflowListItem.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowListItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowListItem):
            return True

        return self.to_dict() != other.to_dict()
