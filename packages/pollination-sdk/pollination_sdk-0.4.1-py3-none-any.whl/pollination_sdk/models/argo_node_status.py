# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class ArgoNodeStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'display_name': 'str',
        'type': 'str',
        'template_name': 'str',
        'template_ref': 'ArgoTemplateRef',
        'stored_template_id': 'str',
        'workflow_template_name': 'str',
        'phase': 'str',
        'boundary_id': 'str',
        'message': 'str',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'pod_ip': 'str',
        'daemoned': 'str',
        'inputs': 'ArgoArguments',
        'outputs': 'ArgoOutputs',
        'children': 'list[str]',
        'outbound_nodes': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'displayName',
        'type': 'type',
        'template_name': 'templateName',
        'template_ref': 'templateRef',
        'stored_template_id': 'storedTemplateID',
        'workflow_template_name': 'workflowTemplateName',
        'phase': 'phase',
        'boundary_id': 'boundaryID',
        'message': 'message',
        'started_at': 'startedAt',
        'finished_at': 'finishedAt',
        'pod_ip': 'podIP',
        'daemoned': 'daemoned',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'children': 'children',
        'outbound_nodes': 'outboundNodes'
    }

    def __init__(self, id=None, name=None, display_name=None, type=None, template_name=None, template_ref=None, stored_template_id=None, workflow_template_name=None, phase=None, boundary_id=None, message=None, started_at=None, finished_at=None, pod_ip=None, daemoned=None, inputs=None, outputs=None, children=[], outbound_nodes=[], local_vars_configuration=None):  # noqa: E501
        """ArgoNodeStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._display_name = None
        self._type = None
        self._template_name = None
        self._template_ref = None
        self._stored_template_id = None
        self._workflow_template_name = None
        self._phase = None
        self._boundary_id = None
        self._message = None
        self._started_at = None
        self._finished_at = None
        self._pod_ip = None
        self._daemoned = None
        self._inputs = None
        self._outputs = None
        self._children = None
        self._outbound_nodes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if type is not None:
            self.type = type
        if template_name is not None:
            self.template_name = template_name
        if template_ref is not None:
            self.template_ref = template_ref
        if stored_template_id is not None:
            self.stored_template_id = stored_template_id
        if workflow_template_name is not None:
            self.workflow_template_name = workflow_template_name
        if phase is not None:
            self.phase = phase
        if boundary_id is not None:
            self.boundary_id = boundary_id
        if message is not None:
            self.message = message
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if pod_ip is not None:
            self.pod_ip = pod_ip
        if daemoned is not None:
            self.daemoned = daemoned
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if children is not None:
            self.children = children
        if outbound_nodes is not None:
            self.outbound_nodes = outbound_nodes

    @property
    def id(self):
        """Gets the id of this ArgoNodeStatus.  # noqa: E501


        :return: The id of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArgoNodeStatus.


        :param id: The id of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ArgoNodeStatus.  # noqa: E501


        :return: The name of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArgoNodeStatus.


        :param name: The name of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ArgoNodeStatus.  # noqa: E501


        :return: The display_name of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ArgoNodeStatus.


        :param display_name: The display_name of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this ArgoNodeStatus.  # noqa: E501


        :return: The type of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArgoNodeStatus.


        :param type: The type of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def template_name(self):
        """Gets the template_name of this ArgoNodeStatus.  # noqa: E501


        :return: The template_name of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this ArgoNodeStatus.


        :param template_name: The template_name of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def template_ref(self):
        """Gets the template_ref of this ArgoNodeStatus.  # noqa: E501


        :return: The template_ref of this ArgoNodeStatus.  # noqa: E501
        :rtype: ArgoTemplateRef
        """
        return self._template_ref

    @template_ref.setter
    def template_ref(self, template_ref):
        """Sets the template_ref of this ArgoNodeStatus.


        :param template_ref: The template_ref of this ArgoNodeStatus.  # noqa: E501
        :type: ArgoTemplateRef
        """

        self._template_ref = template_ref

    @property
    def stored_template_id(self):
        """Gets the stored_template_id of this ArgoNodeStatus.  # noqa: E501


        :return: The stored_template_id of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._stored_template_id

    @stored_template_id.setter
    def stored_template_id(self, stored_template_id):
        """Sets the stored_template_id of this ArgoNodeStatus.


        :param stored_template_id: The stored_template_id of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._stored_template_id = stored_template_id

    @property
    def workflow_template_name(self):
        """Gets the workflow_template_name of this ArgoNodeStatus.  # noqa: E501


        :return: The workflow_template_name of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._workflow_template_name

    @workflow_template_name.setter
    def workflow_template_name(self, workflow_template_name):
        """Sets the workflow_template_name of this ArgoNodeStatus.


        :param workflow_template_name: The workflow_template_name of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._workflow_template_name = workflow_template_name

    @property
    def phase(self):
        """Gets the phase of this ArgoNodeStatus.  # noqa: E501


        :return: The phase of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ArgoNodeStatus.


        :param phase: The phase of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def boundary_id(self):
        """Gets the boundary_id of this ArgoNodeStatus.  # noqa: E501


        :return: The boundary_id of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this ArgoNodeStatus.


        :param boundary_id: The boundary_id of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def message(self):
        """Gets the message of this ArgoNodeStatus.  # noqa: E501


        :return: The message of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ArgoNodeStatus.


        :param message: The message of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def started_at(self):
        """Gets the started_at of this ArgoNodeStatus.  # noqa: E501


        :return: The started_at of this ArgoNodeStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ArgoNodeStatus.


        :param started_at: The started_at of this ArgoNodeStatus.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this ArgoNodeStatus.  # noqa: E501


        :return: The finished_at of this ArgoNodeStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ArgoNodeStatus.


        :param finished_at: The finished_at of this ArgoNodeStatus.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def pod_ip(self):
        """Gets the pod_ip of this ArgoNodeStatus.  # noqa: E501


        :return: The pod_ip of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._pod_ip

    @pod_ip.setter
    def pod_ip(self, pod_ip):
        """Sets the pod_ip of this ArgoNodeStatus.


        :param pod_ip: The pod_ip of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._pod_ip = pod_ip

    @property
    def daemoned(self):
        """Gets the daemoned of this ArgoNodeStatus.  # noqa: E501


        :return: The daemoned of this ArgoNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._daemoned

    @daemoned.setter
    def daemoned(self, daemoned):
        """Sets the daemoned of this ArgoNodeStatus.


        :param daemoned: The daemoned of this ArgoNodeStatus.  # noqa: E501
        :type: str
        """

        self._daemoned = daemoned

    @property
    def inputs(self):
        """Gets the inputs of this ArgoNodeStatus.  # noqa: E501


        :return: The inputs of this ArgoNodeStatus.  # noqa: E501
        :rtype: ArgoArguments
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ArgoNodeStatus.


        :param inputs: The inputs of this ArgoNodeStatus.  # noqa: E501
        :type: ArgoArguments
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this ArgoNodeStatus.  # noqa: E501


        :return: The outputs of this ArgoNodeStatus.  # noqa: E501
        :rtype: ArgoOutputs
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ArgoNodeStatus.


        :param outputs: The outputs of this ArgoNodeStatus.  # noqa: E501
        :type: ArgoOutputs
        """

        self._outputs = outputs

    @property
    def children(self):
        """Gets the children of this ArgoNodeStatus.  # noqa: E501


        :return: The children of this ArgoNodeStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ArgoNodeStatus.


        :param children: The children of this ArgoNodeStatus.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    @property
    def outbound_nodes(self):
        """Gets the outbound_nodes of this ArgoNodeStatus.  # noqa: E501


        :return: The outbound_nodes of this ArgoNodeStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._outbound_nodes

    @outbound_nodes.setter
    def outbound_nodes(self, outbound_nodes):
        """Sets the outbound_nodes of this ArgoNodeStatus.


        :param outbound_nodes: The outbound_nodes of this ArgoNodeStatus.  # noqa: E501
        :type: list[str]
        """

        self._outbound_nodes = outbound_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArgoNodeStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArgoNodeStatus):
            return True

        return self.to_dict() != other.to_dict()
