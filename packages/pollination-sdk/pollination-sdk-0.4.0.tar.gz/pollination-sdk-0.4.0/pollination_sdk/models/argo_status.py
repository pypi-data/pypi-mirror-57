# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class ArgoStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'phase': 'str',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'message': 'str',
        'compressed_nodes': 'str',
        'nodes': 'dict(str, ArgoNodeStatus)',
        'stored_templates': 'dict(str, ArgoTemplate)',
        'persistent_volume_claims': 'list[object]',
        'outputs': 'ArgoOutputs'
    }

    attribute_map = {
        'phase': 'phase',
        'started_at': 'startedAt',
        'finished_at': 'finishedAt',
        'message': 'message',
        'compressed_nodes': 'compressedNodes',
        'nodes': 'nodes',
        'stored_templates': 'storedTemplates',
        'persistent_volume_claims': 'persistentVolumeClaims',
        'outputs': 'outputs'
    }

    def __init__(self, phase=None, started_at=None, finished_at=None, message=None, compressed_nodes=None, nodes=None, stored_templates=None, persistent_volume_claims=[], outputs=None, local_vars_configuration=None):  # noqa: E501
        """ArgoStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._phase = None
        self._started_at = None
        self._finished_at = None
        self._message = None
        self._compressed_nodes = None
        self._nodes = None
        self._stored_templates = None
        self._persistent_volume_claims = None
        self._outputs = None
        self.discriminator = None

        if phase is not None:
            self.phase = phase
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if message is not None:
            self.message = message
        if compressed_nodes is not None:
            self.compressed_nodes = compressed_nodes
        if nodes is not None:
            self.nodes = nodes
        if stored_templates is not None:
            self.stored_templates = stored_templates
        if persistent_volume_claims is not None:
            self.persistent_volume_claims = persistent_volume_claims
        if outputs is not None:
            self.outputs = outputs

    @property
    def phase(self):
        """Gets the phase of this ArgoStatus.  # noqa: E501


        :return: The phase of this ArgoStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this ArgoStatus.


        :param phase: The phase of this ArgoStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def started_at(self):
        """Gets the started_at of this ArgoStatus.  # noqa: E501


        :return: The started_at of this ArgoStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ArgoStatus.


        :param started_at: The started_at of this ArgoStatus.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this ArgoStatus.  # noqa: E501


        :return: The finished_at of this ArgoStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ArgoStatus.


        :param finished_at: The finished_at of this ArgoStatus.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def message(self):
        """Gets the message of this ArgoStatus.  # noqa: E501


        :return: The message of this ArgoStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ArgoStatus.


        :param message: The message of this ArgoStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def compressed_nodes(self):
        """Gets the compressed_nodes of this ArgoStatus.  # noqa: E501


        :return: The compressed_nodes of this ArgoStatus.  # noqa: E501
        :rtype: str
        """
        return self._compressed_nodes

    @compressed_nodes.setter
    def compressed_nodes(self, compressed_nodes):
        """Sets the compressed_nodes of this ArgoStatus.


        :param compressed_nodes: The compressed_nodes of this ArgoStatus.  # noqa: E501
        :type: str
        """

        self._compressed_nodes = compressed_nodes

    @property
    def nodes(self):
        """Gets the nodes of this ArgoStatus.  # noqa: E501


        :return: The nodes of this ArgoStatus.  # noqa: E501
        :rtype: dict(str, ArgoNodeStatus)
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this ArgoStatus.


        :param nodes: The nodes of this ArgoStatus.  # noqa: E501
        :type: dict(str, ArgoNodeStatus)
        """

        self._nodes = nodes

    @property
    def stored_templates(self):
        """Gets the stored_templates of this ArgoStatus.  # noqa: E501


        :return: The stored_templates of this ArgoStatus.  # noqa: E501
        :rtype: dict(str, ArgoTemplate)
        """
        return self._stored_templates

    @stored_templates.setter
    def stored_templates(self, stored_templates):
        """Sets the stored_templates of this ArgoStatus.


        :param stored_templates: The stored_templates of this ArgoStatus.  # noqa: E501
        :type: dict(str, ArgoTemplate)
        """

        self._stored_templates = stored_templates

    @property
    def persistent_volume_claims(self):
        """Gets the persistent_volume_claims of this ArgoStatus.  # noqa: E501


        :return: The persistent_volume_claims of this ArgoStatus.  # noqa: E501
        :rtype: list[object]
        """
        return self._persistent_volume_claims

    @persistent_volume_claims.setter
    def persistent_volume_claims(self, persistent_volume_claims):
        """Sets the persistent_volume_claims of this ArgoStatus.


        :param persistent_volume_claims: The persistent_volume_claims of this ArgoStatus.  # noqa: E501
        :type: list[object]
        """

        self._persistent_volume_claims = persistent_volume_claims

    @property
    def outputs(self):
        """Gets the outputs of this ArgoStatus.  # noqa: E501


        :return: The outputs of this ArgoStatus.  # noqa: E501
        :rtype: ArgoOutputs
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ArgoStatus.


        :param outputs: The outputs of this ArgoStatus.  # noqa: E501
        :type: ArgoOutputs
        """

        self._outputs = outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArgoStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArgoStatus):
            return True

        return self.to_dict() != other.to_dict()
