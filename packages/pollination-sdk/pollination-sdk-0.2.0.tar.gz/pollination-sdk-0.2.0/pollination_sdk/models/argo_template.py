# coding: utf-8

"""
    pollination.cloud

    Pollination Cloud API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class ArgoTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'template': 'str',
        'arguments': 'ArgoArguments',
        'template_ref': 'ArgoTemplateRef',
        'inputs': 'ArgoArguments',
        'outputs': 'ArgoOutputs',
        'daemon': 'bool',
        'steps': 'list[ArgoStep]',
        'container': 'ArgoTaskContainer',
        'dag': 'ArgoDAG',
        'suspend': 'ArgoSuspend',
        'archive_location': 'ArgoArchiveLocation',
        'active_deadline_seconds': 'int',
        'retry_strategy': 'ArgoRetryStrategy',
        'parallelism': 'int',
        'service_account_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'template': 'template',
        'arguments': 'arguments',
        'template_ref': 'templateRef',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'daemon': 'daemon',
        'steps': 'steps',
        'container': 'container',
        'dag': 'dag',
        'suspend': 'suspend',
        'archive_location': 'archiveLocation',
        'active_deadline_seconds': 'activeDeadlineSeconds',
        'retry_strategy': 'retryStrategy',
        'parallelism': 'parallelism',
        'service_account_name': 'serviceAccountName'
    }

    def __init__(self, name=None, template=None, arguments=None, template_ref=None, inputs=None, outputs=None, daemon=None, steps=None, container=None, dag=None, suspend=None, archive_location=None, active_deadline_seconds=None, retry_strategy=None, parallelism=None, service_account_name=None, local_vars_configuration=None):  # noqa: E501
        """ArgoTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._template = None
        self._arguments = None
        self._template_ref = None
        self._inputs = None
        self._outputs = None
        self._daemon = None
        self._steps = None
        self._container = None
        self._dag = None
        self._suspend = None
        self._archive_location = None
        self._active_deadline_seconds = None
        self._retry_strategy = None
        self._parallelism = None
        self._service_account_name = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if template is not None:
            self.template = template
        if arguments is not None:
            self.arguments = arguments
        if template_ref is not None:
            self.template_ref = template_ref
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if daemon is not None:
            self.daemon = daemon
        if steps is not None:
            self.steps = steps
        if container is not None:
            self.container = container
        if dag is not None:
            self.dag = dag
        if suspend is not None:
            self.suspend = suspend
        if archive_location is not None:
            self.archive_location = archive_location
        if active_deadline_seconds is not None:
            self.active_deadline_seconds = active_deadline_seconds
        if retry_strategy is not None:
            self.retry_strategy = retry_strategy
        if parallelism is not None:
            self.parallelism = parallelism
        if service_account_name is not None:
            self.service_account_name = service_account_name

    @property
    def name(self):
        """Gets the name of this ArgoTemplate.  # noqa: E501


        :return: The name of this ArgoTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArgoTemplate.


        :param name: The name of this ArgoTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def template(self):
        """Gets the template of this ArgoTemplate.  # noqa: E501


        :return: The template of this ArgoTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ArgoTemplate.


        :param template: The template of this ArgoTemplate.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def arguments(self):
        """Gets the arguments of this ArgoTemplate.  # noqa: E501


        :return: The arguments of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoArguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ArgoTemplate.


        :param arguments: The arguments of this ArgoTemplate.  # noqa: E501
        :type: ArgoArguments
        """

        self._arguments = arguments

    @property
    def template_ref(self):
        """Gets the template_ref of this ArgoTemplate.  # noqa: E501


        :return: The template_ref of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoTemplateRef
        """
        return self._template_ref

    @template_ref.setter
    def template_ref(self, template_ref):
        """Sets the template_ref of this ArgoTemplate.


        :param template_ref: The template_ref of this ArgoTemplate.  # noqa: E501
        :type: ArgoTemplateRef
        """

        self._template_ref = template_ref

    @property
    def inputs(self):
        """Gets the inputs of this ArgoTemplate.  # noqa: E501


        :return: The inputs of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoArguments
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ArgoTemplate.


        :param inputs: The inputs of this ArgoTemplate.  # noqa: E501
        :type: ArgoArguments
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this ArgoTemplate.  # noqa: E501


        :return: The outputs of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoOutputs
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ArgoTemplate.


        :param outputs: The outputs of this ArgoTemplate.  # noqa: E501
        :type: ArgoOutputs
        """

        self._outputs = outputs

    @property
    def daemon(self):
        """Gets the daemon of this ArgoTemplate.  # noqa: E501


        :return: The daemon of this ArgoTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._daemon

    @daemon.setter
    def daemon(self, daemon):
        """Sets the daemon of this ArgoTemplate.


        :param daemon: The daemon of this ArgoTemplate.  # noqa: E501
        :type: bool
        """

        self._daemon = daemon

    @property
    def steps(self):
        """Gets the steps of this ArgoTemplate.  # noqa: E501


        :return: The steps of this ArgoTemplate.  # noqa: E501
        :rtype: list[ArgoStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ArgoTemplate.


        :param steps: The steps of this ArgoTemplate.  # noqa: E501
        :type: list[ArgoStep]
        """

        self._steps = steps

    @property
    def container(self):
        """Gets the container of this ArgoTemplate.  # noqa: E501


        :return: The container of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoTaskContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ArgoTemplate.


        :param container: The container of this ArgoTemplate.  # noqa: E501
        :type: ArgoTaskContainer
        """

        self._container = container

    @property
    def dag(self):
        """Gets the dag of this ArgoTemplate.  # noqa: E501


        :return: The dag of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoDAG
        """
        return self._dag

    @dag.setter
    def dag(self, dag):
        """Sets the dag of this ArgoTemplate.


        :param dag: The dag of this ArgoTemplate.  # noqa: E501
        :type: ArgoDAG
        """

        self._dag = dag

    @property
    def suspend(self):
        """Gets the suspend of this ArgoTemplate.  # noqa: E501


        :return: The suspend of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoSuspend
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this ArgoTemplate.


        :param suspend: The suspend of this ArgoTemplate.  # noqa: E501
        :type: ArgoSuspend
        """

        self._suspend = suspend

    @property
    def archive_location(self):
        """Gets the archive_location of this ArgoTemplate.  # noqa: E501


        :return: The archive_location of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoArchiveLocation
        """
        return self._archive_location

    @archive_location.setter
    def archive_location(self, archive_location):
        """Sets the archive_location of this ArgoTemplate.


        :param archive_location: The archive_location of this ArgoTemplate.  # noqa: E501
        :type: ArgoArchiveLocation
        """

        self._archive_location = archive_location

    @property
    def active_deadline_seconds(self):
        """Gets the active_deadline_seconds of this ArgoTemplate.  # noqa: E501


        :return: The active_deadline_seconds of this ArgoTemplate.  # noqa: E501
        :rtype: int
        """
        return self._active_deadline_seconds

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, active_deadline_seconds):
        """Sets the active_deadline_seconds of this ArgoTemplate.


        :param active_deadline_seconds: The active_deadline_seconds of this ArgoTemplate.  # noqa: E501
        :type: int
        """

        self._active_deadline_seconds = active_deadline_seconds

    @property
    def retry_strategy(self):
        """Gets the retry_strategy of this ArgoTemplate.  # noqa: E501


        :return: The retry_strategy of this ArgoTemplate.  # noqa: E501
        :rtype: ArgoRetryStrategy
        """
        return self._retry_strategy

    @retry_strategy.setter
    def retry_strategy(self, retry_strategy):
        """Sets the retry_strategy of this ArgoTemplate.


        :param retry_strategy: The retry_strategy of this ArgoTemplate.  # noqa: E501
        :type: ArgoRetryStrategy
        """

        self._retry_strategy = retry_strategy

    @property
    def parallelism(self):
        """Gets the parallelism of this ArgoTemplate.  # noqa: E501


        :return: The parallelism of this ArgoTemplate.  # noqa: E501
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this ArgoTemplate.


        :param parallelism: The parallelism of this ArgoTemplate.  # noqa: E501
        :type: int
        """

        self._parallelism = parallelism

    @property
    def service_account_name(self):
        """Gets the service_account_name of this ArgoTemplate.  # noqa: E501


        :return: The service_account_name of this ArgoTemplate.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this ArgoTemplate.


        :param service_account_name: The service_account_name of this ArgoTemplate.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArgoTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArgoTemplate):
            return True

        return self.to_dict() != other.to_dict()
