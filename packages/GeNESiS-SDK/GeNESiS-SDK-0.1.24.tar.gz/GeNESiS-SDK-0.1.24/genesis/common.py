# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _common
else:
    import _common

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _common.SWIG_PyInstanceMethod_New
_swig_new_static_method = _common.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_SwigPyIterator
    value = _swig_new_instance_method(_common.SwigPyIterator_value)
    incr = _swig_new_instance_method(_common.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_common.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_common.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_common.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_common.SwigPyIterator_copy)
    next = _swig_new_instance_method(_common.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_common.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_common.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_common.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_common.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_common.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_common.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_common.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_common.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_common.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _common:
_common.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _common.SHARED_PTR_DISOWN
BOOST_LOG_DYN_LINK = _common.BOOST_LOG_DYN_LINK
class Communication(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = _swig_new_static_method(_common.Communication_get)
    __swig_destroy__ = _common.delete_Communication
    get_p2p_channel = _swig_new_instance_method(_common.Communication_get_p2p_channel)
    register_p2p_communication = _swig_new_instance_method(_common.Communication_register_p2p_communication)
    safe_barrier = _swig_new_instance_method(_common.Communication_safe_barrier)
    update_communicators = _swig_new_instance_method(_common.Communication_update_communicators)
    mpiSupport = property(_common.Communication_mpiSupport_get, _common.Communication_mpiSupport_set)
    rank = property(_common.Communication_rank_get, _common.Communication_rank_set)
    ranksCount = property(_common.Communication_ranksCount_get, _common.Communication_ranksCount_set)
    hosts = property(_common.Communication_hosts_get, _common.Communication_hosts_set)

# Register Communication in _common:
_common.Communication_swigregister(Communication)
Communication_get = _common.Communication_get

LOG_OUTPUT_FILE = _common.LOG_OUTPUT_FILE
LOG_DEBUG_FILE = _common.LOG_DEBUG_FILE
DEFAULT_DEBUG_ENABLED = _common.DEFAULT_DEBUG_ENABLED
LogSeverity_DEBUG = _common.LogSeverity_DEBUG
LogSeverity_MESSAGE = _common.LogSeverity_MESSAGE
LogSeverity_WARNING = _common.LogSeverity_WARNING
LogSeverity_ERROR = _common.LogSeverity_ERROR
LogSeverity_FATAL = _common.LogSeverity_FATAL
LogSeverity_EXTERNAL = _common.LogSeverity_EXTERNAL
LogPriority_LOW = _common.LogPriority_LOW
LogPriority_MEDIUM = _common.LogPriority_MEDIUM
LogPriority_HIGH = _common.LogPriority_HIGH
class Log(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    priority0_lg = property(_common.Log_priority0_lg_get, _common.Log_priority0_lg_set)
    priority1_lg = property(_common.Log_priority1_lg_get, _common.Log_priority1_lg_set)
    priority2_lg = property(_common.Log_priority2_lg_get, _common.Log_priority2_lg_set)
    error_lg = property(_common.Log_error_lg_get, _common.Log_error_lg_set)
    fatal_lg = property(_common.Log_fatal_lg_get, _common.Log_fatal_lg_set)
    output_min_severity = property(_common.Log_output_min_severity_get, _common.Log_output_min_severity_set)
    output_min_priority = property(_common.Log_output_min_priority_get, _common.Log_output_min_priority_set)
    debug_min_severity = property(_common.Log_debug_min_severity_get, _common.Log_debug_min_severity_set)
    debug_min_priority = property(_common.Log_debug_min_priority_get, _common.Log_debug_min_priority_set)
    debug_enabled = property(_common.Log_debug_enabled_get, _common.Log_debug_enabled_set)
    get = _swig_new_static_method(_common.Log_get)
    flush = _swig_new_instance_method(_common.Log_flush)
    __swig_destroy__ = _common.delete_Log

# Register Log in _common:
_common.Log_swigregister(Log)
cvar = _common.cvar
Log_get = _common.Log_get

class Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Parameters:
            _self = None
        else:
            _self = self
        _common.Parameters_swiginit(self, _common.new_Parameters(_self, ))
    __swig_destroy__ = _common.delete_Parameters
    dereference = _swig_new_static_method(_common.Parameters_dereference)
    get_shared = _swig_new_static_method(_common.Parameters_get_shared)
    load = _swig_new_instance_method(_common.Parameters_load)
    get_values = _swig_new_instance_method(_common.Parameters_get_values)
    tree = property(_common.Parameters_tree_get, _common.Parameters_tree_set)
    map = property(_common.Parameters_map_get, _common.Parameters_map_set)
    def __disown__(self):
        self.this.disown()
        _common.disown_Parameters(self)
        return weakref.proxy(self)

# Register Parameters in _common:
_common.Parameters_swigregister(Parameters)
Parameters_dereference = _common.Parameters_dereference
Parameters_get_shared = _common.Parameters_get_shared

class Scheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _common.Scheme_swiginit(self, _common.new_Scheme())
    __swig_destroy__ = _common.delete_Scheme
    validate = _swig_new_instance_method(_common.Scheme_validate)
    load = _swig_new_instance_method(_common.Scheme_load)
    filter = _swig_new_instance_method(_common.Scheme_filter)
    include = _swig_new_instance_method(_common.Scheme_include)
    name = property(_common.Scheme_name_get, _common.Scheme_name_set)
    get_rules = _swig_new_instance_method(_common.Scheme_get_rules)

# Register Scheme in _common:
_common.Scheme_swigregister(Scheme)
SCHEMES_GROUP = cvar.SCHEMES_GROUP
SCHEMES_BASE = cvar.SCHEMES_BASE
SCHEMES_PARAM = cvar.SCHEMES_PARAM
SCHEMES_CLASS = cvar.SCHEMES_CLASS
SCHEMES_ROOT = cvar.SCHEMES_ROOT
SCHEMES_CAPTION = cvar.SCHEMES_CAPTION
SCHEMES_TYPE = cvar.SCHEMES_TYPE
SCHEMES_DEFAULT = cvar.SCHEMES_DEFAULT
SCHEMES_DESCRIPION = cvar.SCHEMES_DESCRIPION
SCHEMES_TYPE_FILE = cvar.SCHEMES_TYPE_FILE
SCHEMES_TYPE_INT = cvar.SCHEMES_TYPE_INT
SCHEMES_TYPE_FLOAT = cvar.SCHEMES_TYPE_FLOAT
SCHEMES_TYPE_ARRAY = cvar.SCHEMES_TYPE_ARRAY

METADATA_VAR = _common.METADATA_VAR
GENESIS_LOCATION = _common.GENESIS_LOCATION
class BaseClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_BaseClass
    gen_scheme = _swig_new_static_method(_common.BaseClass_gen_scheme)

    def __init__(self):
        if self.__class__ == BaseClass:
            _self = None
        else:
            _self = self
        _common.BaseClass_swiginit(self, _common.new_BaseClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _common.disown_BaseClass(self)
        return weakref.proxy(self)

# Register BaseClass in _common:
_common.BaseClass_swigregister(BaseClass)
BaseClass_gen_scheme = _common.BaseClass_gen_scheme

class exception_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.exception_base_what)

    def __init__(self):
        _common.exception_base_swiginit(self, _common.new_exception_base())
    __swig_destroy__ = _common.delete_exception_base

# Register exception_base in _common:
_common.exception_base_swigregister(exception_base)

class outofdomain_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.outofdomain_error_what)

    def __init__(self):
        _common.outofdomain_error_swiginit(self, _common.new_outofdomain_error())
    __swig_destroy__ = _common.delete_outofdomain_error

# Register outofdomain_error in _common:
_common.outofdomain_error_swigregister(outofdomain_error)

class inconsistency_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.inconsistency_error_what)

    def __init__(self):
        _common.inconsistency_error_swiginit(self, _common.new_inconsistency_error())
    __swig_destroy__ = _common.delete_inconsistency_error

# Register inconsistency_error in _common:
_common.inconsistency_error_swigregister(inconsistency_error)

class param_value_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.param_value_error_what)

    def __init__(self):
        _common.param_value_error_swiginit(self, _common.new_param_value_error())
    __swig_destroy__ = _common.delete_param_value_error

# Register param_value_error in _common:
_common.param_value_error_swigregister(param_value_error)

class status_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.status_error_what)

    def __init__(self):
        _common.status_error_swiginit(self, _common.new_status_error())
    __swig_destroy__ = _common.delete_status_error

# Register status_error in _common:
_common.status_error_swigregister(status_error)

class flow_control_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.flow_control_error_what)

    def __init__(self):
        _common.flow_control_error_swiginit(self, _common.new_flow_control_error())
    __swig_destroy__ = _common.delete_flow_control_error

# Register flow_control_error in _common:
_common.flow_control_error_swigregister(flow_control_error)

class malformed_record(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.malformed_record_what)

    def __init__(self):
        _common.malformed_record_swiginit(self, _common.new_malformed_record())
    __swig_destroy__ = _common.delete_malformed_record

# Register malformed_record in _common:
_common.malformed_record_swigregister(malformed_record)

class unsupported_feature(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.unsupported_feature_what)

    def __init__(self):
        _common.unsupported_feature_swiginit(self, _common.new_unsupported_feature())
    __swig_destroy__ = _common.delete_unsupported_feature

# Register unsupported_feature in _common:
_common.unsupported_feature_swigregister(unsupported_feature)

class factory_unknown_type(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.factory_unknown_type_what)

    def __init__(self):
        _common.factory_unknown_type_swiginit(self, _common.new_factory_unknown_type())
    __swig_destroy__ = _common.delete_factory_unknown_type

# Register factory_unknown_type in _common:
_common.factory_unknown_type_swigregister(factory_unknown_type)

class wrong_behaviour(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.wrong_behaviour_what)

    def __init__(self):
        _common.wrong_behaviour_swiginit(self, _common.new_wrong_behaviour())
    __swig_destroy__ = _common.delete_wrong_behaviour

# Register wrong_behaviour in _common:
_common.wrong_behaviour_swigregister(wrong_behaviour)

class unexpected_instance_type(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.unexpected_instance_type_what)

    def __init__(self):
        _common.unexpected_instance_type_swiginit(self, _common.new_unexpected_instance_type())
    __swig_destroy__ = _common.delete_unexpected_instance_type

# Register unexpected_instance_type in _common:
_common.unexpected_instance_type_swigregister(unexpected_instance_type)

class unprovided_artifact(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.unprovided_artifact_what)

    def __init__(self):
        _common.unprovided_artifact_swiginit(self, _common.new_unprovided_artifact())
    __swig_destroy__ = _common.delete_unprovided_artifact

# Register unprovided_artifact in _common:
_common.unprovided_artifact_swigregister(unprovided_artifact)

class incomplete_metadata(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.incomplete_metadata_what)

    def __init__(self):
        _common.incomplete_metadata_swiginit(self, _common.new_incomplete_metadata())
    __swig_destroy__ = _common.delete_incomplete_metadata

# Register incomplete_metadata in _common:
_common.incomplete_metadata_swigregister(incomplete_metadata)

class internal_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.internal_error_what)

    def __init__(self):
        _common.internal_error_swiginit(self, _common.new_internal_error())
    __swig_destroy__ = _common.delete_internal_error

# Register internal_error in _common:
_common.internal_error_swigregister(internal_error)

class incompatible_solver(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.incompatible_solver_what)

    def __init__(self):
        _common.incompatible_solver_swiginit(self, _common.new_incompatible_solver())
    __swig_destroy__ = _common.delete_incompatible_solver

# Register incompatible_solver in _common:
_common.incompatible_solver_swigregister(incompatible_solver)

class invalid_mpi_thread_support(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.invalid_mpi_thread_support_what)

    def __init__(self):
        _common.invalid_mpi_thread_support_swiginit(self, _common.new_invalid_mpi_thread_support())
    __swig_destroy__ = _common.delete_invalid_mpi_thread_support

# Register invalid_mpi_thread_support in _common:
_common.invalid_mpi_thread_support_swigregister(invalid_mpi_thread_support)

class unsupported_multi_threading(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.unsupported_multi_threading_what)

    def __init__(self):
        _common.unsupported_multi_threading_swiginit(self, _common.new_unsupported_multi_threading())
    __swig_destroy__ = _common.delete_unsupported_multi_threading

# Register unsupported_multi_threading in _common:
_common.unsupported_multi_threading_swigregister(unsupported_multi_threading)

class parameters_validation_failed(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.parameters_validation_failed_what)

    def __init__(self):
        _common.parameters_validation_failed_swiginit(self, _common.new_parameters_validation_failed())
    __swig_destroy__ = _common.delete_parameters_validation_failed

# Register parameters_validation_failed in _common:
_common.parameters_validation_failed_swigregister(parameters_validation_failed)

class communication_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.communication_error_what)

    def __init__(self):
        _common.communication_error_swiginit(self, _common.new_communication_error())
    __swig_destroy__ = _common.delete_communication_error

# Register communication_error in _common:
_common.communication_error_swigregister(communication_error)

class io_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.io_error_what)

    def __init__(self):
        _common.io_error_swiginit(self, _common.new_io_error())
    __swig_destroy__ = _common.delete_io_error

# Register io_error in _common:
_common.io_error_swigregister(io_error)

class channel_open_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.channel_open_error_what)

    def __init__(self):
        _common.channel_open_error_swiginit(self, _common.new_channel_open_error())
    __swig_destroy__ = _common.delete_channel_open_error

# Register channel_open_error in _common:
_common.channel_open_error_swigregister(channel_open_error)

class channel_write_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.channel_write_error_what)

    def __init__(self):
        _common.channel_write_error_swiginit(self, _common.new_channel_write_error())
    __swig_destroy__ = _common.delete_channel_write_error

# Register channel_write_error in _common:
_common.channel_write_error_swigregister(channel_write_error)

class channel_closed_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.channel_closed_error_what)

    def __init__(self):
        _common.channel_closed_error_swiginit(self, _common.new_channel_closed_error())
    __swig_destroy__ = _common.delete_channel_closed_error

# Register channel_closed_error in _common:
_common.channel_closed_error_swigregister(channel_closed_error)

class channel_closing_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.channel_closing_error_what)

    def __init__(self):
        _common.channel_closing_error_swiginit(self, _common.new_channel_closing_error())
    __swig_destroy__ = _common.delete_channel_closing_error

# Register channel_closing_error in _common:
_common.channel_closing_error_swigregister(channel_closing_error)

class file_open_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.file_open_error_what)

    def __init__(self):
        _common.file_open_error_swiginit(self, _common.new_file_open_error())
    __swig_destroy__ = _common.delete_file_open_error

# Register file_open_error in _common:
_common.file_open_error_swigregister(file_open_error)

class file_format_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.file_format_error_what)

    def __init__(self):
        _common.file_format_error_swiginit(self, _common.new_file_format_error())
    __swig_destroy__ = _common.delete_file_format_error

# Register file_format_error in _common:
_common.file_format_error_swigregister(file_format_error)

class file_read_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.file_read_error_what)

    def __init__(self):
        _common.file_read_error_swiginit(self, _common.new_file_read_error())
    __swig_destroy__ = _common.delete_file_read_error

# Register file_read_error in _common:
_common.file_read_error_swigregister(file_read_error)

class file_write_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_common.file_write_error_what)

    def __init__(self):
        _common.file_write_error_swiginit(self, _common.new_file_write_error())
    __swig_destroy__ = _common.delete_file_write_error

# Register file_write_error in _common:
_common.file_write_error_swigregister(file_write_error)

class CommonTimer(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTimer:
            _self = None
        else:
            _self = self
        _common.CommonTimer_swiginit(self, _common.new_CommonTimer(_self, ))
    __swig_destroy__ = _common.delete_CommonTimer
    get_classname = _swig_new_instance_method(_common.CommonTimer_get_classname)
    get_metadata_path = _swig_new_instance_method(_common.CommonTimer_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_common.CommonTimer_shared_from_this)
    get_shared = _swig_new_static_method(_common.CommonTimer_get_shared)
    type = property(_common.CommonTimer_type_get, _common.CommonTimer_type_set)
    unwrap = _swig_new_static_method(_common.CommonTimer_unwrap)
    dereference = _swig_new_static_method(_common.CommonTimer_dereference)
    get = _swig_new_static_method(_common.CommonTimer_get)
    get_uuid = _swig_new_instance_method(_common.CommonTimer_get_uuid)
    name = property(_common.CommonTimer_name_get, _common.CommonTimer_name_set)
    get_scheme = _swig_new_instance_method(_common.CommonTimer_get_scheme)
    gen_scheme = _swig_new_static_method(_common.CommonTimer_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _common.disown_CommonTimer(self)
        return weakref.proxy(self)

# Register CommonTimer in _common:
_common.CommonTimer_swigregister(CommonTimer)
CommonTimer_get_shared = _common.CommonTimer_get_shared
CommonTimer_unwrap = _common.CommonTimer_unwrap
CommonTimer_dereference = _common.CommonTimer_dereference
CommonTimer_get = _common.CommonTimer_get
CommonTimer_gen_scheme = _common.CommonTimer_gen_scheme

class Timer(CommonTimer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, report=True):
        if self.__class__ == Timer:
            _self = None
        else:
            _self = self
        _common.Timer_swiginit(self, _common.new_Timer(_self, name, report))
    __swig_destroy__ = _common.delete_Timer
    elapsed = _swig_new_instance_method(_common.Timer_elapsed)
    stop = _swig_new_instance_method(_common.Timer_stop)
    start = _swig_new_instance_method(_common.Timer_start)
    resume = _swig_new_instance_method(_common.Timer_resume)
    def __disown__(self):
        self.this.disown()
        _common.disown_Timer(self)
        return weakref.proxy(self)

# Register Timer in _common:
_common.Timer_swigregister(Timer)

class _string_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_common._string_list_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_common._string_list___nonzero__)
    __bool__ = _swig_new_instance_method(_common._string_list___bool__)
    __len__ = _swig_new_instance_method(_common._string_list___len__)
    __getslice__ = _swig_new_instance_method(_common._string_list___getslice__)
    __setslice__ = _swig_new_instance_method(_common._string_list___setslice__)
    __delslice__ = _swig_new_instance_method(_common._string_list___delslice__)
    __delitem__ = _swig_new_instance_method(_common._string_list___delitem__)
    __getitem__ = _swig_new_instance_method(_common._string_list___getitem__)
    __setitem__ = _swig_new_instance_method(_common._string_list___setitem__)
    pop = _swig_new_instance_method(_common._string_list_pop)
    append = _swig_new_instance_method(_common._string_list_append)
    empty = _swig_new_instance_method(_common._string_list_empty)
    size = _swig_new_instance_method(_common._string_list_size)
    swap = _swig_new_instance_method(_common._string_list_swap)
    begin = _swig_new_instance_method(_common._string_list_begin)
    end = _swig_new_instance_method(_common._string_list_end)
    rbegin = _swig_new_instance_method(_common._string_list_rbegin)
    rend = _swig_new_instance_method(_common._string_list_rend)
    clear = _swig_new_instance_method(_common._string_list_clear)
    get_allocator = _swig_new_instance_method(_common._string_list_get_allocator)
    pop_back = _swig_new_instance_method(_common._string_list_pop_back)
    erase = _swig_new_instance_method(_common._string_list_erase)

    def __init__(self, *args):
        _common._string_list_swiginit(self, _common.new__string_list(*args))
    push_back = _swig_new_instance_method(_common._string_list_push_back)
    front = _swig_new_instance_method(_common._string_list_front)
    back = _swig_new_instance_method(_common._string_list_back)
    assign = _swig_new_instance_method(_common._string_list_assign)
    resize = _swig_new_instance_method(_common._string_list_resize)
    insert = _swig_new_instance_method(_common._string_list_insert)
    reserve = _swig_new_instance_method(_common._string_list_reserve)
    capacity = _swig_new_instance_method(_common._string_list_capacity)
    __swig_destroy__ = _common.delete__string_list

# Register _string_list in _common:
_common._string_list_swigregister(_string_list)



