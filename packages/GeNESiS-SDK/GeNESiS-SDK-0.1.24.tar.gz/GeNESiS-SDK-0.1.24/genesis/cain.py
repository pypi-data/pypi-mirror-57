# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cain
else:
    import _cain

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _cain.SWIG_PyInstanceMethod_New
_swig_new_static_method = _cain.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cain.delete_SwigPyIterator
    value = _swig_new_instance_method(_cain.SwigPyIterator_value)
    incr = _swig_new_instance_method(_cain.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_cain.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_cain.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_cain.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_cain.SwigPyIterator_copy)
    next = _swig_new_instance_method(_cain.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_cain.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_cain.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_cain.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_cain.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_cain.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_cain.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_cain.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_cain.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_cain.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cain:
_cain.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _cain.SHARED_PTR_DISOWN
BOOST_LOG_DYN_LINK = _cain.BOOST_LOG_DYN_LINK
class Communication(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = _swig_new_static_method(_cain.Communication_get)
    __swig_destroy__ = _cain.delete_Communication
    get_p2p_channel = _swig_new_instance_method(_cain.Communication_get_p2p_channel)
    register_p2p_communication = _swig_new_instance_method(_cain.Communication_register_p2p_communication)
    safe_barrier = _swig_new_instance_method(_cain.Communication_safe_barrier)
    update_communicators = _swig_new_instance_method(_cain.Communication_update_communicators)
    mpiSupport = property(_cain.Communication_mpiSupport_get, _cain.Communication_mpiSupport_set)
    rank = property(_cain.Communication_rank_get, _cain.Communication_rank_set)
    ranksCount = property(_cain.Communication_ranksCount_get, _cain.Communication_ranksCount_set)
    hosts = property(_cain.Communication_hosts_get, _cain.Communication_hosts_set)

# Register Communication in _cain:
_cain.Communication_swigregister(Communication)
Communication_get = _cain.Communication_get

LOG_OUTPUT_FILE = _cain.LOG_OUTPUT_FILE
LOG_DEBUG_FILE = _cain.LOG_DEBUG_FILE
DEFAULT_DEBUG_ENABLED = _cain.DEFAULT_DEBUG_ENABLED
LogSeverity_DEBUG = _cain.LogSeverity_DEBUG
LogSeverity_MESSAGE = _cain.LogSeverity_MESSAGE
LogSeverity_WARNING = _cain.LogSeverity_WARNING
LogSeverity_ERROR = _cain.LogSeverity_ERROR
LogSeverity_FATAL = _cain.LogSeverity_FATAL
LogSeverity_EXTERNAL = _cain.LogSeverity_EXTERNAL
LogPriority_LOW = _cain.LogPriority_LOW
LogPriority_MEDIUM = _cain.LogPriority_MEDIUM
LogPriority_HIGH = _cain.LogPriority_HIGH
class Log(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    priority0_lg = property(_cain.Log_priority0_lg_get, _cain.Log_priority0_lg_set)
    priority1_lg = property(_cain.Log_priority1_lg_get, _cain.Log_priority1_lg_set)
    priority2_lg = property(_cain.Log_priority2_lg_get, _cain.Log_priority2_lg_set)
    error_lg = property(_cain.Log_error_lg_get, _cain.Log_error_lg_set)
    fatal_lg = property(_cain.Log_fatal_lg_get, _cain.Log_fatal_lg_set)
    output_min_severity = property(_cain.Log_output_min_severity_get, _cain.Log_output_min_severity_set)
    output_min_priority = property(_cain.Log_output_min_priority_get, _cain.Log_output_min_priority_set)
    debug_min_severity = property(_cain.Log_debug_min_severity_get, _cain.Log_debug_min_severity_set)
    debug_min_priority = property(_cain.Log_debug_min_priority_get, _cain.Log_debug_min_priority_set)
    debug_enabled = property(_cain.Log_debug_enabled_get, _cain.Log_debug_enabled_set)
    get = _swig_new_static_method(_cain.Log_get)
    flush = _swig_new_instance_method(_cain.Log_flush)
    __swig_destroy__ = _cain.delete_Log

# Register Log in _cain:
_cain.Log_swigregister(Log)
cvar = _cain.cvar
Log_get = _cain.Log_get

class Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Parameters:
            _self = None
        else:
            _self = self
        _cain.Parameters_swiginit(self, _cain.new_Parameters(_self, ))
    __swig_destroy__ = _cain.delete_Parameters
    dereference = _swig_new_static_method(_cain.Parameters_dereference)
    get_shared = _swig_new_static_method(_cain.Parameters_get_shared)
    load = _swig_new_instance_method(_cain.Parameters_load)
    get_values = _swig_new_instance_method(_cain.Parameters_get_values)
    tree = property(_cain.Parameters_tree_get, _cain.Parameters_tree_set)
    map = property(_cain.Parameters_map_get, _cain.Parameters_map_set)
    def __disown__(self):
        self.this.disown()
        _cain.disown_Parameters(self)
        return weakref.proxy(self)

# Register Parameters in _cain:
_cain.Parameters_swigregister(Parameters)
Parameters_dereference = _cain.Parameters_dereference
Parameters_get_shared = _cain.Parameters_get_shared

class Scheme(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cain.Scheme_swiginit(self, _cain.new_Scheme())
    __swig_destroy__ = _cain.delete_Scheme
    validate = _swig_new_instance_method(_cain.Scheme_validate)
    load = _swig_new_instance_method(_cain.Scheme_load)
    filter = _swig_new_instance_method(_cain.Scheme_filter)
    include = _swig_new_instance_method(_cain.Scheme_include)
    name = property(_cain.Scheme_name_get, _cain.Scheme_name_set)
    get_rules = _swig_new_instance_method(_cain.Scheme_get_rules)

# Register Scheme in _cain:
_cain.Scheme_swigregister(Scheme)
SCHEMES_GROUP = cvar.SCHEMES_GROUP
SCHEMES_BASE = cvar.SCHEMES_BASE
SCHEMES_PARAM = cvar.SCHEMES_PARAM
SCHEMES_CLASS = cvar.SCHEMES_CLASS
SCHEMES_ROOT = cvar.SCHEMES_ROOT
SCHEMES_CAPTION = cvar.SCHEMES_CAPTION
SCHEMES_TYPE = cvar.SCHEMES_TYPE
SCHEMES_DEFAULT = cvar.SCHEMES_DEFAULT
SCHEMES_DESCRIPION = cvar.SCHEMES_DESCRIPION
SCHEMES_TYPE_FILE = cvar.SCHEMES_TYPE_FILE
SCHEMES_TYPE_INT = cvar.SCHEMES_TYPE_INT
SCHEMES_TYPE_FLOAT = cvar.SCHEMES_TYPE_FLOAT
SCHEMES_TYPE_ARRAY = cvar.SCHEMES_TYPE_ARRAY

METADATA_VAR = _cain.METADATA_VAR
GENESIS_LOCATION = _cain.GENESIS_LOCATION
class BaseClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cain.delete_BaseClass
    gen_scheme = _swig_new_static_method(_cain.BaseClass_gen_scheme)

    def __init__(self):
        if self.__class__ == BaseClass:
            _self = None
        else:
            _self = self
        _cain.BaseClass_swiginit(self, _cain.new_BaseClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _cain.disown_BaseClass(self)
        return weakref.proxy(self)

# Register BaseClass in _cain:
_cain.BaseClass_swigregister(BaseClass)
BaseClass_gen_scheme = _cain.BaseClass_gen_scheme

class exception_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.exception_base_what)

    def __init__(self):
        _cain.exception_base_swiginit(self, _cain.new_exception_base())
    __swig_destroy__ = _cain.delete_exception_base

# Register exception_base in _cain:
_cain.exception_base_swigregister(exception_base)

class outofdomain_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.outofdomain_error_what)

    def __init__(self):
        _cain.outofdomain_error_swiginit(self, _cain.new_outofdomain_error())
    __swig_destroy__ = _cain.delete_outofdomain_error

# Register outofdomain_error in _cain:
_cain.outofdomain_error_swigregister(outofdomain_error)

class inconsistency_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.inconsistency_error_what)

    def __init__(self):
        _cain.inconsistency_error_swiginit(self, _cain.new_inconsistency_error())
    __swig_destroy__ = _cain.delete_inconsistency_error

# Register inconsistency_error in _cain:
_cain.inconsistency_error_swigregister(inconsistency_error)

class param_value_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.param_value_error_what)

    def __init__(self):
        _cain.param_value_error_swiginit(self, _cain.new_param_value_error())
    __swig_destroy__ = _cain.delete_param_value_error

# Register param_value_error in _cain:
_cain.param_value_error_swigregister(param_value_error)

class status_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.status_error_what)

    def __init__(self):
        _cain.status_error_swiginit(self, _cain.new_status_error())
    __swig_destroy__ = _cain.delete_status_error

# Register status_error in _cain:
_cain.status_error_swigregister(status_error)

class flow_control_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.flow_control_error_what)

    def __init__(self):
        _cain.flow_control_error_swiginit(self, _cain.new_flow_control_error())
    __swig_destroy__ = _cain.delete_flow_control_error

# Register flow_control_error in _cain:
_cain.flow_control_error_swigregister(flow_control_error)

class malformed_record(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.malformed_record_what)

    def __init__(self):
        _cain.malformed_record_swiginit(self, _cain.new_malformed_record())
    __swig_destroy__ = _cain.delete_malformed_record

# Register malformed_record in _cain:
_cain.malformed_record_swigregister(malformed_record)

class unsupported_feature(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.unsupported_feature_what)

    def __init__(self):
        _cain.unsupported_feature_swiginit(self, _cain.new_unsupported_feature())
    __swig_destroy__ = _cain.delete_unsupported_feature

# Register unsupported_feature in _cain:
_cain.unsupported_feature_swigregister(unsupported_feature)

class factory_unknown_type(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.factory_unknown_type_what)

    def __init__(self):
        _cain.factory_unknown_type_swiginit(self, _cain.new_factory_unknown_type())
    __swig_destroy__ = _cain.delete_factory_unknown_type

# Register factory_unknown_type in _cain:
_cain.factory_unknown_type_swigregister(factory_unknown_type)

class wrong_behaviour(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.wrong_behaviour_what)

    def __init__(self):
        _cain.wrong_behaviour_swiginit(self, _cain.new_wrong_behaviour())
    __swig_destroy__ = _cain.delete_wrong_behaviour

# Register wrong_behaviour in _cain:
_cain.wrong_behaviour_swigregister(wrong_behaviour)

class unexpected_instance_type(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.unexpected_instance_type_what)

    def __init__(self):
        _cain.unexpected_instance_type_swiginit(self, _cain.new_unexpected_instance_type())
    __swig_destroy__ = _cain.delete_unexpected_instance_type

# Register unexpected_instance_type in _cain:
_cain.unexpected_instance_type_swigregister(unexpected_instance_type)

class unprovided_artifact(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.unprovided_artifact_what)

    def __init__(self):
        _cain.unprovided_artifact_swiginit(self, _cain.new_unprovided_artifact())
    __swig_destroy__ = _cain.delete_unprovided_artifact

# Register unprovided_artifact in _cain:
_cain.unprovided_artifact_swigregister(unprovided_artifact)

class incomplete_metadata(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.incomplete_metadata_what)

    def __init__(self):
        _cain.incomplete_metadata_swiginit(self, _cain.new_incomplete_metadata())
    __swig_destroy__ = _cain.delete_incomplete_metadata

# Register incomplete_metadata in _cain:
_cain.incomplete_metadata_swigregister(incomplete_metadata)

class internal_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.internal_error_what)

    def __init__(self):
        _cain.internal_error_swiginit(self, _cain.new_internal_error())
    __swig_destroy__ = _cain.delete_internal_error

# Register internal_error in _cain:
_cain.internal_error_swigregister(internal_error)

class incompatible_solver(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.incompatible_solver_what)

    def __init__(self):
        _cain.incompatible_solver_swiginit(self, _cain.new_incompatible_solver())
    __swig_destroy__ = _cain.delete_incompatible_solver

# Register incompatible_solver in _cain:
_cain.incompatible_solver_swigregister(incompatible_solver)

class invalid_mpi_thread_support(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.invalid_mpi_thread_support_what)

    def __init__(self):
        _cain.invalid_mpi_thread_support_swiginit(self, _cain.new_invalid_mpi_thread_support())
    __swig_destroy__ = _cain.delete_invalid_mpi_thread_support

# Register invalid_mpi_thread_support in _cain:
_cain.invalid_mpi_thread_support_swigregister(invalid_mpi_thread_support)

class unsupported_multi_threading(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.unsupported_multi_threading_what)

    def __init__(self):
        _cain.unsupported_multi_threading_swiginit(self, _cain.new_unsupported_multi_threading())
    __swig_destroy__ = _cain.delete_unsupported_multi_threading

# Register unsupported_multi_threading in _cain:
_cain.unsupported_multi_threading_swigregister(unsupported_multi_threading)

class parameters_validation_failed(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.parameters_validation_failed_what)

    def __init__(self):
        _cain.parameters_validation_failed_swiginit(self, _cain.new_parameters_validation_failed())
    __swig_destroy__ = _cain.delete_parameters_validation_failed

# Register parameters_validation_failed in _cain:
_cain.parameters_validation_failed_swigregister(parameters_validation_failed)

class communication_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.communication_error_what)

    def __init__(self):
        _cain.communication_error_swiginit(self, _cain.new_communication_error())
    __swig_destroy__ = _cain.delete_communication_error

# Register communication_error in _cain:
_cain.communication_error_swigregister(communication_error)

class io_error(exception_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.io_error_what)

    def __init__(self):
        _cain.io_error_swiginit(self, _cain.new_io_error())
    __swig_destroy__ = _cain.delete_io_error

# Register io_error in _cain:
_cain.io_error_swigregister(io_error)

class channel_open_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.channel_open_error_what)

    def __init__(self):
        _cain.channel_open_error_swiginit(self, _cain.new_channel_open_error())
    __swig_destroy__ = _cain.delete_channel_open_error

# Register channel_open_error in _cain:
_cain.channel_open_error_swigregister(channel_open_error)

class channel_write_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.channel_write_error_what)

    def __init__(self):
        _cain.channel_write_error_swiginit(self, _cain.new_channel_write_error())
    __swig_destroy__ = _cain.delete_channel_write_error

# Register channel_write_error in _cain:
_cain.channel_write_error_swigregister(channel_write_error)

class channel_closed_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.channel_closed_error_what)

    def __init__(self):
        _cain.channel_closed_error_swiginit(self, _cain.new_channel_closed_error())
    __swig_destroy__ = _cain.delete_channel_closed_error

# Register channel_closed_error in _cain:
_cain.channel_closed_error_swigregister(channel_closed_error)

class channel_closing_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.channel_closing_error_what)

    def __init__(self):
        _cain.channel_closing_error_swiginit(self, _cain.new_channel_closing_error())
    __swig_destroy__ = _cain.delete_channel_closing_error

# Register channel_closing_error in _cain:
_cain.channel_closing_error_swigregister(channel_closing_error)

class file_open_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.file_open_error_what)

    def __init__(self):
        _cain.file_open_error_swiginit(self, _cain.new_file_open_error())
    __swig_destroy__ = _cain.delete_file_open_error

# Register file_open_error in _cain:
_cain.file_open_error_swigregister(file_open_error)

class file_format_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.file_format_error_what)

    def __init__(self):
        _cain.file_format_error_swiginit(self, _cain.new_file_format_error())
    __swig_destroy__ = _cain.delete_file_format_error

# Register file_format_error in _cain:
_cain.file_format_error_swigregister(file_format_error)

class file_read_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.file_read_error_what)

    def __init__(self):
        _cain.file_read_error_swiginit(self, _cain.new_file_read_error())
    __swig_destroy__ = _cain.delete_file_read_error

# Register file_read_error in _cain:
_cain.file_read_error_swigregister(file_read_error)

class file_write_error(io_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    what = _swig_new_instance_method(_cain.file_write_error_what)

    def __init__(self):
        _cain.file_write_error_swiginit(self, _cain.new_file_write_error())
    __swig_destroy__ = _cain.delete_file_write_error

# Register file_write_error in _cain:
_cain.file_write_error_swigregister(file_write_error)

class CommonTimer(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTimer:
            _self = None
        else:
            _self = self
        _cain.CommonTimer_swiginit(self, _cain.new_CommonTimer(_self, ))
    __swig_destroy__ = _cain.delete_CommonTimer
    get_classname = _swig_new_instance_method(_cain.CommonTimer_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonTimer_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonTimer_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonTimer_get_shared)
    type = property(_cain.CommonTimer_type_get, _cain.CommonTimer_type_set)
    unwrap = _swig_new_static_method(_cain.CommonTimer_unwrap)
    dereference = _swig_new_static_method(_cain.CommonTimer_dereference)
    get = _swig_new_static_method(_cain.CommonTimer_get)
    get_uuid = _swig_new_instance_method(_cain.CommonTimer_get_uuid)
    name = property(_cain.CommonTimer_name_get, _cain.CommonTimer_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonTimer_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonTimer_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonTimer(self)
        return weakref.proxy(self)

# Register CommonTimer in _cain:
_cain.CommonTimer_swigregister(CommonTimer)
CommonTimer_get_shared = _cain.CommonTimer_get_shared
CommonTimer_unwrap = _cain.CommonTimer_unwrap
CommonTimer_dereference = _cain.CommonTimer_dereference
CommonTimer_get = _cain.CommonTimer_get
CommonTimer_gen_scheme = _cain.CommonTimer_gen_scheme

class Timer(CommonTimer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, report=True):
        if self.__class__ == Timer:
            _self = None
        else:
            _self = self
        _cain.Timer_swiginit(self, _cain.new_Timer(_self, name, report))
    __swig_destroy__ = _cain.delete_Timer
    elapsed = _swig_new_instance_method(_cain.Timer_elapsed)
    stop = _swig_new_instance_method(_cain.Timer_stop)
    start = _swig_new_instance_method(_cain.Timer_start)
    resume = _swig_new_instance_method(_cain.Timer_resume)
    def __disown__(self):
        self.this.disown()
        _cain.disown_Timer(self)
        return weakref.proxy(self)

# Register Timer in _cain:
_cain.Timer_swigregister(Timer)

class _string_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain._string_list_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain._string_list___nonzero__)
    __bool__ = _swig_new_instance_method(_cain._string_list___bool__)
    __len__ = _swig_new_instance_method(_cain._string_list___len__)
    __getslice__ = _swig_new_instance_method(_cain._string_list___getslice__)
    __setslice__ = _swig_new_instance_method(_cain._string_list___setslice__)
    __delslice__ = _swig_new_instance_method(_cain._string_list___delslice__)
    __delitem__ = _swig_new_instance_method(_cain._string_list___delitem__)
    __getitem__ = _swig_new_instance_method(_cain._string_list___getitem__)
    __setitem__ = _swig_new_instance_method(_cain._string_list___setitem__)
    pop = _swig_new_instance_method(_cain._string_list_pop)
    append = _swig_new_instance_method(_cain._string_list_append)
    empty = _swig_new_instance_method(_cain._string_list_empty)
    size = _swig_new_instance_method(_cain._string_list_size)
    swap = _swig_new_instance_method(_cain._string_list_swap)
    begin = _swig_new_instance_method(_cain._string_list_begin)
    end = _swig_new_instance_method(_cain._string_list_end)
    rbegin = _swig_new_instance_method(_cain._string_list_rbegin)
    rend = _swig_new_instance_method(_cain._string_list_rend)
    clear = _swig_new_instance_method(_cain._string_list_clear)
    get_allocator = _swig_new_instance_method(_cain._string_list_get_allocator)
    pop_back = _swig_new_instance_method(_cain._string_list_pop_back)
    erase = _swig_new_instance_method(_cain._string_list_erase)

    def __init__(self, *args):
        _cain._string_list_swiginit(self, _cain.new__string_list(*args))
    push_back = _swig_new_instance_method(_cain._string_list_push_back)
    front = _swig_new_instance_method(_cain._string_list_front)
    back = _swig_new_instance_method(_cain._string_list_back)
    assign = _swig_new_instance_method(_cain._string_list_assign)
    resize = _swig_new_instance_method(_cain._string_list_resize)
    insert = _swig_new_instance_method(_cain._string_list_insert)
    reserve = _swig_new_instance_method(_cain._string_list_reserve)
    capacity = _swig_new_instance_method(_cain._string_list_capacity)
    __swig_destroy__ = _cain.delete__string_list

# Register _string_list in _cain:
_cain._string_list_swigregister(_string_list)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.IntVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.IntVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.IntVector___bool__)
    __len__ = _swig_new_instance_method(_cain.IntVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.IntVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.IntVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.IntVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.IntVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.IntVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.IntVector___setitem__)
    pop = _swig_new_instance_method(_cain.IntVector_pop)
    append = _swig_new_instance_method(_cain.IntVector_append)
    empty = _swig_new_instance_method(_cain.IntVector_empty)
    size = _swig_new_instance_method(_cain.IntVector_size)
    swap = _swig_new_instance_method(_cain.IntVector_swap)
    begin = _swig_new_instance_method(_cain.IntVector_begin)
    end = _swig_new_instance_method(_cain.IntVector_end)
    rbegin = _swig_new_instance_method(_cain.IntVector_rbegin)
    rend = _swig_new_instance_method(_cain.IntVector_rend)
    clear = _swig_new_instance_method(_cain.IntVector_clear)
    get_allocator = _swig_new_instance_method(_cain.IntVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.IntVector_pop_back)
    erase = _swig_new_instance_method(_cain.IntVector_erase)

    def __init__(self, *args):
        _cain.IntVector_swiginit(self, _cain.new_IntVector(*args))
    push_back = _swig_new_instance_method(_cain.IntVector_push_back)
    front = _swig_new_instance_method(_cain.IntVector_front)
    back = _swig_new_instance_method(_cain.IntVector_back)
    assign = _swig_new_instance_method(_cain.IntVector_assign)
    resize = _swig_new_instance_method(_cain.IntVector_resize)
    insert = _swig_new_instance_method(_cain.IntVector_insert)
    reserve = _swig_new_instance_method(_cain.IntVector_reserve)
    capacity = _swig_new_instance_method(_cain.IntVector_capacity)
    __swig_destroy__ = _cain.delete_IntVector

# Register IntVector in _cain:
_cain.IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.UnsignedIntVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.UnsignedIntVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.UnsignedIntVector___bool__)
    __len__ = _swig_new_instance_method(_cain.UnsignedIntVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.UnsignedIntVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.UnsignedIntVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.UnsignedIntVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.UnsignedIntVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.UnsignedIntVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.UnsignedIntVector___setitem__)
    pop = _swig_new_instance_method(_cain.UnsignedIntVector_pop)
    append = _swig_new_instance_method(_cain.UnsignedIntVector_append)
    empty = _swig_new_instance_method(_cain.UnsignedIntVector_empty)
    size = _swig_new_instance_method(_cain.UnsignedIntVector_size)
    swap = _swig_new_instance_method(_cain.UnsignedIntVector_swap)
    begin = _swig_new_instance_method(_cain.UnsignedIntVector_begin)
    end = _swig_new_instance_method(_cain.UnsignedIntVector_end)
    rbegin = _swig_new_instance_method(_cain.UnsignedIntVector_rbegin)
    rend = _swig_new_instance_method(_cain.UnsignedIntVector_rend)
    clear = _swig_new_instance_method(_cain.UnsignedIntVector_clear)
    get_allocator = _swig_new_instance_method(_cain.UnsignedIntVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.UnsignedIntVector_pop_back)
    erase = _swig_new_instance_method(_cain.UnsignedIntVector_erase)

    def __init__(self, *args):
        _cain.UnsignedIntVector_swiginit(self, _cain.new_UnsignedIntVector(*args))
    push_back = _swig_new_instance_method(_cain.UnsignedIntVector_push_back)
    front = _swig_new_instance_method(_cain.UnsignedIntVector_front)
    back = _swig_new_instance_method(_cain.UnsignedIntVector_back)
    assign = _swig_new_instance_method(_cain.UnsignedIntVector_assign)
    resize = _swig_new_instance_method(_cain.UnsignedIntVector_resize)
    insert = _swig_new_instance_method(_cain.UnsignedIntVector_insert)
    reserve = _swig_new_instance_method(_cain.UnsignedIntVector_reserve)
    capacity = _swig_new_instance_method(_cain.UnsignedIntVector_capacity)
    __swig_destroy__ = _cain.delete_UnsignedIntVector

# Register UnsignedIntVector in _cain:
_cain.UnsignedIntVector_swigregister(UnsignedIntVector)

class IntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.IntVectorVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.IntVectorVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.IntVectorVector___bool__)
    __len__ = _swig_new_instance_method(_cain.IntVectorVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.IntVectorVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.IntVectorVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.IntVectorVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.IntVectorVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.IntVectorVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.IntVectorVector___setitem__)
    pop = _swig_new_instance_method(_cain.IntVectorVector_pop)
    append = _swig_new_instance_method(_cain.IntVectorVector_append)
    empty = _swig_new_instance_method(_cain.IntVectorVector_empty)
    size = _swig_new_instance_method(_cain.IntVectorVector_size)
    swap = _swig_new_instance_method(_cain.IntVectorVector_swap)
    begin = _swig_new_instance_method(_cain.IntVectorVector_begin)
    end = _swig_new_instance_method(_cain.IntVectorVector_end)
    rbegin = _swig_new_instance_method(_cain.IntVectorVector_rbegin)
    rend = _swig_new_instance_method(_cain.IntVectorVector_rend)
    clear = _swig_new_instance_method(_cain.IntVectorVector_clear)
    get_allocator = _swig_new_instance_method(_cain.IntVectorVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.IntVectorVector_pop_back)
    erase = _swig_new_instance_method(_cain.IntVectorVector_erase)

    def __init__(self, *args):
        _cain.IntVectorVector_swiginit(self, _cain.new_IntVectorVector(*args))
    push_back = _swig_new_instance_method(_cain.IntVectorVector_push_back)
    front = _swig_new_instance_method(_cain.IntVectorVector_front)
    back = _swig_new_instance_method(_cain.IntVectorVector_back)
    assign = _swig_new_instance_method(_cain.IntVectorVector_assign)
    resize = _swig_new_instance_method(_cain.IntVectorVector_resize)
    insert = _swig_new_instance_method(_cain.IntVectorVector_insert)
    reserve = _swig_new_instance_method(_cain.IntVectorVector_reserve)
    capacity = _swig_new_instance_method(_cain.IntVectorVector_capacity)
    __swig_destroy__ = _cain.delete_IntVectorVector

# Register IntVectorVector in _cain:
_cain.IntVectorVector_swigregister(IntVectorVector)

class UnsignedIntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.UnsignedIntVectorVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___bool__)
    __len__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.UnsignedIntVectorVector___setitem__)
    pop = _swig_new_instance_method(_cain.UnsignedIntVectorVector_pop)
    append = _swig_new_instance_method(_cain.UnsignedIntVectorVector_append)
    empty = _swig_new_instance_method(_cain.UnsignedIntVectorVector_empty)
    size = _swig_new_instance_method(_cain.UnsignedIntVectorVector_size)
    swap = _swig_new_instance_method(_cain.UnsignedIntVectorVector_swap)
    begin = _swig_new_instance_method(_cain.UnsignedIntVectorVector_begin)
    end = _swig_new_instance_method(_cain.UnsignedIntVectorVector_end)
    rbegin = _swig_new_instance_method(_cain.UnsignedIntVectorVector_rbegin)
    rend = _swig_new_instance_method(_cain.UnsignedIntVectorVector_rend)
    clear = _swig_new_instance_method(_cain.UnsignedIntVectorVector_clear)
    get_allocator = _swig_new_instance_method(_cain.UnsignedIntVectorVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.UnsignedIntVectorVector_pop_back)
    erase = _swig_new_instance_method(_cain.UnsignedIntVectorVector_erase)

    def __init__(self, *args):
        _cain.UnsignedIntVectorVector_swiginit(self, _cain.new_UnsignedIntVectorVector(*args))
    push_back = _swig_new_instance_method(_cain.UnsignedIntVectorVector_push_back)
    front = _swig_new_instance_method(_cain.UnsignedIntVectorVector_front)
    back = _swig_new_instance_method(_cain.UnsignedIntVectorVector_back)
    assign = _swig_new_instance_method(_cain.UnsignedIntVectorVector_assign)
    resize = _swig_new_instance_method(_cain.UnsignedIntVectorVector_resize)
    insert = _swig_new_instance_method(_cain.UnsignedIntVectorVector_insert)
    reserve = _swig_new_instance_method(_cain.UnsignedIntVectorVector_reserve)
    capacity = _swig_new_instance_method(_cain.UnsignedIntVectorVector_capacity)
    __swig_destroy__ = _cain.delete_UnsignedIntVectorVector

# Register UnsignedIntVectorVector in _cain:
_cain.UnsignedIntVectorVector_swigregister(UnsignedIntVectorVector)

class CommonPoint(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonPoint:
            _self = None
        else:
            _self = self
        _cain.CommonPoint_swiginit(self, _cain.new_CommonPoint(_self, ))
    __swig_destroy__ = _cain.delete_CommonPoint
    get_classname = _swig_new_instance_method(_cain.CommonPoint_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonPoint_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonPoint_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonPoint_get_shared)
    type = property(_cain.CommonPoint_type_get, _cain.CommonPoint_type_set)
    unwrap = _swig_new_static_method(_cain.CommonPoint_unwrap)
    dereference = _swig_new_static_method(_cain.CommonPoint_dereference)
    get = _swig_new_static_method(_cain.CommonPoint_get)
    get_uuid = _swig_new_instance_method(_cain.CommonPoint_get_uuid)
    name = property(_cain.CommonPoint_name_get, _cain.CommonPoint_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonPoint_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonPoint_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonPoint(self)
        return weakref.proxy(self)

# Register CommonPoint in _cain:
_cain.CommonPoint_swigregister(CommonPoint)
CommonPoint_get_shared = _cain.CommonPoint_get_shared
CommonPoint_unwrap = _cain.CommonPoint_unwrap
CommonPoint_dereference = _cain.CommonPoint_dereference
CommonPoint_get = _cain.CommonPoint_get
CommonPoint_gen_scheme = _cain.CommonPoint_gen_scheme

class PointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.PointVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.PointVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.PointVector___bool__)
    __len__ = _swig_new_instance_method(_cain.PointVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.PointVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.PointVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.PointVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.PointVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.PointVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.PointVector___setitem__)
    pop = _swig_new_instance_method(_cain.PointVector_pop)
    append = _swig_new_instance_method(_cain.PointVector_append)
    empty = _swig_new_instance_method(_cain.PointVector_empty)
    size = _swig_new_instance_method(_cain.PointVector_size)
    swap = _swig_new_instance_method(_cain.PointVector_swap)
    begin = _swig_new_instance_method(_cain.PointVector_begin)
    end = _swig_new_instance_method(_cain.PointVector_end)
    rbegin = _swig_new_instance_method(_cain.PointVector_rbegin)
    rend = _swig_new_instance_method(_cain.PointVector_rend)
    clear = _swig_new_instance_method(_cain.PointVector_clear)
    get_allocator = _swig_new_instance_method(_cain.PointVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.PointVector_pop_back)
    erase = _swig_new_instance_method(_cain.PointVector_erase)

    def __init__(self, *args):
        _cain.PointVector_swiginit(self, _cain.new_PointVector(*args))
    push_back = _swig_new_instance_method(_cain.PointVector_push_back)
    front = _swig_new_instance_method(_cain.PointVector_front)
    back = _swig_new_instance_method(_cain.PointVector_back)
    assign = _swig_new_instance_method(_cain.PointVector_assign)
    resize = _swig_new_instance_method(_cain.PointVector_resize)
    insert = _swig_new_instance_method(_cain.PointVector_insert)
    reserve = _swig_new_instance_method(_cain.PointVector_reserve)
    capacity = _swig_new_instance_method(_cain.PointVector_capacity)
    __swig_destroy__ = _cain.delete_PointVector

# Register PointVector in _cain:
_cain.PointVector_swigregister(PointVector)

class Point(CommonPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cain.delete_Point
    clone = _swig_new_instance_method(_cain.Point_clone)

    def __init__(self):
        if self.__class__ == Point:
            _self = None
        else:
            _self = self
        _cain.Point_swiginit(self, _cain.new_Point(_self, ))
    def __disown__(self):
        self.this.disown()
        _cain.disown_Point(self)
        return weakref.proxy(self)

# Register Point in _cain:
_cain.Point_swigregister(Point)

class CommonElement(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonElement:
            _self = None
        else:
            _self = self
        _cain.CommonElement_swiginit(self, _cain.new_CommonElement(_self, ))
    __swig_destroy__ = _cain.delete_CommonElement
    get_classname = _swig_new_instance_method(_cain.CommonElement_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonElement_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonElement_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonElement_get_shared)
    type = property(_cain.CommonElement_type_get, _cain.CommonElement_type_set)
    unwrap = _swig_new_static_method(_cain.CommonElement_unwrap)
    dereference = _swig_new_static_method(_cain.CommonElement_dereference)
    get = _swig_new_static_method(_cain.CommonElement_get)
    get_uuid = _swig_new_instance_method(_cain.CommonElement_get_uuid)
    name = property(_cain.CommonElement_name_get, _cain.CommonElement_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonElement_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonElement_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonElement(self)
        return weakref.proxy(self)

# Register CommonElement in _cain:
_cain.CommonElement_swigregister(CommonElement)
CommonElement_get_shared = _cain.CommonElement_get_shared
CommonElement_unwrap = _cain.CommonElement_unwrap
CommonElement_dereference = _cain.CommonElement_dereference
CommonElement_get = _cain.CommonElement_get
CommonElement_gen_scheme = _cain.CommonElement_gen_scheme

class CommonMesh(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonMesh:
            _self = None
        else:
            _self = self
        _cain.CommonMesh_swiginit(self, _cain.new_CommonMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonMesh
    get_classname = _swig_new_instance_method(_cain.CommonMesh_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonMesh_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonMesh_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonMesh_get_shared)
    type = property(_cain.CommonMesh_type_get, _cain.CommonMesh_type_set)
    unwrap = _swig_new_static_method(_cain.CommonMesh_unwrap)
    dereference = _swig_new_static_method(_cain.CommonMesh_dereference)
    get = _swig_new_static_method(_cain.CommonMesh_get)
    get_uuid = _swig_new_instance_method(_cain.CommonMesh_get_uuid)
    name = property(_cain.CommonMesh_name_get, _cain.CommonMesh_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonMesh_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonMesh(self)
        return weakref.proxy(self)

# Register CommonMesh in _cain:
_cain.CommonMesh_swigregister(CommonMesh)
CommonMesh_get_shared = _cain.CommonMesh_get_shared
CommonMesh_unwrap = _cain.CommonMesh_unwrap
CommonMesh_dereference = _cain.CommonMesh_dereference
CommonMesh_get = _cain.CommonMesh_get
CommonMesh_gen_scheme = _cain.CommonMesh_gen_scheme

class CommonDexter(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonDexter:
            _self = None
        else:
            _self = self
        _cain.CommonDexter_swiginit(self, _cain.new_CommonDexter(_self, ))
    __swig_destroy__ = _cain.delete_CommonDexter
    get_classname = _swig_new_instance_method(_cain.CommonDexter_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonDexter_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonDexter_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonDexter_get_shared)
    type = property(_cain.CommonDexter_type_get, _cain.CommonDexter_type_set)
    unwrap = _swig_new_static_method(_cain.CommonDexter_unwrap)
    dereference = _swig_new_static_method(_cain.CommonDexter_dereference)
    get = _swig_new_static_method(_cain.CommonDexter_get)
    get_uuid = _swig_new_instance_method(_cain.CommonDexter_get_uuid)
    name = property(_cain.CommonDexter_name_get, _cain.CommonDexter_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonDexter_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonDexter_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonDexter(self)
        return weakref.proxy(self)

# Register CommonDexter in _cain:
_cain.CommonDexter_swigregister(CommonDexter)
CommonDexter_get_shared = _cain.CommonDexter_get_shared
CommonDexter_unwrap = _cain.CommonDexter_unwrap
CommonDexter_dereference = _cain.CommonDexter_dereference
CommonDexter_get = _cain.CommonDexter_get
CommonDexter_gen_scheme = _cain.CommonDexter_gen_scheme

class CommonContourElement(BaseClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonContourElement:
            _self = None
        else:
            _self = self
        _cain.CommonContourElement_swiginit(self, _cain.new_CommonContourElement(_self, ))
    __swig_destroy__ = _cain.delete_CommonContourElement
    get_classname = _swig_new_instance_method(_cain.CommonContourElement_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonContourElement_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonContourElement_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonContourElement_get_shared)
    type = property(_cain.CommonContourElement_type_get, _cain.CommonContourElement_type_set)
    unwrap = _swig_new_static_method(_cain.CommonContourElement_unwrap)
    dereference = _swig_new_static_method(_cain.CommonContourElement_dereference)
    get = _swig_new_static_method(_cain.CommonContourElement_get)
    get_uuid = _swig_new_instance_method(_cain.CommonContourElement_get_uuid)
    name = property(_cain.CommonContourElement_name_get, _cain.CommonContourElement_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonContourElement_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonContourElement_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonContourElement(self)
        return weakref.proxy(self)

# Register CommonContourElement in _cain:
_cain.CommonContourElement_swigregister(CommonContourElement)
CommonContourElement_get_shared = _cain.CommonContourElement_get_shared
CommonContourElement_unwrap = _cain.CommonContourElement_unwrap
CommonContourElement_dereference = _cain.CommonContourElement_dereference
CommonContourElement_get = _cain.CommonContourElement_get
CommonContourElement_gen_scheme = _cain.CommonContourElement_gen_scheme

class ElementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.ElementVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.ElementVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.ElementVector___bool__)
    __len__ = _swig_new_instance_method(_cain.ElementVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.ElementVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.ElementVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.ElementVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.ElementVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.ElementVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.ElementVector___setitem__)
    pop = _swig_new_instance_method(_cain.ElementVector_pop)
    append = _swig_new_instance_method(_cain.ElementVector_append)
    empty = _swig_new_instance_method(_cain.ElementVector_empty)
    size = _swig_new_instance_method(_cain.ElementVector_size)
    swap = _swig_new_instance_method(_cain.ElementVector_swap)
    begin = _swig_new_instance_method(_cain.ElementVector_begin)
    end = _swig_new_instance_method(_cain.ElementVector_end)
    rbegin = _swig_new_instance_method(_cain.ElementVector_rbegin)
    rend = _swig_new_instance_method(_cain.ElementVector_rend)
    clear = _swig_new_instance_method(_cain.ElementVector_clear)
    get_allocator = _swig_new_instance_method(_cain.ElementVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.ElementVector_pop_back)
    erase = _swig_new_instance_method(_cain.ElementVector_erase)

    def __init__(self, *args):
        _cain.ElementVector_swiginit(self, _cain.new_ElementVector(*args))
    push_back = _swig_new_instance_method(_cain.ElementVector_push_back)
    front = _swig_new_instance_method(_cain.ElementVector_front)
    back = _swig_new_instance_method(_cain.ElementVector_back)
    assign = _swig_new_instance_method(_cain.ElementVector_assign)
    resize = _swig_new_instance_method(_cain.ElementVector_resize)
    insert = _swig_new_instance_method(_cain.ElementVector_insert)
    reserve = _swig_new_instance_method(_cain.ElementVector_reserve)
    capacity = _swig_new_instance_method(_cain.ElementVector_capacity)
    __swig_destroy__ = _cain.delete_ElementVector

# Register ElementVector in _cain:
_cain.ElementVector_swigregister(ElementVector)

class ContourElementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.ContourElementVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.ContourElementVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.ContourElementVector___bool__)
    __len__ = _swig_new_instance_method(_cain.ContourElementVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.ContourElementVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.ContourElementVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.ContourElementVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.ContourElementVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.ContourElementVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.ContourElementVector___setitem__)
    pop = _swig_new_instance_method(_cain.ContourElementVector_pop)
    append = _swig_new_instance_method(_cain.ContourElementVector_append)
    empty = _swig_new_instance_method(_cain.ContourElementVector_empty)
    size = _swig_new_instance_method(_cain.ContourElementVector_size)
    swap = _swig_new_instance_method(_cain.ContourElementVector_swap)
    begin = _swig_new_instance_method(_cain.ContourElementVector_begin)
    end = _swig_new_instance_method(_cain.ContourElementVector_end)
    rbegin = _swig_new_instance_method(_cain.ContourElementVector_rbegin)
    rend = _swig_new_instance_method(_cain.ContourElementVector_rend)
    clear = _swig_new_instance_method(_cain.ContourElementVector_clear)
    get_allocator = _swig_new_instance_method(_cain.ContourElementVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.ContourElementVector_pop_back)
    erase = _swig_new_instance_method(_cain.ContourElementVector_erase)

    def __init__(self, *args):
        _cain.ContourElementVector_swiginit(self, _cain.new_ContourElementVector(*args))
    push_back = _swig_new_instance_method(_cain.ContourElementVector_push_back)
    front = _swig_new_instance_method(_cain.ContourElementVector_front)
    back = _swig_new_instance_method(_cain.ContourElementVector_back)
    assign = _swig_new_instance_method(_cain.ContourElementVector_assign)
    resize = _swig_new_instance_method(_cain.ContourElementVector_resize)
    insert = _swig_new_instance_method(_cain.ContourElementVector_insert)
    reserve = _swig_new_instance_method(_cain.ContourElementVector_reserve)
    capacity = _swig_new_instance_method(_cain.ContourElementVector_capacity)
    __swig_destroy__ = _cain.delete_ContourElementVector

# Register ContourElementVector in _cain:
_cain.ContourElementVector_swigregister(ContourElementVector)

class Element(CommonElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Label_Regular = _cain.Element_Label_Regular
    Label_Absorbing = _cain.Element_Label_Absorbing
    Label_FreeSurface = _cain.Element_Label_FreeSurface
    Label_Periodic = _cain.Element_Label_Periodic
    Label_Extradomain = _cain.Element_Label_Extradomain
    Label_BndCondition = _cain.Element_Label_BndCondition
    connectivity = property(_cain.Element_connectivity_get, _cain.Element_connectivity_set)
    zone = property(_cain.Element_zone_get, _cain.Element_zone_set)
    neighbor = property(_cain.Element_neighbor_get, _cain.Element_neighbor_set)
    neighborside = property(_cain.Element_neighborside_get, _cain.Element_neighborside_set)
    neighbortype = property(_cain.Element_neighbortype_get, _cain.Element_neighbortype_set)
    neighbornode = property(_cain.Element_neighbornode_get, _cain.Element_neighbornode_set)
    volume = property(_cain.Element_volume_get, _cain.Element_volume_set)
    barycenter = property(_cain.Element_barycenter_get, _cain.Element_barycenter_set)
    edgelength = property(_cain.Element_edgelength_get, _cain.Element_edgelength_set)
    edgenormal = property(_cain.Element_edgenormal_get, _cain.Element_edgenormal_set)
    inradius = property(_cain.Element_inradius_get, _cain.Element_inradius_set)
    LabelMap = property(_cain.Element_LabelMap_get, _cain.Element_LabelMap_set)
    __swig_destroy__ = _cain.delete_Element
    nnodes = _swig_new_instance_method(_cain.Element_nnodes)
    nsides = _swig_new_instance_method(_cain.Element_nsides)
    clone = _swig_new_instance_method(_cain.Element_clone)
    is_regular = _swig_new_instance_method(_cain.Element_is_regular)
    point_inside = _swig_new_instance_method(_cain.Element_point_inside)
    point_inworld = _swig_new_instance_method(_cain.Element_point_inworld)
    calculate_metrics = _swig_new_instance_method(_cain.Element_calculate_metrics)
    sideconversion_fromgambit = _swig_new_instance_method(_cain.Element_sideconversion_fromgambit)
    get_nodesperside = _swig_new_instance_method(_cain.Element_get_nodesperside)
    get_gradient = _swig_new_instance_method(_cain.Element_get_gradient)
    get_orientation = _swig_new_instance_method(_cain.Element_get_orientation)

    def __init__(self):
        if self.__class__ == Element:
            _self = None
        else:
            _self = self
        _cain.Element_swiginit(self, _cain.new_Element(_self, ))
    def __disown__(self):
        self.this.disown()
        _cain.disown_Element(self)
        return weakref.proxy(self)

# Register Element in _cain:
_cain.Element_swigregister(Element)

class Mesh(CommonMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndim = property(_cain.Mesh_ndim_get, _cain.Mesh_ndim_set)
    dom = property(_cain.Mesh_dom_get, _cain.Mesh_dom_set)
    vicinity = property(_cain.Mesh_vicinity_get, _cain.Mesh_vicinity_set)
    world_spots = property(_cain.Mesh_world_spots_get, _cain.Mesh_world_spots_set)
    mesh_spots = property(_cain.Mesh_mesh_spots_get, _cain.Mesh_mesh_spots_set)

    def __init__(self):
        if self.__class__ == Mesh:
            _self = None
        else:
            _self = self
        _cain.Mesh_swiginit(self, _cain.new_Mesh(_self, ))
    __swig_destroy__ = _cain.delete_Mesh
    config = _swig_new_instance_method(_cain.Mesh_config)
    configure = _swig_new_instance_method(_cain.Mesh_configure)
    lighten = _swig_new_instance_method(_cain.Mesh_lighten)
    load = _swig_new_instance_method(_cain.Mesh_load)
    decompose = _swig_new_instance_method(_cain.Mesh_decompose)
    get_localmesh = _swig_new_instance_method(_cain.Mesh_get_localmesh)
    get_numofdomains = _swig_new_instance_method(_cain.Mesh_get_numofdomains)
    is_global = _swig_new_instance_method(_cain.Mesh_is_global)
    get_globalmesh = _swig_new_instance_method(_cain.Mesh_get_globalmesh)
    get_vicinity = _swig_new_instance_method(_cain.Mesh_get_vicinity)
    get_vicinities = _swig_new_instance_method(_cain.Mesh_get_vicinities)
    mesh2world = _swig_new_instance_method(_cain.Mesh_mesh2world)
    get_spots = _swig_new_instance_method(_cain.Mesh_get_spots)
    world2mesh = _swig_new_instance_method(_cain.Mesh_world2mesh)
    def __disown__(self):
        self.this.disown()
        _cain.disown_Mesh(self)
        return weakref.proxy(self)

# Register Mesh in _cain:
_cain.Mesh_swigregister(Mesh)

class Dexter(CommonDexter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    domnumber = property(_cain.Dexter_domnumber_get, _cain.Dexter_domnumber_set)
    vicinities = property(_cain.Dexter_vicinities_get, _cain.Dexter_vicinities_set)

    def __init__(self):
        if self.__class__ == Dexter:
            _self = None
        else:
            _self = self
        _cain.Dexter_swiginit(self, _cain.new_Dexter(_self, ))
    __swig_destroy__ = _cain.delete_Dexter
    config = _swig_new_instance_method(_cain.Dexter_config)
    configure = _swig_new_instance_method(_cain.Dexter_configure)
    get_numofdomains = _swig_new_instance_method(_cain.Dexter_get_numofdomains)
    get_vicinities = _swig_new_instance_method(_cain.Dexter_get_vicinities)
    decompose = _swig_new_instance_method(_cain.Dexter_decompose)
    get_localmesh = _swig_new_instance_method(_cain.Dexter_get_localmesh)
    def __disown__(self):
        self.this.disown()
        _cain.disown_Dexter(self)
        return weakref.proxy(self)

# Register Dexter in _cain:
_cain.Dexter_swigregister(Dexter)

class ContourElement(CommonContourElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elem = property(_cain.ContourElement_elem_get, _cain.ContourElement_elem_set)
    side = property(_cain.ContourElement_side_get, _cain.ContourElement_side_set)

    def __init__(self, elem, side):
        if self.__class__ == ContourElement:
            _self = None
        else:
            _self = self
        _cain.ContourElement_swiginit(self, _cain.new_ContourElement(_self, elem, side))
    __swig_destroy__ = _cain.delete_ContourElement
    def __disown__(self):
        self.this.disown()
        _cain.disown_ContourElement(self)
        return weakref.proxy(self)

# Register ContourElement in _cain:
_cain.ContourElement_swigregister(ContourElement)

class LabelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.LabelVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.LabelVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.LabelVector___bool__)
    __len__ = _swig_new_instance_method(_cain.LabelVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.LabelVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.LabelVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.LabelVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.LabelVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.LabelVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.LabelVector___setitem__)
    pop = _swig_new_instance_method(_cain.LabelVector_pop)
    append = _swig_new_instance_method(_cain.LabelVector_append)
    empty = _swig_new_instance_method(_cain.LabelVector_empty)
    size = _swig_new_instance_method(_cain.LabelVector_size)
    swap = _swig_new_instance_method(_cain.LabelVector_swap)
    begin = _swig_new_instance_method(_cain.LabelVector_begin)
    end = _swig_new_instance_method(_cain.LabelVector_end)
    rbegin = _swig_new_instance_method(_cain.LabelVector_rbegin)
    rend = _swig_new_instance_method(_cain.LabelVector_rend)
    clear = _swig_new_instance_method(_cain.LabelVector_clear)
    get_allocator = _swig_new_instance_method(_cain.LabelVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.LabelVector_pop_back)
    erase = _swig_new_instance_method(_cain.LabelVector_erase)

    def __init__(self, *args):
        _cain.LabelVector_swiginit(self, _cain.new_LabelVector(*args))
    push_back = _swig_new_instance_method(_cain.LabelVector_push_back)
    front = _swig_new_instance_method(_cain.LabelVector_front)
    back = _swig_new_instance_method(_cain.LabelVector_back)
    assign = _swig_new_instance_method(_cain.LabelVector_assign)
    resize = _swig_new_instance_method(_cain.LabelVector_resize)
    insert = _swig_new_instance_method(_cain.LabelVector_insert)
    reserve = _swig_new_instance_method(_cain.LabelVector_reserve)
    capacity = _swig_new_instance_method(_cain.LabelVector_capacity)
    __swig_destroy__ = _cain.delete_LabelVector

# Register LabelVector in _cain:
_cain.LabelVector_swigregister(LabelVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_cain.FloatVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_cain.FloatVector___nonzero__)
    __bool__ = _swig_new_instance_method(_cain.FloatVector___bool__)
    __len__ = _swig_new_instance_method(_cain.FloatVector___len__)
    __getslice__ = _swig_new_instance_method(_cain.FloatVector___getslice__)
    __setslice__ = _swig_new_instance_method(_cain.FloatVector___setslice__)
    __delslice__ = _swig_new_instance_method(_cain.FloatVector___delslice__)
    __delitem__ = _swig_new_instance_method(_cain.FloatVector___delitem__)
    __getitem__ = _swig_new_instance_method(_cain.FloatVector___getitem__)
    __setitem__ = _swig_new_instance_method(_cain.FloatVector___setitem__)
    pop = _swig_new_instance_method(_cain.FloatVector_pop)
    append = _swig_new_instance_method(_cain.FloatVector_append)
    empty = _swig_new_instance_method(_cain.FloatVector_empty)
    size = _swig_new_instance_method(_cain.FloatVector_size)
    swap = _swig_new_instance_method(_cain.FloatVector_swap)
    begin = _swig_new_instance_method(_cain.FloatVector_begin)
    end = _swig_new_instance_method(_cain.FloatVector_end)
    rbegin = _swig_new_instance_method(_cain.FloatVector_rbegin)
    rend = _swig_new_instance_method(_cain.FloatVector_rend)
    clear = _swig_new_instance_method(_cain.FloatVector_clear)
    get_allocator = _swig_new_instance_method(_cain.FloatVector_get_allocator)
    pop_back = _swig_new_instance_method(_cain.FloatVector_pop_back)
    erase = _swig_new_instance_method(_cain.FloatVector_erase)

    def __init__(self, *args):
        _cain.FloatVector_swiginit(self, _cain.new_FloatVector(*args))
    push_back = _swig_new_instance_method(_cain.FloatVector_push_back)
    front = _swig_new_instance_method(_cain.FloatVector_front)
    back = _swig_new_instance_method(_cain.FloatVector_back)
    assign = _swig_new_instance_method(_cain.FloatVector_assign)
    resize = _swig_new_instance_method(_cain.FloatVector_resize)
    insert = _swig_new_instance_method(_cain.FloatVector_insert)
    reserve = _swig_new_instance_method(_cain.FloatVector_reserve)
    capacity = _swig_new_instance_method(_cain.FloatVector_capacity)
    __swig_destroy__ = _cain.delete_FloatVector

# Register FloatVector in _cain:
_cain.FloatVector_swigregister(FloatVector)

class CommoncPoint1D(Point):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommoncPoint1D:
            _self = None
        else:
            _self = self
        _cain.CommoncPoint1D_swiginit(self, _cain.new_CommoncPoint1D(_self, ))
    __swig_destroy__ = _cain.delete_CommoncPoint1D
    get_classname = _swig_new_instance_method(_cain.CommoncPoint1D_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommoncPoint1D_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommoncPoint1D_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommoncPoint1D_get_shared)
    type = property(_cain.CommoncPoint1D_type_get, _cain.CommoncPoint1D_type_set)
    unwrap = _swig_new_static_method(_cain.CommoncPoint1D_unwrap)
    dereference = _swig_new_static_method(_cain.CommoncPoint1D_dereference)
    get = _swig_new_static_method(_cain.CommoncPoint1D_get)
    get_uuid = _swig_new_instance_method(_cain.CommoncPoint1D_get_uuid)
    name = property(_cain.CommoncPoint1D_name_get, _cain.CommoncPoint1D_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommoncPoint1D_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommoncPoint1D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommoncPoint1D(self)
        return weakref.proxy(self)

# Register CommoncPoint1D in _cain:
_cain.CommoncPoint1D_swigregister(CommoncPoint1D)
CommoncPoint1D_get_shared = _cain.CommoncPoint1D_get_shared
CommoncPoint1D_unwrap = _cain.CommoncPoint1D_unwrap
CommoncPoint1D_dereference = _cain.CommoncPoint1D_dereference
CommoncPoint1D_get = _cain.CommoncPoint1D_get
CommoncPoint1D_gen_scheme = _cain.CommoncPoint1D_gen_scheme

class CommontPoint1D(Point):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommontPoint1D:
            _self = None
        else:
            _self = self
        _cain.CommontPoint1D_swiginit(self, _cain.new_CommontPoint1D(_self, ))
    __swig_destroy__ = _cain.delete_CommontPoint1D
    get_classname = _swig_new_instance_method(_cain.CommontPoint1D_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommontPoint1D_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommontPoint1D_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommontPoint1D_get_shared)
    type = property(_cain.CommontPoint1D_type_get, _cain.CommontPoint1D_type_set)
    unwrap = _swig_new_static_method(_cain.CommontPoint1D_unwrap)
    dereference = _swig_new_static_method(_cain.CommontPoint1D_dereference)
    get = _swig_new_static_method(_cain.CommontPoint1D_get)
    get_uuid = _swig_new_instance_method(_cain.CommontPoint1D_get_uuid)
    name = property(_cain.CommontPoint1D_name_get, _cain.CommontPoint1D_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommontPoint1D_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommontPoint1D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommontPoint1D(self)
        return weakref.proxy(self)

# Register CommontPoint1D in _cain:
_cain.CommontPoint1D_swigregister(CommontPoint1D)
CommontPoint1D_get_shared = _cain.CommontPoint1D_get_shared
CommontPoint1D_unwrap = _cain.CommontPoint1D_unwrap
CommontPoint1D_dereference = _cain.CommontPoint1D_dereference
CommontPoint1D_get = _cain.CommontPoint1D_get
CommontPoint1D_gen_scheme = _cain.CommontPoint1D_gen_scheme

class CommonStructuredMesh(Mesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonStructuredMesh:
            _self = None
        else:
            _self = self
        _cain.CommonStructuredMesh_swiginit(self, _cain.new_CommonStructuredMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonStructuredMesh
    get_classname = _swig_new_instance_method(_cain.CommonStructuredMesh_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonStructuredMesh_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonStructuredMesh_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonStructuredMesh_get_shared)
    type = property(_cain.CommonStructuredMesh_type_get, _cain.CommonStructuredMesh_type_set)
    unwrap = _swig_new_static_method(_cain.CommonStructuredMesh_unwrap)
    dereference = _swig_new_static_method(_cain.CommonStructuredMesh_dereference)
    get = _swig_new_static_method(_cain.CommonStructuredMesh_get)
    get_uuid = _swig_new_instance_method(_cain.CommonStructuredMesh_get_uuid)
    name = property(_cain.CommonStructuredMesh_name_get, _cain.CommonStructuredMesh_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonStructuredMesh_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonStructuredMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonStructuredMesh(self)
        return weakref.proxy(self)

# Register CommonStructuredMesh in _cain:
_cain.CommonStructuredMesh_swigregister(CommonStructuredMesh)
CommonStructuredMesh_get_shared = _cain.CommonStructuredMesh_get_shared
CommonStructuredMesh_unwrap = _cain.CommonStructuredMesh_unwrap
CommonStructuredMesh_dereference = _cain.CommonStructuredMesh_dereference
CommonStructuredMesh_get = _cain.CommonStructuredMesh_get
CommonStructuredMesh_gen_scheme = _cain.CommonStructuredMesh_gen_scheme

class CommonUnstructuredMesh(Mesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructuredMesh:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructuredMesh_swiginit(self, _cain.new_CommonUnstructuredMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructuredMesh
    get_classname = _swig_new_instance_method(_cain.CommonUnstructuredMesh_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonUnstructuredMesh_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonUnstructuredMesh_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonUnstructuredMesh_get_shared)
    type = property(_cain.CommonUnstructuredMesh_type_get, _cain.CommonUnstructuredMesh_type_set)
    unwrap = _swig_new_static_method(_cain.CommonUnstructuredMesh_unwrap)
    dereference = _swig_new_static_method(_cain.CommonUnstructuredMesh_dereference)
    get = _swig_new_static_method(_cain.CommonUnstructuredMesh_get)
    get_uuid = _swig_new_instance_method(_cain.CommonUnstructuredMesh_get_uuid)
    name = property(_cain.CommonUnstructuredMesh_name_get, _cain.CommonUnstructuredMesh_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonUnstructuredMesh_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonUnstructuredMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructuredMesh(self)
        return weakref.proxy(self)

# Register CommonUnstructuredMesh in _cain:
_cain.CommonUnstructuredMesh_swigregister(CommonUnstructuredMesh)
CommonUnstructuredMesh_get_shared = _cain.CommonUnstructuredMesh_get_shared
CommonUnstructuredMesh_unwrap = _cain.CommonUnstructuredMesh_unwrap
CommonUnstructuredMesh_dereference = _cain.CommonUnstructuredMesh_dereference
CommonUnstructuredMesh_get = _cain.CommonUnstructuredMesh_get
CommonUnstructuredMesh_gen_scheme = _cain.CommonUnstructuredMesh_gen_scheme

class CommonUnstructuredDexter(Dexter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructuredDexter:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructuredDexter_swiginit(self, _cain.new_CommonUnstructuredDexter(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructuredDexter
    get_classname = _swig_new_instance_method(_cain.CommonUnstructuredDexter_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonUnstructuredDexter_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonUnstructuredDexter_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonUnstructuredDexter_get_shared)
    type = property(_cain.CommonUnstructuredDexter_type_get, _cain.CommonUnstructuredDexter_type_set)
    unwrap = _swig_new_static_method(_cain.CommonUnstructuredDexter_unwrap)
    dereference = _swig_new_static_method(_cain.CommonUnstructuredDexter_dereference)
    get = _swig_new_static_method(_cain.CommonUnstructuredDexter_get)
    get_uuid = _swig_new_instance_method(_cain.CommonUnstructuredDexter_get_uuid)
    name = property(_cain.CommonUnstructuredDexter_name_get, _cain.CommonUnstructuredDexter_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonUnstructuredDexter_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonUnstructuredDexter_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructuredDexter(self)
        return weakref.proxy(self)

# Register CommonUnstructuredDexter in _cain:
_cain.CommonUnstructuredDexter_swigregister(CommonUnstructuredDexter)
CommonUnstructuredDexter_get_shared = _cain.CommonUnstructuredDexter_get_shared
CommonUnstructuredDexter_unwrap = _cain.CommonUnstructuredDexter_unwrap
CommonUnstructuredDexter_dereference = _cain.CommonUnstructuredDexter_dereference
CommonUnstructuredDexter_get = _cain.CommonUnstructuredDexter_get
CommonUnstructuredDexter_gen_scheme = _cain.CommonUnstructuredDexter_gen_scheme

class tPoint1D(CommontPoint1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    e = property(_cain.tPoint1D_e_get, _cain.tPoint1D_e_set)
    xi = property(_cain.tPoint1D_xi_get, _cain.tPoint1D_xi_set)

    def __init__(self, *args):
        if self.__class__ == tPoint1D:
            _self = None
        else:
            _self = self
        _cain.tPoint1D_swiginit(self, _cain.new_tPoint1D(_self, *args))
    clone = _swig_new_instance_method(_cain.tPoint1D_clone)
    __swig_destroy__ = _cain.delete_tPoint1D
    def __disown__(self):
        self.this.disown()
        _cain.disown_tPoint1D(self)
        return weakref.proxy(self)

# Register tPoint1D in _cain:
_cain.tPoint1D_swigregister(tPoint1D)

class cPoint1D(CommoncPoint1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cain.cPoint1D_x_get, _cain.cPoint1D_x_set)

    def __init__(self, *args):
        if self.__class__ == cPoint1D:
            _self = None
        else:
            _self = self
        _cain.cPoint1D_swiginit(self, _cain.new_cPoint1D(_self, *args))
    clone = _swig_new_instance_method(_cain.cPoint1D_clone)
    __swig_destroy__ = _cain.delete_cPoint1D
    def __disown__(self):
        self.this.disown()
        _cain.disown_cPoint1D(self)
        return weakref.proxy(self)

# Register cPoint1D in _cain:
_cain.cPoint1D_swigregister(cPoint1D)

class StructuredMesh(CommonStructuredMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == StructuredMesh:
            _self = None
        else:
            _self = self
        _cain.StructuredMesh_swiginit(self, _cain.new_StructuredMesh(_self, ))
    __swig_destroy__ = _cain.delete_StructuredMesh
    config = _swig_new_instance_method(_cain.StructuredMesh_config)
    lighten = _swig_new_instance_method(_cain.StructuredMesh_lighten)
    load = _swig_new_instance_method(_cain.StructuredMesh_load)
    world2mesh = _swig_new_instance_method(_cain.StructuredMesh_world2mesh)
    mesh2world = _swig_new_instance_method(_cain.StructuredMesh_mesh2world)
    create = _swig_new_static_method(_cain.StructuredMesh_create)
    def __disown__(self):
        self.this.disown()
        _cain.disown_StructuredMesh(self)
        return weakref.proxy(self)

# Register StructuredMesh in _cain:
_cain.StructuredMesh_swigregister(StructuredMesh)
StructuredMesh_create = _cain.StructuredMesh_create

class intRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ini = property(_cain.intRange_ini_get, _cain.intRange_ini_set)
    end = property(_cain.intRange_end_get, _cain.intRange_end_set)

    def __init__(self):
        _cain.intRange_swiginit(self, _cain.new_intRange())
    __swig_destroy__ = _cain.delete_intRange

# Register intRange in _cain:
_cain.intRange_swigregister(intRange)

class contourElem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elem = property(_cain.contourElem_elem_get, _cain.contourElem_elem_set)
    side = property(_cain.contourElem_side_get, _cain.contourElem_side_set)

    def __init__(self):
        _cain.contourElem_swiginit(self, _cain.new_contourElem())
    __swig_destroy__ = _cain.delete_contourElem

# Register contourElem in _cain:
_cain.contourElem_swigregister(contourElem)

class UnstructuredMesh(CommonUnstructuredMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_cain.UnstructuredMesh_type_get, _cain.UnstructuredMesh_type_set)
    nnodes = property(_cain.UnstructuredMesh_nnodes_get, _cain.UnstructuredMesh_nnodes_set)
    nelems = property(_cain.UnstructuredMesh_nelems_get, _cain.UnstructuredMesh_nelems_set)
    nzones = property(_cain.UnstructuredMesh_nzones_get, _cain.UnstructuredMesh_nzones_set)
    nboundaries = property(_cain.UnstructuredMesh_nboundaries_get, _cain.UnstructuredMesh_nboundaries_set)
    nsides = property(_cain.UnstructuredMesh_nsides_get, _cain.UnstructuredMesh_nsides_set)
    ennodes = property(_cain.UnstructuredMesh_ennodes_get, _cain.UnstructuredMesh_ennodes_set)
    zonemaxelems = property(_cain.UnstructuredMesh_zonemaxelems_get, _cain.UnstructuredMesh_zonemaxelems_set)
    periodic = property(_cain.UnstructuredMesh_periodic_get, _cain.UnstructuredMesh_periodic_set)
    elements = property(_cain.UnstructuredMesh_elements_get, _cain.UnstructuredMesh_elements_set)
    nodelems = property(_cain.UnstructuredMesh_nodelems_get, _cain.UnstructuredMesh_nodelems_set)
    nodes = property(_cain.UnstructuredMesh_nodes_get, _cain.UnstructuredMesh_nodes_set)
    minelemsize = property(_cain.UnstructuredMesh_minelemsize_get, _cain.UnstructuredMesh_minelemsize_set)
    regular = property(_cain.UnstructuredMesh_regular_get, _cain.UnstructuredMesh_regular_set)
    probnd = property(_cain.UnstructuredMesh_probnd_get, _cain.UnstructuredMesh_probnd_set)
    dombnd = property(_cain.UnstructuredMesh_dombnd_get, _cain.UnstructuredMesh_dombnd_set)
    domprobnd = property(_cain.UnstructuredMesh_domprobnd_get, _cain.UnstructuredMesh_domprobnd_set)
    elemids = property(_cain.UnstructuredMesh_elemids_get, _cain.UnstructuredMesh_elemids_set)
    numelemstoshare = property(_cain.UnstructuredMesh_numelemstoshare_get, _cain.UnstructuredMesh_numelemstoshare_set)
    elemstoshare = property(_cain.UnstructuredMesh_elemstoshare_get, _cain.UnstructuredMesh_elemstoshare_set)
    extranelems = property(_cain.UnstructuredMesh_extranelems_get, _cain.UnstructuredMesh_extranelems_set)
    extraelems = property(_cain.UnstructuredMesh_extraelems_get, _cain.UnstructuredMesh_extraelems_set)

    def __init__(self, *args):
        if self.__class__ == UnstructuredMesh:
            _self = None
        else:
            _self = self
        _cain.UnstructuredMesh_swiginit(self, _cain.new_UnstructuredMesh(_self, *args))
    __swig_destroy__ = _cain.delete_UnstructuredMesh
    config = _swig_new_instance_method(_cain.UnstructuredMesh_config)
    lighten = _swig_new_instance_method(_cain.UnstructuredMesh_lighten)
    load = _swig_new_instance_method(_cain.UnstructuredMesh_load)
    mesh2world = _swig_new_instance_method(_cain.UnstructuredMesh_mesh2world)
    get_pointcoords = _swig_new_instance_method(_cain.UnstructuredMesh_get_pointcoords)
    get_numextraelements = _swig_new_instance_method(_cain.UnstructuredMesh_get_numextraelements)
    get_extraelements = _swig_new_instance_method(_cain.UnstructuredMesh_get_extraelements)
    get_contour = _swig_new_instance_method(_cain.UnstructuredMesh_get_contour)
    world2mesh = _swig_new_instance_method(_cain.UnstructuredMesh_world2mesh)
    def __disown__(self):
        self.this.disown()
        _cain.disown_UnstructuredMesh(self)
        return weakref.proxy(self)

# Register UnstructuredMesh in _cain:
_cain.UnstructuredMesh_swigregister(UnstructuredMesh)

class UnstructuredDexter(CommonUnstructuredDexter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == UnstructuredDexter:
            _self = None
        else:
            _self = self
        _cain.UnstructuredDexter_swiginit(self, _cain.new_UnstructuredDexter(_self, ))
    __swig_destroy__ = _cain.delete_UnstructuredDexter
    config = _swig_new_instance_method(_cain.UnstructuredDexter_config)
    decompose = _swig_new_instance_method(_cain.UnstructuredDexter_decompose)
    get_localmesh = _swig_new_instance_method(_cain.UnstructuredDexter_get_localmesh)
    def __disown__(self):
        self.this.disown()
        _cain.disown_UnstructuredDexter(self)
        return weakref.proxy(self)

# Register UnstructuredDexter in _cain:
_cain.UnstructuredDexter_swigregister(UnstructuredDexter)

class CommoncPoint2D(cPoint1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommoncPoint2D:
            _self = None
        else:
            _self = self
        _cain.CommoncPoint2D_swiginit(self, _cain.new_CommoncPoint2D(_self, ))
    __swig_destroy__ = _cain.delete_CommoncPoint2D
    get_classname = _swig_new_instance_method(_cain.CommoncPoint2D_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommoncPoint2D_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommoncPoint2D_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommoncPoint2D_get_shared)
    type = property(_cain.CommoncPoint2D_type_get, _cain.CommoncPoint2D_type_set)
    unwrap = _swig_new_static_method(_cain.CommoncPoint2D_unwrap)
    dereference = _swig_new_static_method(_cain.CommoncPoint2D_dereference)
    get = _swig_new_static_method(_cain.CommoncPoint2D_get)
    get_uuid = _swig_new_instance_method(_cain.CommoncPoint2D_get_uuid)
    name = property(_cain.CommoncPoint2D_name_get, _cain.CommoncPoint2D_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommoncPoint2D_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommoncPoint2D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommoncPoint2D(self)
        return weakref.proxy(self)

# Register CommoncPoint2D in _cain:
_cain.CommoncPoint2D_swigregister(CommoncPoint2D)
CommoncPoint2D_get_shared = _cain.CommoncPoint2D_get_shared
CommoncPoint2D_unwrap = _cain.CommoncPoint2D_unwrap
CommoncPoint2D_dereference = _cain.CommoncPoint2D_dereference
CommoncPoint2D_get = _cain.CommoncPoint2D_get
CommoncPoint2D_gen_scheme = _cain.CommoncPoint2D_gen_scheme

class CommontPoint2D(tPoint1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommontPoint2D:
            _self = None
        else:
            _self = self
        _cain.CommontPoint2D_swiginit(self, _cain.new_CommontPoint2D(_self, ))
    __swig_destroy__ = _cain.delete_CommontPoint2D
    get_classname = _swig_new_instance_method(_cain.CommontPoint2D_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommontPoint2D_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommontPoint2D_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommontPoint2D_get_shared)
    type = property(_cain.CommontPoint2D_type_get, _cain.CommontPoint2D_type_set)
    unwrap = _swig_new_static_method(_cain.CommontPoint2D_unwrap)
    dereference = _swig_new_static_method(_cain.CommontPoint2D_dereference)
    get = _swig_new_static_method(_cain.CommontPoint2D_get)
    get_uuid = _swig_new_instance_method(_cain.CommontPoint2D_get_uuid)
    name = property(_cain.CommontPoint2D_name_get, _cain.CommontPoint2D_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommontPoint2D_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommontPoint2D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommontPoint2D(self)
        return weakref.proxy(self)

# Register CommontPoint2D in _cain:
_cain.CommontPoint2D_swigregister(CommontPoint2D)
CommontPoint2D_get_shared = _cain.CommontPoint2D_get_shared
CommontPoint2D_unwrap = _cain.CommontPoint2D_unwrap
CommontPoint2D_dereference = _cain.CommontPoint2D_dereference
CommontPoint2D_get = _cain.CommontPoint2D_get
CommontPoint2D_gen_scheme = _cain.CommontPoint2D_gen_scheme

class tPoint2D(CommontPoint2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eta = property(_cain.tPoint2D_eta_get, _cain.tPoint2D_eta_set)

    def __init__(self, *args):
        if self.__class__ == tPoint2D:
            _self = None
        else:
            _self = self
        _cain.tPoint2D_swiginit(self, _cain.new_tPoint2D(_self, *args))
    clone = _swig_new_instance_method(_cain.tPoint2D_clone)
    __swig_destroy__ = _cain.delete_tPoint2D
    def __disown__(self):
        self.this.disown()
        _cain.disown_tPoint2D(self)
        return weakref.proxy(self)

# Register tPoint2D in _cain:
_cain.tPoint2D_swigregister(tPoint2D)

class cPoint2D(CommoncPoint2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_cain.cPoint2D_y_get, _cain.cPoint2D_y_set)

    def __init__(self, *args):
        if self.__class__ == cPoint2D:
            _self = None
        else:
            _self = self
        _cain.cPoint2D_swiginit(self, _cain.new_cPoint2D(_self, *args))
    clone = _swig_new_instance_method(_cain.cPoint2D_clone)
    __swig_destroy__ = _cain.delete_cPoint2D
    def __disown__(self):
        self.this.disown()
        _cain.disown_cPoint2D(self)
        return weakref.proxy(self)

# Register cPoint2D in _cain:
_cain.cPoint2D_swigregister(cPoint2D)

class CommoncPoint3D(cPoint2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommoncPoint3D:
            _self = None
        else:
            _self = self
        _cain.CommoncPoint3D_swiginit(self, _cain.new_CommoncPoint3D(_self, ))
    __swig_destroy__ = _cain.delete_CommoncPoint3D
    get_classname = _swig_new_instance_method(_cain.CommoncPoint3D_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommoncPoint3D_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommoncPoint3D_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommoncPoint3D_get_shared)
    type = property(_cain.CommoncPoint3D_type_get, _cain.CommoncPoint3D_type_set)
    unwrap = _swig_new_static_method(_cain.CommoncPoint3D_unwrap)
    dereference = _swig_new_static_method(_cain.CommoncPoint3D_dereference)
    get = _swig_new_static_method(_cain.CommoncPoint3D_get)
    get_uuid = _swig_new_instance_method(_cain.CommoncPoint3D_get_uuid)
    name = property(_cain.CommoncPoint3D_name_get, _cain.CommoncPoint3D_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommoncPoint3D_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommoncPoint3D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommoncPoint3D(self)
        return weakref.proxy(self)

# Register CommoncPoint3D in _cain:
_cain.CommoncPoint3D_swigregister(CommoncPoint3D)
CommoncPoint3D_get_shared = _cain.CommoncPoint3D_get_shared
CommoncPoint3D_unwrap = _cain.CommoncPoint3D_unwrap
CommoncPoint3D_dereference = _cain.CommoncPoint3D_dereference
CommoncPoint3D_get = _cain.CommoncPoint3D_get
CommoncPoint3D_gen_scheme = _cain.CommoncPoint3D_gen_scheme

class CommontPoint3D(tPoint2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommontPoint3D:
            _self = None
        else:
            _self = self
        _cain.CommontPoint3D_swiginit(self, _cain.new_CommontPoint3D(_self, ))
    __swig_destroy__ = _cain.delete_CommontPoint3D
    get_classname = _swig_new_instance_method(_cain.CommontPoint3D_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommontPoint3D_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommontPoint3D_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommontPoint3D_get_shared)
    type = property(_cain.CommontPoint3D_type_get, _cain.CommontPoint3D_type_set)
    unwrap = _swig_new_static_method(_cain.CommontPoint3D_unwrap)
    dereference = _swig_new_static_method(_cain.CommontPoint3D_dereference)
    get = _swig_new_static_method(_cain.CommontPoint3D_get)
    get_uuid = _swig_new_instance_method(_cain.CommontPoint3D_get_uuid)
    name = property(_cain.CommontPoint3D_name_get, _cain.CommontPoint3D_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommontPoint3D_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommontPoint3D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommontPoint3D(self)
        return weakref.proxy(self)

# Register CommontPoint3D in _cain:
_cain.CommontPoint3D_swigregister(CommontPoint3D)
CommontPoint3D_get_shared = _cain.CommontPoint3D_get_shared
CommontPoint3D_unwrap = _cain.CommontPoint3D_unwrap
CommontPoint3D_dereference = _cain.CommontPoint3D_dereference
CommontPoint3D_get = _cain.CommontPoint3D_get
CommontPoint3D_gen_scheme = _cain.CommontPoint3D_gen_scheme

class CommonTriangleElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTriangleElement:
            _self = None
        else:
            _self = self
        _cain.CommonTriangleElement_swiginit(self, _cain.new_CommonTriangleElement(_self, ))
    __swig_destroy__ = _cain.delete_CommonTriangleElement
    get_classname = _swig_new_instance_method(_cain.CommonTriangleElement_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonTriangleElement_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonTriangleElement_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonTriangleElement_get_shared)
    type = property(_cain.CommonTriangleElement_type_get, _cain.CommonTriangleElement_type_set)
    unwrap = _swig_new_static_method(_cain.CommonTriangleElement_unwrap)
    dereference = _swig_new_static_method(_cain.CommonTriangleElement_dereference)
    get = _swig_new_static_method(_cain.CommonTriangleElement_get)
    get_uuid = _swig_new_instance_method(_cain.CommonTriangleElement_get_uuid)
    name = property(_cain.CommonTriangleElement_name_get, _cain.CommonTriangleElement_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonTriangleElement_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonTriangleElement_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonTriangleElement(self)
        return weakref.proxy(self)

# Register CommonTriangleElement in _cain:
_cain.CommonTriangleElement_swigregister(CommonTriangleElement)
CommonTriangleElement_get_shared = _cain.CommonTriangleElement_get_shared
CommonTriangleElement_unwrap = _cain.CommonTriangleElement_unwrap
CommonTriangleElement_dereference = _cain.CommonTriangleElement_dereference
CommonTriangleElement_get = _cain.CommonTriangleElement_get
CommonTriangleElement_gen_scheme = _cain.CommonTriangleElement_gen_scheme

class CommonUnstructured2DMesh(UnstructuredMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructured2DMesh:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructured2DMesh_swiginit(self, _cain.new_CommonUnstructured2DMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructured2DMesh
    get_classname = _swig_new_instance_method(_cain.CommonUnstructured2DMesh_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonUnstructured2DMesh_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonUnstructured2DMesh_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonUnstructured2DMesh_get_shared)
    type = property(_cain.CommonUnstructured2DMesh_type_get, _cain.CommonUnstructured2DMesh_type_set)
    unwrap = _swig_new_static_method(_cain.CommonUnstructured2DMesh_unwrap)
    dereference = _swig_new_static_method(_cain.CommonUnstructured2DMesh_dereference)
    get = _swig_new_static_method(_cain.CommonUnstructured2DMesh_get)
    get_uuid = _swig_new_instance_method(_cain.CommonUnstructured2DMesh_get_uuid)
    name = property(_cain.CommonUnstructured2DMesh_name_get, _cain.CommonUnstructured2DMesh_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonUnstructured2DMesh_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonUnstructured2DMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructured2DMesh(self)
        return weakref.proxy(self)

# Register CommonUnstructured2DMesh in _cain:
_cain.CommonUnstructured2DMesh_swigregister(CommonUnstructured2DMesh)
CommonUnstructured2DMesh_get_shared = _cain.CommonUnstructured2DMesh_get_shared
CommonUnstructured2DMesh_unwrap = _cain.CommonUnstructured2DMesh_unwrap
CommonUnstructured2DMesh_dereference = _cain.CommonUnstructured2DMesh_dereference
CommonUnstructured2DMesh_get = _cain.CommonUnstructured2DMesh_get
CommonUnstructured2DMesh_gen_scheme = _cain.CommonUnstructured2DMesh_gen_scheme

class CommonUnstructured3DMesh(UnstructuredMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructured3DMesh:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructured3DMesh_swiginit(self, _cain.new_CommonUnstructured3DMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructured3DMesh
    get_classname = _swig_new_instance_method(_cain.CommonUnstructured3DMesh_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonUnstructured3DMesh_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonUnstructured3DMesh_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonUnstructured3DMesh_get_shared)
    type = property(_cain.CommonUnstructured3DMesh_type_get, _cain.CommonUnstructured3DMesh_type_set)
    unwrap = _swig_new_static_method(_cain.CommonUnstructured3DMesh_unwrap)
    dereference = _swig_new_static_method(_cain.CommonUnstructured3DMesh_dereference)
    get = _swig_new_static_method(_cain.CommonUnstructured3DMesh_get)
    get_uuid = _swig_new_instance_method(_cain.CommonUnstructured3DMesh_get_uuid)
    name = property(_cain.CommonUnstructured3DMesh_name_get, _cain.CommonUnstructured3DMesh_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonUnstructured3DMesh_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonUnstructured3DMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructured3DMesh(self)
        return weakref.proxy(self)

# Register CommonUnstructured3DMesh in _cain:
_cain.CommonUnstructured3DMesh_swigregister(CommonUnstructured3DMesh)
CommonUnstructured3DMesh_get_shared = _cain.CommonUnstructured3DMesh_get_shared
CommonUnstructured3DMesh_unwrap = _cain.CommonUnstructured3DMesh_unwrap
CommonUnstructured3DMesh_dereference = _cain.CommonUnstructured3DMesh_dereference
CommonUnstructured3DMesh_get = _cain.CommonUnstructured3DMesh_get
CommonUnstructured3DMesh_gen_scheme = _cain.CommonUnstructured3DMesh_gen_scheme

class CommonForeignUDexter(UnstructuredDexter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonForeignUDexter:
            _self = None
        else:
            _self = self
        _cain.CommonForeignUDexter_swiginit(self, _cain.new_CommonForeignUDexter(_self, ))
    __swig_destroy__ = _cain.delete_CommonForeignUDexter
    get_classname = _swig_new_instance_method(_cain.CommonForeignUDexter_get_classname)
    get_metadata_path = _swig_new_instance_method(_cain.CommonForeignUDexter_get_metadata_path)
    shared_from_this = _swig_new_instance_method(_cain.CommonForeignUDexter_shared_from_this)
    get_shared = _swig_new_static_method(_cain.CommonForeignUDexter_get_shared)
    type = property(_cain.CommonForeignUDexter_type_get, _cain.CommonForeignUDexter_type_set)
    unwrap = _swig_new_static_method(_cain.CommonForeignUDexter_unwrap)
    dereference = _swig_new_static_method(_cain.CommonForeignUDexter_dereference)
    get = _swig_new_static_method(_cain.CommonForeignUDexter_get)
    get_uuid = _swig_new_instance_method(_cain.CommonForeignUDexter_get_uuid)
    name = property(_cain.CommonForeignUDexter_name_get, _cain.CommonForeignUDexter_name_set)
    get_scheme = _swig_new_instance_method(_cain.CommonForeignUDexter_get_scheme)
    gen_scheme = _swig_new_static_method(_cain.CommonForeignUDexter_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonForeignUDexter(self)
        return weakref.proxy(self)

# Register CommonForeignUDexter in _cain:
_cain.CommonForeignUDexter_swigregister(CommonForeignUDexter)
CommonForeignUDexter_get_shared = _cain.CommonForeignUDexter_get_shared
CommonForeignUDexter_unwrap = _cain.CommonForeignUDexter_unwrap
CommonForeignUDexter_dereference = _cain.CommonForeignUDexter_dereference
CommonForeignUDexter_get = _cain.CommonForeignUDexter_get
CommonForeignUDexter_gen_scheme = _cain.CommonForeignUDexter_gen_scheme

class tPoint3D(CommontPoint3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    zeta = property(_cain.tPoint3D_zeta_get, _cain.tPoint3D_zeta_set)

    def __init__(self, *args):
        if self.__class__ == tPoint3D:
            _self = None
        else:
            _self = self
        _cain.tPoint3D_swiginit(self, _cain.new_tPoint3D(_self, *args))
    clone = _swig_new_instance_method(_cain.tPoint3D_clone)
    __swig_destroy__ = _cain.delete_tPoint3D
    def __disown__(self):
        self.this.disown()
        _cain.disown_tPoint3D(self)
        return weakref.proxy(self)

# Register tPoint3D in _cain:
_cain.tPoint3D_swigregister(tPoint3D)

class cPoint3D(CommoncPoint3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    z = property(_cain.cPoint3D_z_get, _cain.cPoint3D_z_set)

    def __init__(self, *args):
        if self.__class__ == cPoint3D:
            _self = None
        else:
            _self = self
        _cain.cPoint3D_swiginit(self, _cain.new_cPoint3D(_self, *args))
    clone = _swig_new_instance_method(_cain.cPoint3D_clone)
    __swig_destroy__ = _cain.delete_cPoint3D
    def __disown__(self):
        self.this.disown()
        _cain.disown_cPoint3D(self)
        return weakref.proxy(self)

# Register cPoint3D in _cain:
_cain.cPoint3D_swigregister(cPoint3D)

class TriangleElement(CommonTriangleElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TriangleElement:
            _self = None
        else:
            _self = self
        _cain.TriangleElement_swiginit(self, _cain.new_TriangleElement(_self, ))
    nnodes = _swig_new_instance_method(_cain.TriangleElement_nnodes)
    nsides = _swig_new_instance_method(_cain.TriangleElement_nsides)
    point_inside = _swig_new_instance_method(_cain.TriangleElement_point_inside)
    point_inworld = _swig_new_instance_method(_cain.TriangleElement_point_inworld)
    sideconversion_fromgambit = _swig_new_instance_method(_cain.TriangleElement_sideconversion_fromgambit)
    calculate_metrics = _swig_new_instance_method(_cain.TriangleElement_calculate_metrics)
    get_nodesperside = _swig_new_instance_method(_cain.TriangleElement_get_nodesperside)
    get_gradient = _swig_new_instance_method(_cain.TriangleElement_get_gradient)
    get_orientation = _swig_new_instance_method(_cain.TriangleElement_get_orientation)
    create = _swig_new_static_method(_cain.TriangleElement_create)
    __swig_destroy__ = _cain.delete_TriangleElement
    def __disown__(self):
        self.this.disown()
        _cain.disown_TriangleElement(self)
        return weakref.proxy(self)

# Register TriangleElement in _cain:
_cain.TriangleElement_swigregister(TriangleElement)
TriangleElement_create = _cain.TriangleElement_create

class Unstructured2DMesh(CommonUnstructured2DMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Unstructured2DMesh:
            _self = None
        else:
            _self = self
        _cain.Unstructured2DMesh_swiginit(self, _cain.new_Unstructured2DMesh(_self, ))
    get_pointcoords = _swig_new_instance_method(_cain.Unstructured2DMesh_get_pointcoords)
    create = _swig_new_static_method(_cain.Unstructured2DMesh_create)
    world2mesh = _swig_new_instance_method(_cain.Unstructured2DMesh_world2mesh)
    __swig_destroy__ = _cain.delete_Unstructured2DMesh
    def __disown__(self):
        self.this.disown()
        _cain.disown_Unstructured2DMesh(self)
        return weakref.proxy(self)

# Register Unstructured2DMesh in _cain:
_cain.Unstructured2DMesh_swigregister(Unstructured2DMesh)
Unstructured2DMesh_create = _cain.Unstructured2DMesh_create

class Unstructured3DMesh(CommonUnstructured3DMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Unstructured3DMesh:
            _self = None
        else:
            _self = self
        _cain.Unstructured3DMesh_swiginit(self, _cain.new_Unstructured3DMesh(_self, ))
    get_pointcoords = _swig_new_instance_method(_cain.Unstructured3DMesh_get_pointcoords)
    create = _swig_new_static_method(_cain.Unstructured3DMesh_create)
    world2mesh = _swig_new_instance_method(_cain.Unstructured3DMesh_world2mesh)
    __swig_destroy__ = _cain.delete_Unstructured3DMesh
    def __disown__(self):
        self.this.disown()
        _cain.disown_Unstructured3DMesh(self)
        return weakref.proxy(self)

# Register Unstructured3DMesh in _cain:
_cain.Unstructured3DMesh_swigregister(Unstructured3DMesh)
Unstructured3DMesh_create = _cain.Unstructured3DMesh_create

class ForeignUDexter(CommonForeignUDexter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ForeignUDexter:
            _self = None
        else:
            _self = self
        _cain.ForeignUDexter_swiginit(self, _cain.new_ForeignUDexter(_self, ))
    config = _swig_new_instance_method(_cain.ForeignUDexter_config)
    decompose = _swig_new_instance_method(_cain.ForeignUDexter_decompose)
    create = _swig_new_static_method(_cain.ForeignUDexter_create)
    __swig_destroy__ = _cain.delete_ForeignUDexter
    def __disown__(self):
        self.this.disown()
        _cain.disown_ForeignUDexter(self)
        return weakref.proxy(self)

# Register ForeignUDexter in _cain:
_cain.ForeignUDexter_swigregister(ForeignUDexter)
ForeignUDexter_create = _cain.ForeignUDexter_create



